{"ast":null,"code":"import React,{useState,useEffect,useCallback}from\"react\";import{useNavigate}from\"react-router-dom\";import\"../styles/Questionnaire.css\";import{db}from\"../firebase/firebase.js\";// Import Firestore instance\nimport{collection,doc,setDoc,getDocs}from\"firebase/firestore\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function QuestionnairePage(){const[data,setData]=useState(null);const[currentLayerIndex,setLayerIndex]=useState(0);const[currentTopicIndex,setTopicIndex]=useState(0);const[currentSubtopicIndex,setSubtopicIndex]=useState(0);const[currentSectionIndex,setSectionIndex]=useState(0);const[currentQuestionIndex,setQuestionIndex]=useState(0);const[responses,setResponses]=useState({});const[selectedAnswer,setSelectedAnswer]=useState(null);const[animationDirection,setAnimationDirection]=useState(\"slide-in\");const navigate=useNavigate();const sanitizeName=name=>name.replace(/[^a-zA-Z0-9]/g,\"_\");const extractFirestoreData=doc=>{const rawData=doc.data();// Extract Firestore fields and handle nested `integerValue` or `stringValue`\nconst parsedData=Object.entries(rawData).reduce((acc,_ref)=>{let[key,value]=_ref;if(value.integerValue!==undefined){acc[key]=parseInt(value.integerValue,10);// Convert to number\n}else if(value.stringValue!==undefined){acc[key]=value.stringValue;}else{acc[key]=value;// Add as-is if no special handling required\n}return acc;},{});return parsedData;};const addDataToFirestore=useCallback(async jsonData=>{try{const layers=jsonData.layers;for(let i=0;i<layers.length;i++){const layer=layers[i];const layerRef=doc(collection(db,\"layers\"),sanitizeName(layer.name));await setDoc(layerRef,{name:layer.name,order:i});for(let j=0;j<layer.topics.length;j++){const topic=layer.topics[j];const topicRef=doc(collection(layerRef,\"topics\"),sanitizeName(topic.name));await setDoc(topicRef,{name:topic.name,order:j});for(let k=0;k<topic.subtopics.length;k++){const subtopic=topic.subtopics[k];const subtopicRef=doc(collection(topicRef,\"subtopics\"),sanitizeName(subtopic.name));await setDoc(subtopicRef,{name:subtopic.name,order:k});for(let l=0;l<subtopic.sections.length;l++){const section=subtopic.sections[l];const sectionRef=doc(collection(subtopicRef,\"sections\"),sanitizeName(section.name));await setDoc(sectionRef,{name:section.name,order:l});for(let m=0;m<section.questions.length;m++){const question=section.questions[m];const questionRef=doc(collection(sectionRef,\"questions\"),sanitizeName(question.name));await setDoc(questionRef,{name:question.name,info:question.info,good_point:question.good_point,scope_for_improvement:question.scope_for_improvement,mandatory:question.mandatory,tags:question.tags,order:m});}}}}}console.log(\"Data successfully added to Firestore!\");}catch(error){console.error(\"Error adding data to Firestore:\",error);}},[]);const getFirestoreData=async layersSnapshot=>{const layers=[];for(const layerDoc of layersSnapshot.docs){const layerData=extractFirestoreData(layerDoc);const topicsSnapshot=await getDocs(collection(layerDoc.ref,\"topics\"));const topics=[];for(const topicDoc of topicsSnapshot.docs){const topicData=topicDoc.data();const subtopicsSnapshot=await getDocs(collection(topicDoc.ref,\"subtopics\"));const subtopics=[];for(const subtopicDoc of subtopicsSnapshot.docs){const subtopicData=subtopicDoc.data();const sectionsSnapshot=await getDocs(collection(subtopicDoc.ref,\"sections\"));const sections=[];for(const sectionDoc of sectionsSnapshot.docs){const sectionData=sectionDoc.data();const questionsSnapshot=await getDocs(collection(sectionDoc.ref,\"questions\"));const questions=questionsSnapshot.docs.map(doc=>doc.data()).sort((a,b)=>a.order-b.order);sections.push({...sectionData,questions});}sections.sort((a,b)=>a.order-b.order);// Sort sections by order\nsubtopics.push({...subtopicData,sections});}subtopics.sort((a,b)=>a.order-b.order);// Sort subtopics by order\ntopics.push({...topicData,subtopics});}topics.sort((a,b)=>a.order-b.order);// Sort topics by order\nlayers.push({...layerData,topics});}layers.sort((a,b)=>a.order-b.order);console.log(layers);return{layers};};useEffect(()=>{const fetchDataFromFirestore=async()=>{try{const layersCollection=collection(db,\"layers\");const layersSnapshot=await getDocs(layersCollection);if(layersSnapshot.empty){console.log(\"Firestore is empty. Adding data...\");fetch(\"/questionnaireData.json\").then(response=>response.json()).then(async jsonData=>{await addDataToFirestore(jsonData);// Add JSON to Firestore\nsetData(jsonData);// Set state with the loaded data\n});}else{console.log(\"Fetching data from Firestore...\");console.log(\"Fetched data1:\",layersSnapshot);const firestoreData=await getFirestoreData(layersSnapshot);console.log(\"Fetched data2:\",firestoreData);setData(firestoreData);// Set state with Firestore data\n}}catch(error){console.error(\"Error fetching data from Firestore:\",error);}};fetchDataFromFirestore();},[addDataToFirestore]);if(!data)return/*#__PURE__*/_jsx(\"div\",{children:\"Loading...\"});const layer=data.layers[currentLayerIndex];const topic=layer.topics[currentTopicIndex];const subtopic=topic.subtopics[currentSubtopicIndex];const section=subtopic.sections[currentSectionIndex];const question=section.questions[currentQuestionIndex];const handleResponseChange=(questionName,answer)=>{setResponses(prevResponses=>({...prevResponses,[questionName]:answer}));setSelectedAnswer(answer);// Track the selected answer\n};const handleNext=()=>{setAnimationDirection(\"slide-out\");setTimeout(()=>{// Your existing navigation logic for moving to the next question\n//if (!selectedAnswer) return; // Only proceed if an answer is selected\nsetSelectedAnswer(null);// Reset selected answer for the next question\nif(currentQuestionIndex<section.questions.length-1){setQuestionIndex(currentQuestionIndex+1);}else if(currentSectionIndex<subtopic.sections.length-1){setSectionIndex(currentSectionIndex+1);setQuestionIndex(0);}else if(currentSubtopicIndex<topic.subtopics.length-1){setSubtopicIndex(currentSubtopicIndex+1);setSectionIndex(0);setQuestionIndex(0);}else if(currentTopicIndex<layer.topics.length-1){setTopicIndex(currentTopicIndex+1);setSubtopicIndex(0);setSectionIndex(0);setQuestionIndex(0);}else if(currentLayerIndex<data.layers.length-1){setLayerIndex(currentLayerIndex+1);setTopicIndex(0);setSubtopicIndex(0);setSectionIndex(0);setQuestionIndex(0);}else{console.log(\"Questionnaire completed\");navigate(\"/score\",{state:{responses,jsonData:data}});}setAnimationDirection(\"slide-in\");},300);};return/*#__PURE__*/_jsxs(\"div\",{className:\"panel\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"panel-header\",children:[/*#__PURE__*/_jsx(\"h1\",{children:layer.name}),/*#__PURE__*/_jsx(\"h2\",{children:topic.name}),/*#__PURE__*/_jsx(\"h3\",{children:subtopic.name})]}),/*#__PURE__*/_jsx(\"div\",{className:\"panel-body\",children:/*#__PURE__*/_jsxs(\"div\",{className:`question-panel ${animationDirection}`,children:[/*#__PURE__*/_jsx(\"p\",{children:/*#__PURE__*/_jsx(\"strong\",{children:question.name})}),/*#__PURE__*/_jsxs(\"div\",{className:\"buttons\",children:[/*#__PURE__*/_jsx(\"button\",{className:selectedAnswer===\"Yes\"?\"selected\":\"\",onClick:()=>handleResponseChange(question.name,\"Yes\"),children:\"Yes\"}),/*#__PURE__*/_jsx(\"button\",{className:selectedAnswer===\"No\"?\"selected\":\"\",onClick:()=>handleResponseChange(question.name,\"No\"),children:\"No\"})]}),/*#__PURE__*/_jsx(\"button\",{className:\"next-button\"//disabled={!selectedAnswer} // Disable until an answer is selected\n,onClick:handleNext,children:\"Next\"})]})})]});}export default QuestionnairePage;// import React, { useState, useEffect, useCallback } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import \"../styles/Questionnaire.css\";\n// import { db } from \"../firebase/firebase.js\"; // Import Firestore instance\n// import { collection, doc, setDoc, getDocs } from \"firebase/firestore\";\n// function QuestionnairePage() {\n//   const [data, setData] = useState(null);\n//   const [currentLayerIndex, setLayerIndex] = useState(0);\n//   const [currentTopicIndex, setTopicIndex] = useState(0);\n//   const [currentSubtopicIndex, setSubtopicIndex] = useState(0);\n//   const [currentSectionIndex, setSectionIndex] = useState(0); // New state for section\n//   const [responses, setResponses] = useState({});\n//   const navigate = useNavigate();\n//   const sanitizeName = (name) => name.replace(/[^a-zA-Z0-9]/g, \"_\");\n//   const addDataToFirestore = useCallback(async (jsonData) => {\n//     try {\n//       const layers = jsonData.layers;\n//       for (const layer of layers) {\n//         const layerRef = doc(collection(db, \"layers\"), sanitizeName(layer.name));\n//         await setDoc(layerRef, { name: layer.name });\n//         for (const topic of layer.topics) {\n//           const topicRef = doc(\n//             collection(layerRef, \"topics\"),\n//             sanitizeName(topic.name)\n//           );\n//           await setDoc(topicRef, { name: topic.name });\n//           for (const subtopic of topic.subtopics) {\n//             const subtopicRef = doc(\n//               collection(topicRef, \"subtopics\"),\n//               sanitizeName(subtopic.name)\n//             );\n//             await setDoc(subtopicRef, { name: subtopic.name });\n//             for (const section of subtopic.sections) {\n//               const sectionRef = doc(\n//                 collection(subtopicRef, \"sections\"),\n//                 sanitizeName(section.name)\n//               );\n//               await setDoc(sectionRef, { name: section.name });\n//               for (const question of section.questions) {\n//                 const questionRef = doc(\n//                   collection(sectionRef, \"questions\"),\n//                   sanitizeName(question.name)\n//                 );\n//                 await setDoc(questionRef, {\n//                   name: question.name,\n//                   info: question.info,\n//                   good_point: question.good_point,\n//                   scope_for_improvement: question.scope_for_improvement,\n//                   mandatory: question.mandatory,\n//                   tags: question.tags,\n//                 });\n//               }\n//             }\n//           }\n//         }\n//       }\n//       console.log(\"Data successfully added to Firestore!\");\n//     } catch (error) {\n//       console.error(\"Error adding data to Firestore:\", error);\n//     }\n//   }, []);\n//   const getFirestoreData = async (layersSnapshot) => {\n//     const layers = [];\n//     for (const layerDoc of layersSnapshot.docs) {\n//       const topicsSnapshot = await getDocs(collection(layerDoc.ref, \"topics\"));\n//       const topics = [];\n//       for (const topicDoc of topicsSnapshot.docs) {\n//         const subtopicsSnapshot = await getDocs(\n//           collection(topicDoc.ref, \"subtopics\")\n//         );\n//         const subtopics = [];\n//         for (const subtopicDoc of subtopicsSnapshot.docs) {\n//           const sectionsSnapshot = await getDocs(\n//             collection(subtopicDoc.ref, \"sections\")\n//           );\n//           const sections = [];\n//           for (const sectionDoc of sectionsSnapshot.docs) {\n//             const questionsSnapshot = await getDocs(\n//               collection(sectionDoc.ref, \"questions\")\n//             );\n//             const questions = questionsSnapshot.docs.map((doc) => doc.data());\n//             sections.push({ name: sectionDoc.id, questions });\n//           }\n//           subtopics.push({ name: subtopicDoc.id, sections });\n//         }\n//         topics.push({ name: topicDoc.id, subtopics });\n//       }\n//       layers.push({ name: layerDoc.id, topics });\n//     }\n//     return { layers };\n//   };\n//   useEffect(() => {\n//     const fetchDataFromFirestore = async () => {\n//       try {\n//         const layersCollection = collection(db, \"layers\");\n//         const layersSnapshot = await getDocs(layersCollection);\n//         if (layersSnapshot.empty) {\n//           console.log(\"Firestore is empty. Adding data...\");\n//           fetch(\"/questionnaireData.json\")\n//             .then((response) => response.json())\n//             .then(async (jsonData) => {\n//               await addDataToFirestore(jsonData); // Add JSON to Firestore\n//               setData(jsonData); // Set state with the loaded data\n//             });\n//         } else {\n//           console.log(\"Fetching data from Firestore...\");\n//           const firestoreData = await getFirestoreData(layersSnapshot);\n//           console.log(\"Fetched data:\", firestoreData);\n//           setData(firestoreData); // Set state with Firestore data\n//         }\n//       } catch (error) {\n//         console.error(\"Error fetching data from Firestore:\", error);\n//       }\n//     };\n//     fetchDataFromFirestore();\n//   }, [addDataToFirestore]);\n//   if (!data) return <div>Loading...</div>;\n//   const layer = data.layers[currentLayerIndex];\n//   const topic = layer.topics[currentTopicIndex];\n//   const subtopic = topic.subtopics[currentSubtopicIndex];\n//   const section = subtopic.sections[currentSectionIndex];\n//   const handleResponseChange = (questionName, answer) => {\n//     setResponses((prevResponses) => ({\n//       ...prevResponses,\n//       [questionName]: answer,\n//     }));\n//   };\n//   const handleNext = () => {\n//     if (currentSectionIndex < subtopic.sections.length - 1) {\n//       setSectionIndex(currentSectionIndex + 1); // Move to next section\n//     } else if (currentSubtopicIndex < topic.subtopics.length - 1) {\n//       setSectionIndex(0);\n//       setSubtopicIndex(currentSubtopicIndex + 1);\n//     } else if (currentTopicIndex < layer.topics.length - 1) {\n//       setSectionIndex(0);\n//       setSubtopicIndex(0);\n//       setTopicIndex(currentTopicIndex + 1);\n//     } else if (currentLayerIndex < data.layers.length - 1) {\n//       setLayerIndex(currentLayerIndex + 1);\n//       setSectionIndex(0);\n//       setTopicIndex(0);\n//       setSubtopicIndex(0);\n//     } else {\n//       console.log(\"Questionnaire completed\");\n//       navigate(\"/score\", { state: { responses, jsonData: data } });\n//     }\n//   };\n//   return (\n//     <div className=\"panel\">\n//       <div className=\"panel-header\">\n//         <h2>Layer: {layer.name}</h2>\n//         <h3>Topic: {topic.name}</h3>\n//         <h4>Subtopic: {subtopic.name}</h4>\n//         <h5>Section: {section.name}</h5>\n//       </div>\n//       <div className=\"panel-body\">\n//         {section.questions.map((question, index) => (\n//           <div key={index} className=\"question-panel\">\n//             <p><strong>{question.name}</strong></p>\n//             <div className=\"buttons\">\n//               <button onClick={() => handleResponseChange(question.name, \"Yes\")}>\n//                 Yes\n//               </button>\n//               <button onClick={() => handleResponseChange(question.name, \"No\")}>\n//                 No\n//               </button>\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n//       <button className=\"next-button\" onClick={handleNext}>\n//         Next\n//       </button>\n//     </div>\n//   );\n// }\n// export default QuestionnairePage;","map":{"version":3,"names":["React","useState","useEffect","useCallback","useNavigate","db","collection","doc","setDoc","getDocs","jsx","_jsx","jsxs","_jsxs","QuestionnairePage","data","setData","currentLayerIndex","setLayerIndex","currentTopicIndex","setTopicIndex","currentSubtopicIndex","setSubtopicIndex","currentSectionIndex","setSectionIndex","currentQuestionIndex","setQuestionIndex","responses","setResponses","selectedAnswer","setSelectedAnswer","animationDirection","setAnimationDirection","navigate","sanitizeName","name","replace","extractFirestoreData","rawData","parsedData","Object","entries","reduce","acc","_ref","key","value","integerValue","undefined","parseInt","stringValue","addDataToFirestore","jsonData","layers","i","length","layer","layerRef","order","j","topics","topic","topicRef","k","subtopics","subtopic","subtopicRef","l","sections","section","sectionRef","m","questions","question","questionRef","info","good_point","scope_for_improvement","mandatory","tags","console","log","error","getFirestoreData","layersSnapshot","layerDoc","docs","layerData","topicsSnapshot","ref","topicDoc","topicData","subtopicsSnapshot","subtopicDoc","subtopicData","sectionsSnapshot","sectionDoc","sectionData","questionsSnapshot","map","sort","a","b","push","fetchDataFromFirestore","layersCollection","empty","fetch","then","response","json","firestoreData","children","handleResponseChange","questionName","answer","prevResponses","handleNext","setTimeout","state","className","onClick"],"sources":["/Users/balajibabasahebsankapal/Desktop/Risk/web-app/src/components/Questionnaire.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"../styles/Questionnaire.css\";\nimport { db } from \"../firebase/firebase.js\"; // Import Firestore instance\nimport { collection, doc, setDoc, getDocs } from \"firebase/firestore\";\n\nfunction QuestionnairePage() {\n  const [data, setData] = useState(null);\n  const [currentLayerIndex, setLayerIndex] = useState(0);\n  const [currentTopicIndex, setTopicIndex] = useState(0);\n  const [currentSubtopicIndex, setSubtopicIndex] = useState(0);\n  const [currentSectionIndex, setSectionIndex] = useState(0);\n  const [currentQuestionIndex, setQuestionIndex] = useState(0);\n  const [responses, setResponses] = useState({});\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [animationDirection, setAnimationDirection] = useState(\"slide-in\");\n  const navigate = useNavigate();\n\n  const sanitizeName = (name) => name.replace(/[^a-zA-Z0-9]/g, \"_\");\n\n  const extractFirestoreData = (doc) => {\n    const rawData = doc.data();\n\n    // Extract Firestore fields and handle nested `integerValue` or `stringValue`\n    const parsedData = Object.entries(rawData).reduce((acc, [key, value]) => {\n      if (value.integerValue !== undefined) {\n        acc[key] = parseInt(value.integerValue, 10); // Convert to number\n      } else if (value.stringValue !== undefined) {\n        acc[key] = value.stringValue;\n      } else {\n        acc[key] = value; // Add as-is if no special handling required\n      }\n      return acc;\n    }, {});\n\n    return parsedData;\n  };\n\n  const addDataToFirestore = useCallback(async (jsonData) => {\n    try {\n      const layers = jsonData.layers;\n\n      for (let i = 0; i < layers.length; i++) {\n        const layer = layers[i];\n        const layerRef = doc(\n          collection(db, \"layers\"),\n          sanitizeName(layer.name)\n        );\n        await setDoc(layerRef, { name: layer.name, order: i });\n\n        for (let j = 0; j < layer.topics.length; j++) {\n          const topic = layer.topics[j];\n          const topicRef = doc(\n            collection(layerRef, \"topics\"),\n            sanitizeName(topic.name)\n          );\n          await setDoc(topicRef, { name: topic.name, order: j });\n\n          for (let k = 0; k < topic.subtopics.length; k++) {\n            const subtopic = topic.subtopics[k];\n            const subtopicRef = doc(\n              collection(topicRef, \"subtopics\"),\n              sanitizeName(subtopic.name)\n            );\n            await setDoc(subtopicRef, { name: subtopic.name, order: k });\n\n            for (let l = 0; l < subtopic.sections.length; l++) {\n              const section = subtopic.sections[l];\n              const sectionRef = doc(\n                collection(subtopicRef, \"sections\"),\n                sanitizeName(section.name)\n              );\n              await setDoc(sectionRef, { name: section.name, order: l });\n\n              for (let m = 0; m < section.questions.length; m++) {\n                const question = section.questions[m];\n                const questionRef = doc(\n                  collection(sectionRef, \"questions\"),\n                  sanitizeName(question.name)\n                );\n                await setDoc(questionRef, {\n                  name: question.name,\n                  info: question.info,\n                  good_point: question.good_point,\n                  scope_for_improvement: question.scope_for_improvement,\n                  mandatory: question.mandatory,\n                  tags: question.tags,\n                  order: m,\n                });\n              }\n            }\n          }\n        }\n      }\n\n      console.log(\"Data successfully added to Firestore!\");\n    } catch (error) {\n      console.error(\"Error adding data to Firestore:\", error);\n    }\n  }, []);\n\n  const getFirestoreData = async (layersSnapshot) => {\n    const layers = [];\n    for (const layerDoc of layersSnapshot.docs) {\n      const layerData = extractFirestoreData(layerDoc);\n      const topicsSnapshot = await getDocs(collection(layerDoc.ref, \"topics\"));\n      const topics = [];\n\n      for (const topicDoc of topicsSnapshot.docs) {\n        const topicData = topicDoc.data();\n        const subtopicsSnapshot = await getDocs(\n          collection(topicDoc.ref, \"subtopics\")\n        );\n        const subtopics = [];\n        for (const subtopicDoc of subtopicsSnapshot.docs) {\n          const subtopicData = subtopicDoc.data();\n          const sectionsSnapshot = await getDocs(\n            collection(subtopicDoc.ref, \"sections\")\n          );\n          const sections = [];\n          for (const sectionDoc of sectionsSnapshot.docs) {\n            const sectionData = sectionDoc.data();\n            const questionsSnapshot = await getDocs(\n              collection(sectionDoc.ref, \"questions\")\n            );\n            const questions = questionsSnapshot.docs\n              .map((doc) => doc.data())\n              .sort((a, b) => a.order - b.order);\n            sections.push({ ...sectionData, questions });\n          }\n\n          sections.sort((a, b) => a.order - b.order); // Sort sections by order\n          subtopics.push({ ...subtopicData, sections });\n        }\n\n        subtopics.sort((a, b) => a.order - b.order); // Sort subtopics by order\n        topics.push({ ...topicData, subtopics });\n      }\n\n      topics.sort((a, b) => a.order - b.order); // Sort topics by order\n      layers.push({ ...layerData, topics });\n    }\n\n    layers.sort((a, b) => a.order - b.order);\n    console.log(layers);\n    return { layers };\n  };\n\n  useEffect(() => {\n    const fetchDataFromFirestore = async () => {\n      try {\n        const layersCollection = collection(db, \"layers\");\n        const layersSnapshot = await getDocs(layersCollection);\n\n        if (layersSnapshot.empty) {\n          console.log(\"Firestore is empty. Adding data...\");\n          fetch(\"/questionnaireData.json\")\n            .then((response) => response.json())\n            .then(async (jsonData) => {\n              await addDataToFirestore(jsonData); // Add JSON to Firestore\n              setData(jsonData); // Set state with the loaded data\n            });\n        } else {\n          console.log(\"Fetching data from Firestore...\");\n          console.log(\"Fetched data1:\", layersSnapshot);\n          const firestoreData = await getFirestoreData(layersSnapshot);\n          console.log(\"Fetched data2:\", firestoreData);\n          setData(firestoreData); // Set state with Firestore data\n        }\n      } catch (error) {\n        console.error(\"Error fetching data from Firestore:\", error);\n      }\n    };\n\n    fetchDataFromFirestore();\n  }, [addDataToFirestore]);\n\n  if (!data) return <div>Loading...</div>;\n\n  const layer = data.layers[currentLayerIndex];\n  const topic = layer.topics[currentTopicIndex];\n  const subtopic = topic.subtopics[currentSubtopicIndex];\n  const section = subtopic.sections[currentSectionIndex];\n  const question = section.questions[currentQuestionIndex];\n\n  const handleResponseChange = (questionName, answer) => {\n    setResponses((prevResponses) => ({\n      ...prevResponses,\n      [questionName]: answer,\n    }));\n    setSelectedAnswer(answer); // Track the selected answer\n  };\n\n  const handleNext = () => {\n    setAnimationDirection(\"slide-out\");\n    setTimeout(() => {\n      // Your existing navigation logic for moving to the next question\n      //if (!selectedAnswer) return; // Only proceed if an answer is selected\n\n      setSelectedAnswer(null); // Reset selected answer for the next question\n\n      if (currentQuestionIndex < section.questions.length - 1) {\n        setQuestionIndex(currentQuestionIndex + 1);\n      } else if (currentSectionIndex < subtopic.sections.length - 1) {\n        setSectionIndex(currentSectionIndex + 1);\n        setQuestionIndex(0);\n      } else if (currentSubtopicIndex < topic.subtopics.length - 1) {\n        setSubtopicIndex(currentSubtopicIndex + 1);\n        setSectionIndex(0);\n        setQuestionIndex(0);\n      } else if (currentTopicIndex < layer.topics.length - 1) {\n        setTopicIndex(currentTopicIndex + 1);\n        setSubtopicIndex(0);\n        setSectionIndex(0);\n        setQuestionIndex(0);\n      } else if (currentLayerIndex < data.layers.length - 1) {\n        setLayerIndex(currentLayerIndex + 1);\n        setTopicIndex(0);\n        setSubtopicIndex(0);\n        setSectionIndex(0);\n        setQuestionIndex(0);\n      } else {\n        console.log(\"Questionnaire completed\");\n        navigate(\"/score\", { state: { responses, jsonData: data } });\n      }\n      setAnimationDirection(\"slide-in\");\n    }, 300);\n  };\n\n  return (\n    <div className=\"panel\">\n      <div className=\"panel-header\">\n        <h1>{layer.name}</h1>\n        <h2>{topic.name}</h2>\n        <h3>{subtopic.name}</h3>\n      </div>\n\n      <div className=\"panel-body\">\n      <div className={`question-panel ${animationDirection}`}>\n          <p>\n            <strong>{question.name}</strong>\n          </p>\n          <div className=\"buttons\">\n            <button\n              className={selectedAnswer === \"Yes\" ? \"selected\" : \"\"}\n              onClick={() => handleResponseChange(question.name, \"Yes\")}\n            >\n              Yes\n            </button>\n            <button\n              className={selectedAnswer === \"No\" ? \"selected\" : \"\"}\n              onClick={() => handleResponseChange(question.name, \"No\")}\n            >\n              No\n            </button>\n          </div>\n          <button\n            className=\"next-button\"\n            //disabled={!selectedAnswer} // Disable until an answer is selected\n            onClick={handleNext}\n          >\n            Next\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default QuestionnairePage;\n\n// import React, { useState, useEffect, useCallback } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import \"../styles/Questionnaire.css\";\n// import { db } from \"../firebase/firebase.js\"; // Import Firestore instance\n// import { collection, doc, setDoc, getDocs } from \"firebase/firestore\";\n\n// function QuestionnairePage() {\n//   const [data, setData] = useState(null);\n//   const [currentLayerIndex, setLayerIndex] = useState(0);\n//   const [currentTopicIndex, setTopicIndex] = useState(0);\n//   const [currentSubtopicIndex, setSubtopicIndex] = useState(0);\n//   const [currentSectionIndex, setSectionIndex] = useState(0); // New state for section\n//   const [responses, setResponses] = useState({});\n//   const navigate = useNavigate();\n\n//   const sanitizeName = (name) => name.replace(/[^a-zA-Z0-9]/g, \"_\");\n\n//   const addDataToFirestore = useCallback(async (jsonData) => {\n//     try {\n//       const layers = jsonData.layers;\n\n//       for (const layer of layers) {\n//         const layerRef = doc(collection(db, \"layers\"), sanitizeName(layer.name));\n//         await setDoc(layerRef, { name: layer.name });\n\n//         for (const topic of layer.topics) {\n//           const topicRef = doc(\n//             collection(layerRef, \"topics\"),\n//             sanitizeName(topic.name)\n//           );\n//           await setDoc(topicRef, { name: topic.name });\n\n//           for (const subtopic of topic.subtopics) {\n//             const subtopicRef = doc(\n//               collection(topicRef, \"subtopics\"),\n//               sanitizeName(subtopic.name)\n//             );\n//             await setDoc(subtopicRef, { name: subtopic.name });\n\n//             for (const section of subtopic.sections) {\n//               const sectionRef = doc(\n//                 collection(subtopicRef, \"sections\"),\n//                 sanitizeName(section.name)\n//               );\n//               await setDoc(sectionRef, { name: section.name });\n\n//               for (const question of section.questions) {\n//                 const questionRef = doc(\n//                   collection(sectionRef, \"questions\"),\n//                   sanitizeName(question.name)\n//                 );\n//                 await setDoc(questionRef, {\n//                   name: question.name,\n//                   info: question.info,\n//                   good_point: question.good_point,\n//                   scope_for_improvement: question.scope_for_improvement,\n//                   mandatory: question.mandatory,\n//                   tags: question.tags,\n//                 });\n//               }\n//             }\n//           }\n//         }\n//       }\n\n//       console.log(\"Data successfully added to Firestore!\");\n//     } catch (error) {\n//       console.error(\"Error adding data to Firestore:\", error);\n//     }\n//   }, []);\n\n//   const getFirestoreData = async (layersSnapshot) => {\n//     const layers = [];\n//     for (const layerDoc of layersSnapshot.docs) {\n//       const topicsSnapshot = await getDocs(collection(layerDoc.ref, \"topics\"));\n//       const topics = [];\n//       for (const topicDoc of topicsSnapshot.docs) {\n//         const subtopicsSnapshot = await getDocs(\n//           collection(topicDoc.ref, \"subtopics\")\n//         );\n//         const subtopics = [];\n//         for (const subtopicDoc of subtopicsSnapshot.docs) {\n//           const sectionsSnapshot = await getDocs(\n//             collection(subtopicDoc.ref, \"sections\")\n//           );\n//           const sections = [];\n//           for (const sectionDoc of sectionsSnapshot.docs) {\n//             const questionsSnapshot = await getDocs(\n//               collection(sectionDoc.ref, \"questions\")\n//             );\n//             const questions = questionsSnapshot.docs.map((doc) => doc.data());\n//             sections.push({ name: sectionDoc.id, questions });\n//           }\n//           subtopics.push({ name: subtopicDoc.id, sections });\n//         }\n//         topics.push({ name: topicDoc.id, subtopics });\n//       }\n//       layers.push({ name: layerDoc.id, topics });\n//     }\n//     return { layers };\n//   };\n\n//   useEffect(() => {\n//     const fetchDataFromFirestore = async () => {\n//       try {\n//         const layersCollection = collection(db, \"layers\");\n//         const layersSnapshot = await getDocs(layersCollection);\n\n//         if (layersSnapshot.empty) {\n//           console.log(\"Firestore is empty. Adding data...\");\n//           fetch(\"/questionnaireData.json\")\n//             .then((response) => response.json())\n//             .then(async (jsonData) => {\n//               await addDataToFirestore(jsonData); // Add JSON to Firestore\n//               setData(jsonData); // Set state with the loaded data\n//             });\n//         } else {\n//           console.log(\"Fetching data from Firestore...\");\n//           const firestoreData = await getFirestoreData(layersSnapshot);\n//           console.log(\"Fetched data:\", firestoreData);\n//           setData(firestoreData); // Set state with Firestore data\n//         }\n//       } catch (error) {\n//         console.error(\"Error fetching data from Firestore:\", error);\n//       }\n//     };\n\n//     fetchDataFromFirestore();\n//   }, [addDataToFirestore]);\n\n//   if (!data) return <div>Loading...</div>;\n\n//   const layer = data.layers[currentLayerIndex];\n//   const topic = layer.topics[currentTopicIndex];\n//   const subtopic = topic.subtopics[currentSubtopicIndex];\n//   const section = subtopic.sections[currentSectionIndex];\n\n//   const handleResponseChange = (questionName, answer) => {\n//     setResponses((prevResponses) => ({\n//       ...prevResponses,\n//       [questionName]: answer,\n//     }));\n//   };\n\n//   const handleNext = () => {\n//     if (currentSectionIndex < subtopic.sections.length - 1) {\n//       setSectionIndex(currentSectionIndex + 1); // Move to next section\n//     } else if (currentSubtopicIndex < topic.subtopics.length - 1) {\n//       setSectionIndex(0);\n//       setSubtopicIndex(currentSubtopicIndex + 1);\n//     } else if (currentTopicIndex < layer.topics.length - 1) {\n//       setSectionIndex(0);\n//       setSubtopicIndex(0);\n//       setTopicIndex(currentTopicIndex + 1);\n//     } else if (currentLayerIndex < data.layers.length - 1) {\n//       setLayerIndex(currentLayerIndex + 1);\n//       setSectionIndex(0);\n//       setTopicIndex(0);\n//       setSubtopicIndex(0);\n//     } else {\n//       console.log(\"Questionnaire completed\");\n//       navigate(\"/score\", { state: { responses, jsonData: data } });\n//     }\n//   };\n\n//   return (\n//     <div className=\"panel\">\n//       <div className=\"panel-header\">\n//         <h2>Layer: {layer.name}</h2>\n//         <h3>Topic: {topic.name}</h3>\n//         <h4>Subtopic: {subtopic.name}</h4>\n//         <h5>Section: {section.name}</h5>\n//       </div>\n\n//       <div className=\"panel-body\">\n//         {section.questions.map((question, index) => (\n//           <div key={index} className=\"question-panel\">\n//             <p><strong>{question.name}</strong></p>\n//             <div className=\"buttons\">\n//               <button onClick={() => handleResponseChange(question.name, \"Yes\")}>\n//                 Yes\n//               </button>\n//               <button onClick={() => handleResponseChange(question.name, \"No\")}>\n//                 No\n//               </button>\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n\n//       <button className=\"next-button\" onClick={handleNext}>\n//         Next\n//       </button>\n//     </div>\n//   );\n// }\n\n// export default QuestionnairePage;\n"],"mappings":"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":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}