{"ast":null,"code":"var _jsxFileName = \"/Users/balajibabasahebsankapal/Desktop/Risk/web-app/src/components/Questionnaire.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"../styles/Questionnaire.css\";\nimport { db } from \"../firebase/firebase.js\"; // Import Firestore instance\nimport { collection, doc, setDoc, getDocs } from \"firebase/firestore\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction QuestionnairePage({\n  userId\n}) {\n  _s();\n  const [data, setData] = useState(null);\n  const [currentLayerIndex, setLayerIndex] = useState(0);\n  const [currentTopicIndex, setTopicIndex] = useState(0);\n  const [currentSubtopicIndex, setSubtopicIndex] = useState(0);\n  const [currentSectionIndex, setSectionIndex] = useState(0);\n  const [currentQuestionIndex, setQuestionIndex] = useState(0);\n  const [responses, setResponses] = useState({});\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [animationDirection, setAnimationDirection] = useState(\"slide-in\");\n  const navigate = useNavigate();\n  const sanitizeName = name => name.replace(/[^a-zA-Z0-9]/g, \"_\");\n  const extractFirestoreData = doc => {\n    const rawData = doc.data();\n\n    // Extract Firestore fields and handle nested `integerValue` or `stringValue`\n    const parsedData = Object.entries(rawData).reduce((acc, [key, value]) => {\n      if (value.integerValue !== undefined) {\n        acc[key] = parseInt(value.integerValue, 10); // Convert to number\n      } else if (value.stringValue !== undefined) {\n        acc[key] = value.stringValue;\n      } else {\n        acc[key] = value; // Add as-is if no special handling required\n      }\n      return acc;\n    }, {});\n    return parsedData;\n  };\n  const addDataToFirestore = useCallback(async jsonData => {\n    try {\n      const layers = jsonData.layers;\n      for (let i = 0; i < layers.length; i++) {\n        const layer = layers[i];\n        const layerRef = doc(collection(db, \"layers\"), sanitizeName(layer.name));\n        await setDoc(layerRef, {\n          name: layer.name,\n          order: i\n        });\n        for (let j = 0; j < layer.topics.length; j++) {\n          const topic = layer.topics[j];\n          const topicRef = doc(collection(layerRef, \"topics\"), sanitizeName(topic.name));\n          await setDoc(topicRef, {\n            name: topic.name,\n            order: j\n          });\n          for (let k = 0; k < topic.subtopics.length; k++) {\n            const subtopic = topic.subtopics[k];\n            const subtopicRef = doc(collection(topicRef, \"subtopics\"), sanitizeName(subtopic.name));\n            await setDoc(subtopicRef, {\n              name: subtopic.name,\n              order: k\n            });\n            for (let l = 0; l < subtopic.sections.length; l++) {\n              const section = subtopic.sections[l];\n              const sectionRef = doc(collection(subtopicRef, \"sections\"), sanitizeName(section.name));\n              await setDoc(sectionRef, {\n                name: section.name,\n                order: l\n              });\n              for (let m = 0; m < section.questions.length; m++) {\n                const question = section.questions[m];\n                const questionRef = doc(collection(sectionRef, \"questions\"), sanitizeName(question.name));\n                await setDoc(questionRef, {\n                  name: question.name,\n                  info: question.info,\n                  good_point: question.good_point,\n                  scope_for_improvement: question.scope_for_improvement,\n                  mandatory: question.mandatory,\n                  tags: question.tags,\n                  order: m\n                });\n              }\n            }\n          }\n        }\n      }\n      console.log(\"Data successfully added to Firestore!\");\n    } catch (error) {\n      console.error(\"Error adding data to Firestore:\", error);\n    }\n  }, []);\n  const getFirestoreData = async layersSnapshot => {\n    const layers = [];\n    for (const layerDoc of layersSnapshot.docs) {\n      const layerData = extractFirestoreData(layerDoc);\n      const topicsSnapshot = await getDocs(collection(layerDoc.ref, \"topics\"));\n      const topics = [];\n      for (const topicDoc of topicsSnapshot.docs) {\n        const topicData = topicDoc.data();\n        const subtopicsSnapshot = await getDocs(collection(topicDoc.ref, \"subtopics\"));\n        const subtopics = [];\n        for (const subtopicDoc of subtopicsSnapshot.docs) {\n          const subtopicData = subtopicDoc.data();\n          const sectionsSnapshot = await getDocs(collection(subtopicDoc.ref, \"sections\"));\n          const sections = [];\n          for (const sectionDoc of sectionsSnapshot.docs) {\n            const sectionData = sectionDoc.data();\n            const questionsSnapshot = await getDocs(collection(sectionDoc.ref, \"questions\"));\n            const questions = questionsSnapshot.docs.map(doc => doc.data()).sort((a, b) => a.order - b.order);\n            sections.push({\n              ...sectionData,\n              questions\n            });\n          }\n          sections.sort((a, b) => a.order - b.order); // Sort sections by order\n          subtopics.push({\n            ...subtopicData,\n            sections\n          });\n        }\n        subtopics.sort((a, b) => a.order - b.order); // Sort subtopics by order\n        topics.push({\n          ...topicData,\n          subtopics\n        });\n      }\n      topics.sort((a, b) => a.order - b.order); // Sort topics by order\n      layers.push({\n        ...layerData,\n        topics\n      });\n    }\n    layers.sort((a, b) => a.order - b.order);\n    console.log(layers);\n    return {\n      layers\n    };\n  };\n  useEffect(() => {\n    const fetchDataFromFirestore = async () => {\n      try {\n        const layersCollection = collection(db, \"layers\");\n        const layersSnapshot = await getDocs(layersCollection);\n        if (layersSnapshot.empty) {\n          console.log(\"Firestore is empty. Adding data...\");\n          fetch(\"/questionnaireData.json\").then(response => response.json()).then(async jsonData => {\n            await addDataToFirestore(jsonData); // Add JSON to Firestore\n            setData(jsonData); // Set state with the loaded data\n          });\n        } else {\n          console.log(\"Fetching data from Firestore...\");\n          console.log(\"Fetched data1:\", layersSnapshot);\n          const firestoreData = await getFirestoreData(layersSnapshot);\n          console.log(\"Fetched data2:\", firestoreData);\n          setData(firestoreData); // Set state with Firestore data\n        }\n      } catch (error) {\n        console.error(\"Error fetching data from Firestore:\", error);\n      }\n    };\n    fetchDataFromFirestore();\n  }, [addDataToFirestore]);\n  if (!data) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 178,\n    columnNumber: 21\n  }, this);\n  const layer = data.layers[currentLayerIndex];\n  const topic = layer.topics[currentTopicIndex];\n  const subtopic = topic.subtopics[currentSubtopicIndex];\n  const section = subtopic.sections[currentSectionIndex];\n  const question = section.questions[currentQuestionIndex];\n  const handleResponseChange = (question, answer) => {\n    const remark = answer === \"Yes\" ? question.good_point : question.scope_for_improvement;\n\n    // Add response to state\n    setResponses(prevResponses => ({\n      ...prevResponses,\n      [question.name]: {\n        order: question.order,\n        answer,\n        remark\n      }\n    }));\n    setSelectedAnswer(answer); // Track the selected answer\n  };\n  const saveResponseToFirebase = async response => {\n    try {\n      const userRef = doc(db, \"users\", userId);\n      const responsesRef = collection(userRef, \"responses\");\n      const questionRef = doc(responsesRef, `question_${response.order}`);\n      await setDoc(questionRef, response, {\n        merge: true\n      });\n      console.log(\"Response saved successfully:\", response);\n    } catch (error) {\n      console.error(\"Error saving response to Firebase:\", error);\n    }\n  };\n  const handleNext = async () => {\n    if (!selectedAnswer) return; // Ensure an answer is selected before proceeding\n\n    const question = section.questions[currentQuestionIndex];\n    const response = responses[question.name];\n\n    // Save the current response to Firebase\n    await saveResponseToFirebase(response);\n    setAnimationDirection(\"slide-out\");\n    setTimeout(() => {\n      setSelectedAnswer(null); // Reset selected answer for the next question\n\n      if (currentQuestionIndex < section.questions.length - 1) {\n        setQuestionIndex(currentQuestionIndex + 1);\n      } else if (currentSectionIndex < subtopic.sections.length - 1) {\n        setSectionIndex(currentSectionIndex + 1);\n        setQuestionIndex(0);\n      } else if (currentSubtopicIndex < topic.subtopics.length - 1) {\n        setSubtopicIndex(currentSubtopicIndex + 1);\n        setSectionIndex(0);\n        setQuestionIndex(0);\n      } else if (currentTopicIndex < layer.topics.length - 1) {\n        setTopicIndex(currentTopicIndex + 1);\n        setSubtopicIndex(0);\n        setSectionIndex(0);\n        setQuestionIndex(0);\n      } else if (currentLayerIndex < data.layers.length - 1) {\n        setLayerIndex(currentLayerIndex + 1);\n        setTopicIndex(0);\n        setSubtopicIndex(0);\n        setSectionIndex(0);\n        setQuestionIndex(0);\n      } else {\n        console.log(\"Questionnaire completed\");\n        navigate(\"/score\", {\n          state: {\n            responses,\n            jsonData: data\n          }\n        });\n      }\n      setAnimationDirection(\"slide-in\");\n    }, 300);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"panel\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"panel-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: layer.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: topic.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: subtopic.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"panel-body\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `question-panel ${animationDirection}`,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: question.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"buttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: selectedAnswer === \"Yes\" ? \"selected\" : \"\",\n            onClick: () => handleResponseChange(question.name, \"Yes\"),\n            children: \"Yes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: selectedAnswer === \"No\" ? \"selected\" : \"\",\n            onClick: () => handleResponseChange(question.name, \"No\"),\n            children: \"No\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"next-button\"\n          //disabled={!selectedAnswer} // Disable until an answer is selected\n          ,\n          onClick: handleNext,\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 252,\n    columnNumber: 5\n  }, this);\n}\n_s(QuestionnairePage, \"N394oBMzkVaBlDF/F4S3RR8zCuQ=\", false, function () {\n  return [useNavigate];\n});\n_c = QuestionnairePage;\nexport default QuestionnairePage;\n\n// import React, { useState, useEffect, useCallback } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import \"../styles/Questionnaire.css\";\n// import { db } from \"../firebase/firebase.js\"; // Import Firestore instance\n// import { collection, doc, setDoc, getDocs } from \"firebase/firestore\";\n\n// function QuestionnairePage() {\n//   const [data, setData] = useState(null);\n//   const [currentLayerIndex, setLayerIndex] = useState(0);\n//   const [currentTopicIndex, setTopicIndex] = useState(0);\n//   const [currentSubtopicIndex, setSubtopicIndex] = useState(0);\n//   const [currentSectionIndex, setSectionIndex] = useState(0); // New state for section\n//   const [responses, setResponses] = useState({});\n//   const navigate = useNavigate();\n\n//   const sanitizeName = (name) => name.replace(/[^a-zA-Z0-9]/g, \"_\");\n\n//   const addDataToFirestore = useCallback(async (jsonData) => {\n//     try {\n//       const layers = jsonData.layers;\n\n//       for (const layer of layers) {\n//         const layerRef = doc(collection(db, \"layers\"), sanitizeName(layer.name));\n//         await setDoc(layerRef, { name: layer.name });\n\n//         for (const topic of layer.topics) {\n//           const topicRef = doc(\n//             collection(layerRef, \"topics\"),\n//             sanitizeName(topic.name)\n//           );\n//           await setDoc(topicRef, { name: topic.name });\n\n//           for (const subtopic of topic.subtopics) {\n//             const subtopicRef = doc(\n//               collection(topicRef, \"subtopics\"),\n//               sanitizeName(subtopic.name)\n//             );\n//             await setDoc(subtopicRef, { name: subtopic.name });\n\n//             for (const section of subtopic.sections) {\n//               const sectionRef = doc(\n//                 collection(subtopicRef, \"sections\"),\n//                 sanitizeName(section.name)\n//               );\n//               await setDoc(sectionRef, { name: section.name });\n\n//               for (const question of section.questions) {\n//                 const questionRef = doc(\n//                   collection(sectionRef, \"questions\"),\n//                   sanitizeName(question.name)\n//                 );\n//                 await setDoc(questionRef, {\n//                   name: question.name,\n//                   info: question.info,\n//                   good_point: question.good_point,\n//                   scope_for_improvement: question.scope_for_improvement,\n//                   mandatory: question.mandatory,\n//                   tags: question.tags,\n//                 });\n//               }\n//             }\n//           }\n//         }\n//       }\n\n//       console.log(\"Data successfully added to Firestore!\");\n//     } catch (error) {\n//       console.error(\"Error adding data to Firestore:\", error);\n//     }\n//   }, []);\n\n//   const getFirestoreData = async (layersSnapshot) => {\n//     const layers = [];\n//     for (const layerDoc of layersSnapshot.docs) {\n//       const topicsSnapshot = await getDocs(collection(layerDoc.ref, \"topics\"));\n//       const topics = [];\n//       for (const topicDoc of topicsSnapshot.docs) {\n//         const subtopicsSnapshot = await getDocs(\n//           collection(topicDoc.ref, \"subtopics\")\n//         );\n//         const subtopics = [];\n//         for (const subtopicDoc of subtopicsSnapshot.docs) {\n//           const sectionsSnapshot = await getDocs(\n//             collection(subtopicDoc.ref, \"sections\")\n//           );\n//           const sections = [];\n//           for (const sectionDoc of sectionsSnapshot.docs) {\n//             const questionsSnapshot = await getDocs(\n//               collection(sectionDoc.ref, \"questions\")\n//             );\n//             const questions = questionsSnapshot.docs.map((doc) => doc.data());\n//             sections.push({ name: sectionDoc.id, questions });\n//           }\n//           subtopics.push({ name: subtopicDoc.id, sections });\n//         }\n//         topics.push({ name: topicDoc.id, subtopics });\n//       }\n//       layers.push({ name: layerDoc.id, topics });\n//     }\n//     return { layers };\n//   };\n\n//   useEffect(() => {\n//     const fetchDataFromFirestore = async () => {\n//       try {\n//         const layersCollection = collection(db, \"layers\");\n//         const layersSnapshot = await getDocs(layersCollection);\n\n//         if (layersSnapshot.empty) {\n//           console.log(\"Firestore is empty. Adding data...\");\n//           fetch(\"/questionnaireData.json\")\n//             .then((response) => response.json())\n//             .then(async (jsonData) => {\n//               await addDataToFirestore(jsonData); // Add JSON to Firestore\n//               setData(jsonData); // Set state with the loaded data\n//             });\n//         } else {\n//           console.log(\"Fetching data from Firestore...\");\n//           const firestoreData = await getFirestoreData(layersSnapshot);\n//           console.log(\"Fetched data:\", firestoreData);\n//           setData(firestoreData); // Set state with Firestore data\n//         }\n//       } catch (error) {\n//         console.error(\"Error fetching data from Firestore:\", error);\n//       }\n//     };\n\n//     fetchDataFromFirestore();\n//   }, [addDataToFirestore]);\n\n//   if (!data) return <div>Loading...</div>;\n\n//   const layer = data.layers[currentLayerIndex];\n//   const topic = layer.topics[currentTopicIndex];\n//   const subtopic = topic.subtopics[currentSubtopicIndex];\n//   const section = subtopic.sections[currentSectionIndex];\n\n//   const handleResponseChange = (questionName, answer) => {\n//     setResponses((prevResponses) => ({\n//       ...prevResponses,\n//       [questionName]: answer,\n//     }));\n//   };\n\n//   const handleNext = () => {\n//     if (currentSectionIndex < subtopic.sections.length - 1) {\n//       setSectionIndex(currentSectionIndex + 1); // Move to next section\n//     } else if (currentSubtopicIndex < topic.subtopics.length - 1) {\n//       setSectionIndex(0);\n//       setSubtopicIndex(currentSubtopicIndex + 1);\n//     } else if (currentTopicIndex < layer.topics.length - 1) {\n//       setSectionIndex(0);\n//       setSubtopicIndex(0);\n//       setTopicIndex(currentTopicIndex + 1);\n//     } else if (currentLayerIndex < data.layers.length - 1) {\n//       setLayerIndex(currentLayerIndex + 1);\n//       setSectionIndex(0);\n//       setTopicIndex(0);\n//       setSubtopicIndex(0);\n//     } else {\n//       console.log(\"Questionnaire completed\");\n//       navigate(\"/score\", { state: { responses, jsonData: data } });\n//     }\n//   };\n\n//   return (\n//     <div className=\"panel\">\n//       <div className=\"panel-header\">\n//         <h2>Layer: {layer.name}</h2>\n//         <h3>Topic: {topic.name}</h3>\n//         <h4>Subtopic: {subtopic.name}</h4>\n//         <h5>Section: {section.name}</h5>\n//       </div>\n\n//       <div className=\"panel-body\">\n//         {section.questions.map((question, index) => (\n//           <div key={index} className=\"question-panel\">\n//             <p><strong>{question.name}</strong></p>\n//             <div className=\"buttons\">\n//               <button onClick={() => handleResponseChange(question.name, \"Yes\")}>\n//                 Yes\n//               </button>\n//               <button onClick={() => handleResponseChange(question.name, \"No\")}>\n//                 No\n//               </button>\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n\n//       <button className=\"next-button\" onClick={handleNext}>\n//         Next\n//       </button>\n//     </div>\n//   );\n// }\n\n// export default QuestionnairePage;\nvar _c;\n$RefreshReg$(_c, \"QuestionnairePage\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useNavigate","db","collection","doc","setDoc","getDocs","jsxDEV","_jsxDEV","QuestionnairePage","userId","_s","data","setData","currentLayerIndex","setLayerIndex","currentTopicIndex","setTopicIndex","currentSubtopicIndex","setSubtopicIndex","currentSectionIndex","setSectionIndex","currentQuestionIndex","setQuestionIndex","responses","setResponses","selectedAnswer","setSelectedAnswer","animationDirection","setAnimationDirection","navigate","sanitizeName","name","replace","extractFirestoreData","rawData","parsedData","Object","entries","reduce","acc","key","value","integerValue","undefined","parseInt","stringValue","addDataToFirestore","jsonData","layers","i","length","layer","layerRef","order","j","topics","topic","topicRef","k","subtopics","subtopic","subtopicRef","l","sections","section","sectionRef","m","questions","question","questionRef","info","good_point","scope_for_improvement","mandatory","tags","console","log","error","getFirestoreData","layersSnapshot","layerDoc","docs","layerData","topicsSnapshot","ref","topicDoc","topicData","subtopicsSnapshot","subtopicDoc","subtopicData","sectionsSnapshot","sectionDoc","sectionData","questionsSnapshot","map","sort","a","b","push","fetchDataFromFirestore","layersCollection","empty","fetch","then","response","json","firestoreData","children","fileName","_jsxFileName","lineNumber","columnNumber","handleResponseChange","answer","remark","prevResponses","saveResponseToFirebase","userRef","responsesRef","merge","handleNext","setTimeout","state","className","onClick","_c","$RefreshReg$"],"sources":["/Users/balajibabasahebsankapal/Desktop/Risk/web-app/src/components/Questionnaire.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"../styles/Questionnaire.css\";\nimport { db } from \"../firebase/firebase.js\"; // Import Firestore instance\nimport { collection, doc, setDoc, getDocs } from \"firebase/firestore\";\n\nfunction QuestionnairePage({ userId }) {\n  const [data, setData] = useState(null);\n  const [currentLayerIndex, setLayerIndex] = useState(0);\n  const [currentTopicIndex, setTopicIndex] = useState(0);\n  const [currentSubtopicIndex, setSubtopicIndex] = useState(0);\n  const [currentSectionIndex, setSectionIndex] = useState(0);\n  const [currentQuestionIndex, setQuestionIndex] = useState(0);\n  const [responses, setResponses] = useState({});\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [animationDirection, setAnimationDirection] = useState(\"slide-in\");  \n  const navigate = useNavigate();\n\n  const sanitizeName = (name) => name.replace(/[^a-zA-Z0-9]/g, \"_\");\n\n  const extractFirestoreData = (doc) => {\n    const rawData = doc.data();\n\n    // Extract Firestore fields and handle nested `integerValue` or `stringValue`\n    const parsedData = Object.entries(rawData).reduce((acc, [key, value]) => {\n      if (value.integerValue !== undefined) {\n        acc[key] = parseInt(value.integerValue, 10); // Convert to number\n      } else if (value.stringValue !== undefined) {\n        acc[key] = value.stringValue;\n      } else {\n        acc[key] = value; // Add as-is if no special handling required\n      }\n      return acc;\n    }, {});\n\n    return parsedData;\n  };\n\n  const addDataToFirestore = useCallback(async (jsonData) => {\n    try {\n      const layers = jsonData.layers;\n\n      for (let i = 0; i < layers.length; i++) {\n        const layer = layers[i];\n        const layerRef = doc(\n          collection(db, \"layers\"),\n          sanitizeName(layer.name)\n        );\n        await setDoc(layerRef, { name: layer.name, order: i });\n\n        for (let j = 0; j < layer.topics.length; j++) {\n          const topic = layer.topics[j];\n          const topicRef = doc(\n            collection(layerRef, \"topics\"),\n            sanitizeName(topic.name)\n          );\n          await setDoc(topicRef, { name: topic.name, order: j });\n\n          for (let k = 0; k < topic.subtopics.length; k++) {\n            const subtopic = topic.subtopics[k];\n            const subtopicRef = doc(\n              collection(topicRef, \"subtopics\"),\n              sanitizeName(subtopic.name)\n            );\n            await setDoc(subtopicRef, { name: subtopic.name, order: k });\n\n            for (let l = 0; l < subtopic.sections.length; l++) {\n              const section = subtopic.sections[l];\n              const sectionRef = doc(\n                collection(subtopicRef, \"sections\"),\n                sanitizeName(section.name)\n              );\n              await setDoc(sectionRef, { name: section.name, order: l });\n\n              for (let m = 0; m < section.questions.length; m++) {\n                const question = section.questions[m];\n                const questionRef = doc(\n                  collection(sectionRef, \"questions\"),\n                  sanitizeName(question.name)\n                );\n                await setDoc(questionRef, {\n                  name: question.name,\n                  info: question.info,\n                  good_point: question.good_point,\n                  scope_for_improvement: question.scope_for_improvement,\n                  mandatory: question.mandatory,\n                  tags: question.tags,\n                  order: m,\n                });\n              }\n            }\n          }\n        }\n      }\n\n      console.log(\"Data successfully added to Firestore!\");\n    } catch (error) {\n      console.error(\"Error adding data to Firestore:\", error);\n    }\n  }, []);\n\n  const getFirestoreData = async (layersSnapshot) => {\n    const layers = [];\n    for (const layerDoc of layersSnapshot.docs) {\n      const layerData = extractFirestoreData(layerDoc);\n      const topicsSnapshot = await getDocs(collection(layerDoc.ref, \"topics\"));\n      const topics = [];\n\n      for (const topicDoc of topicsSnapshot.docs) {\n        const topicData = topicDoc.data();\n        const subtopicsSnapshot = await getDocs(\n          collection(topicDoc.ref, \"subtopics\")\n        );\n        const subtopics = [];\n        for (const subtopicDoc of subtopicsSnapshot.docs) {\n          const subtopicData = subtopicDoc.data();\n          const sectionsSnapshot = await getDocs(\n            collection(subtopicDoc.ref, \"sections\")\n          );\n          const sections = [];\n          for (const sectionDoc of sectionsSnapshot.docs) {\n            const sectionData = sectionDoc.data();\n            const questionsSnapshot = await getDocs(\n              collection(sectionDoc.ref, \"questions\")\n            );\n            const questions = questionsSnapshot.docs\n              .map((doc) => doc.data())\n              .sort((a, b) => a.order - b.order);\n            sections.push({ ...sectionData, questions });\n          }\n\n          sections.sort((a, b) => a.order - b.order); // Sort sections by order\n          subtopics.push({ ...subtopicData, sections });\n        }\n\n        subtopics.sort((a, b) => a.order - b.order); // Sort subtopics by order\n        topics.push({ ...topicData, subtopics });\n      }\n\n      topics.sort((a, b) => a.order - b.order); // Sort topics by order\n      layers.push({ ...layerData, topics });\n    }\n\n    layers.sort((a, b) => a.order - b.order);\n    console.log(layers);\n    return { layers };\n  };\n\n  useEffect(() => {\n    const fetchDataFromFirestore = async () => {\n      try {\n        const layersCollection = collection(db, \"layers\");\n        const layersSnapshot = await getDocs(layersCollection);\n\n        if (layersSnapshot.empty) {\n          console.log(\"Firestore is empty. Adding data...\");\n          fetch(\"/questionnaireData.json\")\n            .then((response) => response.json())\n            .then(async (jsonData) => {\n              await addDataToFirestore(jsonData); // Add JSON to Firestore\n              setData(jsonData); // Set state with the loaded data\n            });\n        } else {\n          console.log(\"Fetching data from Firestore...\");\n          console.log(\"Fetched data1:\", layersSnapshot);\n          const firestoreData = await getFirestoreData(layersSnapshot);\n          console.log(\"Fetched data2:\", firestoreData);\n          setData(firestoreData); // Set state with Firestore data\n        }\n      } catch (error) {\n        console.error(\"Error fetching data from Firestore:\", error);\n      }\n    };\n\n    fetchDataFromFirestore();\n  }, [addDataToFirestore]);\n\n  if (!data) return <div>Loading...</div>;\n\n  const layer = data.layers[currentLayerIndex];\n  const topic = layer.topics[currentTopicIndex];\n  const subtopic = topic.subtopics[currentSubtopicIndex];\n  const section = subtopic.sections[currentSectionIndex];\n  const question = section.questions[currentQuestionIndex];\n\n  const handleResponseChange = (question, answer) => {\n    const remark =\n      answer === \"Yes\" ? question.good_point : question.scope_for_improvement;\n\n    // Add response to state\n    setResponses((prevResponses) => ({\n      ...prevResponses,\n      [question.name]: { order: question.order, answer, remark },\n    }));\n    setSelectedAnswer(answer); // Track the selected answer\n  };\n\n  const saveResponseToFirebase = async (response) => {\n    try {\n      const userRef = doc(db, \"users\", userId);\n      const responsesRef = collection(userRef, \"responses\");\n      const questionRef = doc(responsesRef, `question_${response.order}`);\n      await setDoc(questionRef, response, { merge: true });\n      console.log(\"Response saved successfully:\", response);\n    } catch (error) {\n      console.error(\"Error saving response to Firebase:\", error);\n    }\n  };\n\n  const handleNext = async () => {\n    if (!selectedAnswer) return; // Ensure an answer is selected before proceeding\n\n    const question = section.questions[currentQuestionIndex];\n    const response = responses[question.name];\n\n    // Save the current response to Firebase\n    await saveResponseToFirebase(response);\n\n    setAnimationDirection(\"slide-out\");\n    setTimeout(() => {\n      setSelectedAnswer(null); // Reset selected answer for the next question\n\n      if (currentQuestionIndex < section.questions.length - 1) {\n        setQuestionIndex(currentQuestionIndex + 1);\n      } else if (currentSectionIndex < subtopic.sections.length - 1) {\n        setSectionIndex(currentSectionIndex + 1);\n        setQuestionIndex(0);\n      } else if (currentSubtopicIndex < topic.subtopics.length - 1) {\n        setSubtopicIndex(currentSubtopicIndex + 1);\n        setSectionIndex(0);\n        setQuestionIndex(0);\n      } else if (currentTopicIndex < layer.topics.length - 1) {\n        setTopicIndex(currentTopicIndex + 1);\n        setSubtopicIndex(0);\n        setSectionIndex(0);\n        setQuestionIndex(0);\n      } else if (currentLayerIndex < data.layers.length - 1) {\n        setLayerIndex(currentLayerIndex + 1);\n        setTopicIndex(0);\n        setSubtopicIndex(0);\n        setSectionIndex(0);\n        setQuestionIndex(0);\n      } else {\n        console.log(\"Questionnaire completed\");\n        navigate(\"/score\", { state: { responses, jsonData: data } });\n      }\n      setAnimationDirection(\"slide-in\");\n    }, 300);\n  };\n\n  return (\n    <div className=\"panel\">\n      <div className=\"panel-header\">\n        <h1>{layer.name}</h1>\n        <h2>{topic.name}</h2>\n        <h3>{subtopic.name}</h3>\n      </div>\n\n      <div className=\"panel-body\">\n      <div className={`question-panel ${animationDirection}`}>\n          <p>\n            <strong>{question.name}</strong>\n          </p>\n          <div className=\"buttons\">\n            <button\n              className={selectedAnswer === \"Yes\" ? \"selected\" : \"\"}\n              onClick={() => handleResponseChange(question.name, \"Yes\")}\n            >\n              Yes\n            </button>\n            <button\n              className={selectedAnswer === \"No\" ? \"selected\" : \"\"}\n              onClick={() => handleResponseChange(question.name, \"No\")}\n            >\n              No\n            </button>\n          </div>\n          <button\n            className=\"next-button\"\n            //disabled={!selectedAnswer} // Disable until an answer is selected\n            onClick={handleNext}\n          >\n            Next\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default QuestionnairePage;\n\n// import React, { useState, useEffect, useCallback } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import \"../styles/Questionnaire.css\";\n// import { db } from \"../firebase/firebase.js\"; // Import Firestore instance\n// import { collection, doc, setDoc, getDocs } from \"firebase/firestore\";\n\n// function QuestionnairePage() {\n//   const [data, setData] = useState(null);\n//   const [currentLayerIndex, setLayerIndex] = useState(0);\n//   const [currentTopicIndex, setTopicIndex] = useState(0);\n//   const [currentSubtopicIndex, setSubtopicIndex] = useState(0);\n//   const [currentSectionIndex, setSectionIndex] = useState(0); // New state for section\n//   const [responses, setResponses] = useState({});\n//   const navigate = useNavigate();\n\n//   const sanitizeName = (name) => name.replace(/[^a-zA-Z0-9]/g, \"_\");\n\n//   const addDataToFirestore = useCallback(async (jsonData) => {\n//     try {\n//       const layers = jsonData.layers;\n\n//       for (const layer of layers) {\n//         const layerRef = doc(collection(db, \"layers\"), sanitizeName(layer.name));\n//         await setDoc(layerRef, { name: layer.name });\n\n//         for (const topic of layer.topics) {\n//           const topicRef = doc(\n//             collection(layerRef, \"topics\"),\n//             sanitizeName(topic.name)\n//           );\n//           await setDoc(topicRef, { name: topic.name });\n\n//           for (const subtopic of topic.subtopics) {\n//             const subtopicRef = doc(\n//               collection(topicRef, \"subtopics\"),\n//               sanitizeName(subtopic.name)\n//             );\n//             await setDoc(subtopicRef, { name: subtopic.name });\n\n//             for (const section of subtopic.sections) {\n//               const sectionRef = doc(\n//                 collection(subtopicRef, \"sections\"),\n//                 sanitizeName(section.name)\n//               );\n//               await setDoc(sectionRef, { name: section.name });\n\n//               for (const question of section.questions) {\n//                 const questionRef = doc(\n//                   collection(sectionRef, \"questions\"),\n//                   sanitizeName(question.name)\n//                 );\n//                 await setDoc(questionRef, {\n//                   name: question.name,\n//                   info: question.info,\n//                   good_point: question.good_point,\n//                   scope_for_improvement: question.scope_for_improvement,\n//                   mandatory: question.mandatory,\n//                   tags: question.tags,\n//                 });\n//               }\n//             }\n//           }\n//         }\n//       }\n\n//       console.log(\"Data successfully added to Firestore!\");\n//     } catch (error) {\n//       console.error(\"Error adding data to Firestore:\", error);\n//     }\n//   }, []);\n\n//   const getFirestoreData = async (layersSnapshot) => {\n//     const layers = [];\n//     for (const layerDoc of layersSnapshot.docs) {\n//       const topicsSnapshot = await getDocs(collection(layerDoc.ref, \"topics\"));\n//       const topics = [];\n//       for (const topicDoc of topicsSnapshot.docs) {\n//         const subtopicsSnapshot = await getDocs(\n//           collection(topicDoc.ref, \"subtopics\")\n//         );\n//         const subtopics = [];\n//         for (const subtopicDoc of subtopicsSnapshot.docs) {\n//           const sectionsSnapshot = await getDocs(\n//             collection(subtopicDoc.ref, \"sections\")\n//           );\n//           const sections = [];\n//           for (const sectionDoc of sectionsSnapshot.docs) {\n//             const questionsSnapshot = await getDocs(\n//               collection(sectionDoc.ref, \"questions\")\n//             );\n//             const questions = questionsSnapshot.docs.map((doc) => doc.data());\n//             sections.push({ name: sectionDoc.id, questions });\n//           }\n//           subtopics.push({ name: subtopicDoc.id, sections });\n//         }\n//         topics.push({ name: topicDoc.id, subtopics });\n//       }\n//       layers.push({ name: layerDoc.id, topics });\n//     }\n//     return { layers };\n//   };\n\n//   useEffect(() => {\n//     const fetchDataFromFirestore = async () => {\n//       try {\n//         const layersCollection = collection(db, \"layers\");\n//         const layersSnapshot = await getDocs(layersCollection);\n\n//         if (layersSnapshot.empty) {\n//           console.log(\"Firestore is empty. Adding data...\");\n//           fetch(\"/questionnaireData.json\")\n//             .then((response) => response.json())\n//             .then(async (jsonData) => {\n//               await addDataToFirestore(jsonData); // Add JSON to Firestore\n//               setData(jsonData); // Set state with the loaded data\n//             });\n//         } else {\n//           console.log(\"Fetching data from Firestore...\");\n//           const firestoreData = await getFirestoreData(layersSnapshot);\n//           console.log(\"Fetched data:\", firestoreData);\n//           setData(firestoreData); // Set state with Firestore data\n//         }\n//       } catch (error) {\n//         console.error(\"Error fetching data from Firestore:\", error);\n//       }\n//     };\n\n//     fetchDataFromFirestore();\n//   }, [addDataToFirestore]);\n\n//   if (!data) return <div>Loading...</div>;\n\n//   const layer = data.layers[currentLayerIndex];\n//   const topic = layer.topics[currentTopicIndex];\n//   const subtopic = topic.subtopics[currentSubtopicIndex];\n//   const section = subtopic.sections[currentSectionIndex];\n\n//   const handleResponseChange = (questionName, answer) => {\n//     setResponses((prevResponses) => ({\n//       ...prevResponses,\n//       [questionName]: answer,\n//     }));\n//   };\n\n//   const handleNext = () => {\n//     if (currentSectionIndex < subtopic.sections.length - 1) {\n//       setSectionIndex(currentSectionIndex + 1); // Move to next section\n//     } else if (currentSubtopicIndex < topic.subtopics.length - 1) {\n//       setSectionIndex(0);\n//       setSubtopicIndex(currentSubtopicIndex + 1);\n//     } else if (currentTopicIndex < layer.topics.length - 1) {\n//       setSectionIndex(0);\n//       setSubtopicIndex(0);\n//       setTopicIndex(currentTopicIndex + 1);\n//     } else if (currentLayerIndex < data.layers.length - 1) {\n//       setLayerIndex(currentLayerIndex + 1);\n//       setSectionIndex(0);\n//       setTopicIndex(0);\n//       setSubtopicIndex(0);\n//     } else {\n//       console.log(\"Questionnaire completed\");\n//       navigate(\"/score\", { state: { responses, jsonData: data } });\n//     }\n//   };\n\n//   return (\n//     <div className=\"panel\">\n//       <div className=\"panel-header\">\n//         <h2>Layer: {layer.name}</h2>\n//         <h3>Topic: {topic.name}</h3>\n//         <h4>Subtopic: {subtopic.name}</h4>\n//         <h5>Section: {section.name}</h5>\n//       </div>\n\n//       <div className=\"panel-body\">\n//         {section.questions.map((question, index) => (\n//           <div key={index} className=\"question-panel\">\n//             <p><strong>{question.name}</strong></p>\n//             <div className=\"buttons\">\n//               <button onClick={() => handleResponseChange(question.name, \"Yes\")}>\n//                 Yes\n//               </button>\n//               <button onClick={() => handleResponseChange(question.name, \"No\")}>\n//                 No\n//               </button>\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n\n//       <button className=\"next-button\" onClick={handleNext}>\n//         Next\n//       </button>\n//     </div>\n//   );\n// }\n\n// export default QuestionnairePage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}