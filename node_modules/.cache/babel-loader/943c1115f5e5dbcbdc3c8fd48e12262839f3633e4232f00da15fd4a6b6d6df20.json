{"ast":null,"code":"var _jsxFileName = \"/Users/balajibabasahebsankapal/Desktop/Risk/web-app/src/components/Questionnaire.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"../styles/Questionnaire.css\";\nimport { db } from \"../firebase/firebase.js\";\nimport { collection, doc, setDoc, getDocs } from \"firebase/firestore\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction QuestionnairePage() {\n  _s();\n  const [data, setData] = useState(null);\n  const [currentLayerIndex, setLayerIndex] = useState(0);\n  const [currentTopicIndex, setTopicIndex] = useState(0);\n  const [currentSubtopicIndex, setSubtopicIndex] = useState(0);\n  const [currentSectionIndex, setSectionIndex] = useState(0);\n  const [currentQuestionIndex, setQuestionIndex] = useState(0); // Track current question\n  const [responses, setResponses] = useState({});\n  const navigate = useNavigate();\n  useEffect(() => {\n    const fetchDataFromFirestore = async () => {\n      try {\n        const layersCollection = collection(db, \"layers\");\n        const layersSnapshot = await getDocs(layersCollection);\n        if (layersSnapshot.empty) {\n          console.log(\"Firestore is empty.\");\n          // Add your logic to handle empty Firestore.\n        } else {\n          console.log(\"Fetching data from Firestore...\");\n          const layers = [];\n          for (const layerDoc of layersSnapshot.docs) {\n            const layerData = layerDoc.data();\n            const topicsSnapshot = await getDocs(collection(layerDoc.ref, \"topics\"));\n            const topics = [];\n            for (const topicDoc of topicsSnapshot.docs) {\n              const topicData = topicDoc.data();\n              const subtopicsSnapshot = await getDocs(collection(topicDoc.ref, \"subtopics\"));\n              const subtopics = [];\n              for (const subtopicDoc of subtopicsSnapshot.docs) {\n                const subtopicData = subtopicDoc.data();\n                const sectionsSnapshot = await getDocs(collection(subtopicDoc.ref, \"sections\"));\n                const sections = [];\n                for (const sectionDoc of sectionsSnapshot.docs) {\n                  const sectionData = sectionDoc.data();\n                  const questionsSnapshot = await getDocs(collection(sectionDoc.ref, \"questions\"));\n                  const questions = questionsSnapshot.docs.map(doc => doc.data());\n                  sections.push({\n                    ...sectionData,\n                    questions\n                  });\n                }\n                subtopics.push({\n                  ...subtopicData,\n                  sections\n                });\n              }\n              topics.push({\n                ...topicData,\n                subtopics\n              });\n            }\n            layers.push({\n              ...layerData,\n              topics\n            });\n          }\n          setData({\n            layers\n          });\n        }\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n    fetchDataFromFirestore();\n  }, []);\n  if (!data) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 21\n  }, this);\n  const layer = data.layers[currentLayerIndex];\n  const topic = layer.topics[currentTopicIndex];\n  const subtopic = topic.subtopics[currentSubtopicIndex];\n  const section = subtopic.sections[currentSectionIndex];\n  const question = section.questions[currentQuestionIndex];\n  const handleResponse = answer => {\n    setResponses(prev => ({\n      ...prev,\n      [question.name]: answer\n    }));\n    if (answer === \"Yes\" && currentQuestionIndex < section.questions.length - 1) {\n      // Move to the next question in the same section\n      setQuestionIndex(currentQuestionIndex + 1);\n    } else if (answer === \"No\" || currentQuestionIndex === section.questions.length - 1) {\n      // Move to the next section, subtopic, or topic\n      setQuestionIndex(0); // Reset question index\n      if (currentSectionIndex < subtopic.sections.length - 1) {\n        setSectionIndex(currentSectionIndex + 1);\n      } else if (currentSubtopicIndex < topic.subtopics.length - 1) {\n        setSectionIndex(0);\n        setSubtopicIndex(currentSubtopicIndex + 1);\n      } else if (currentTopicIndex < layer.topics.length - 1) {\n        setSectionIndex(0);\n        setSubtopicIndex(0);\n        setTopicIndex(currentTopicIndex + 1);\n      } else if (currentLayerIndex < data.layers.length - 1) {\n        setSectionIndex(0);\n        setSubtopicIndex(0);\n        setTopicIndex(0);\n        setLayerIndex(currentLayerIndex + 1);\n      } else {\n        console.log(\"Questionnaire completed\");\n        navigate(\"/score\", {\n          state: {\n            responses,\n            jsonData: data\n          }\n        });\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"questionnaire-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Layer: \", layer.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Topic: \", topic.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: [\"Subtopic: \", subtopic.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n      children: [\"Section: \", section.name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: question.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 12\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: question.info\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"response-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleResponse(\"Yes\"),\n          children: \"Yes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleResponse(\"No\"),\n          children: \"No\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n}\n_s(QuestionnairePage, \"a/7cMbWoEFAKaMBg4QqItQHzG/s=\", false, function () {\n  return [useNavigate];\n});\n_c = QuestionnairePage;\nexport default QuestionnairePage;\n\n// import React, { useState, useEffect, useCallback } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import \"../styles/Questionnaire.css\";\n// import { db } from \"../firebase/firebase.js\"; // Import Firestore instance\n// import { collection, doc, setDoc, getDocs } from \"firebase/firestore\";\n\n// function QuestionnairePage() {\n//   const [data, setData] = useState(null);\n//   const [currentLayerIndex, setLayerIndex] = useState(0);\n//   const [currentTopicIndex, setTopicIndex] = useState(0);\n//   const [currentSubtopicIndex, setSubtopicIndex] = useState(0);\n//   const [currentSectionIndex, setSectionIndex] = useState(0); // New state for section\n//   const [responses, setResponses] = useState({});\n//   const navigate = useNavigate();\n\n//   const sanitizeName = (name) => name.replace(/[^a-zA-Z0-9]/g, \"_\");\n\n//   const addDataToFirestore = useCallback(async (jsonData) => {\n//     try {\n//       const layers = jsonData.layers;\n\n//       for (const layer of layers) {\n//         const layerRef = doc(collection(db, \"layers\"), sanitizeName(layer.name));\n//         await setDoc(layerRef, { name: layer.name });\n\n//         for (const topic of layer.topics) {\n//           const topicRef = doc(\n//             collection(layerRef, \"topics\"),\n//             sanitizeName(topic.name)\n//           );\n//           await setDoc(topicRef, { name: topic.name });\n\n//           for (const subtopic of topic.subtopics) {\n//             const subtopicRef = doc(\n//               collection(topicRef, \"subtopics\"),\n//               sanitizeName(subtopic.name)\n//             );\n//             await setDoc(subtopicRef, { name: subtopic.name });\n\n//             for (const section of subtopic.sections) {\n//               const sectionRef = doc(\n//                 collection(subtopicRef, \"sections\"),\n//                 sanitizeName(section.name)\n//               );\n//               await setDoc(sectionRef, { name: section.name });\n\n//               for (const question of section.questions) {\n//                 const questionRef = doc(\n//                   collection(sectionRef, \"questions\"),\n//                   sanitizeName(question.name)\n//                 );\n//                 await setDoc(questionRef, {\n//                   name: question.name,\n//                   info: question.info,\n//                   good_point: question.good_point,\n//                   scope_for_improvement: question.scope_for_improvement,\n//                   mandatory: question.mandatory,\n//                   tags: question.tags,\n//                 });\n//               }\n//             }\n//           }\n//         }\n//       }\n\n//       console.log(\"Data successfully added to Firestore!\");\n//     } catch (error) {\n//       console.error(\"Error adding data to Firestore:\", error);\n//     }\n//   }, []);\n\n//   const getFirestoreData = async (layersSnapshot) => {\n//     const layers = [];\n//     for (const layerDoc of layersSnapshot.docs) {\n//       const topicsSnapshot = await getDocs(collection(layerDoc.ref, \"topics\"));\n//       const topics = [];\n//       for (const topicDoc of topicsSnapshot.docs) {\n//         const subtopicsSnapshot = await getDocs(\n//           collection(topicDoc.ref, \"subtopics\")\n//         );\n//         const subtopics = [];\n//         for (const subtopicDoc of subtopicsSnapshot.docs) {\n//           const sectionsSnapshot = await getDocs(\n//             collection(subtopicDoc.ref, \"sections\")\n//           );\n//           const sections = [];\n//           for (const sectionDoc of sectionsSnapshot.docs) {\n//             const questionsSnapshot = await getDocs(\n//               collection(sectionDoc.ref, \"questions\")\n//             );\n//             const questions = questionsSnapshot.docs.map((doc) => doc.data());\n//             sections.push({ name: sectionDoc.id, questions });\n//           }\n//           subtopics.push({ name: subtopicDoc.id, sections });\n//         }\n//         topics.push({ name: topicDoc.id, subtopics });\n//       }\n//       layers.push({ name: layerDoc.id, topics });\n//     }\n//     return { layers };\n//   };\n\n//   useEffect(() => {\n//     const fetchDataFromFirestore = async () => {\n//       try {\n//         const layersCollection = collection(db, \"layers\");\n//         const layersSnapshot = await getDocs(layersCollection);\n\n//         if (layersSnapshot.empty) {\n//           console.log(\"Firestore is empty. Adding data...\");\n//           fetch(\"/questionnaireData.json\")\n//             .then((response) => response.json())\n//             .then(async (jsonData) => {\n//               await addDataToFirestore(jsonData); // Add JSON to Firestore\n//               setData(jsonData); // Set state with the loaded data\n//             });\n//         } else {\n//           console.log(\"Fetching data from Firestore...\");\n//           const firestoreData = await getFirestoreData(layersSnapshot);\n//           console.log(\"Fetched data:\", firestoreData);\n//           setData(firestoreData); // Set state with Firestore data\n//         }\n//       } catch (error) {\n//         console.error(\"Error fetching data from Firestore:\", error);\n//       }\n//     };\n\n//     fetchDataFromFirestore();\n//   }, [addDataToFirestore]);\n\n//   if (!data) return <div>Loading...</div>;\n\n//   const layer = data.layers[currentLayerIndex];\n//   const topic = layer.topics[currentTopicIndex];\n//   const subtopic = topic.subtopics[currentSubtopicIndex];\n//   const section = subtopic.sections[currentSectionIndex];\n\n//   const handleResponseChange = (questionName, answer) => {\n//     setResponses((prevResponses) => ({\n//       ...prevResponses,\n//       [questionName]: answer,\n//     }));\n//   };\n\n//   const handleNext = () => {\n//     if (currentSectionIndex < subtopic.sections.length - 1) {\n//       setSectionIndex(currentSectionIndex + 1); // Move to next section\n//     } else if (currentSubtopicIndex < topic.subtopics.length - 1) {\n//       setSectionIndex(0);\n//       setSubtopicIndex(currentSubtopicIndex + 1);\n//     } else if (currentTopicIndex < layer.topics.length - 1) {\n//       setSectionIndex(0);\n//       setSubtopicIndex(0);\n//       setTopicIndex(currentTopicIndex + 1);\n//     } else if (currentLayerIndex < data.layers.length - 1) {\n//       setLayerIndex(currentLayerIndex + 1);\n//       setSectionIndex(0);\n//       setTopicIndex(0);\n//       setSubtopicIndex(0);\n//     } else {\n//       console.log(\"Questionnaire completed\");\n//       navigate(\"/score\", { state: { responses, jsonData: data } });\n//     }\n//   };\n\n//   return (\n//     <div className=\"panel\">\n//       <div className=\"panel-header\">\n//         <h2>Layer: {layer.name}</h2>\n//         <h3>Topic: {topic.name}</h3>\n//         <h4>Subtopic: {subtopic.name}</h4>\n//         <h5>Section: {section.name}</h5>\n//       </div>\n\n//       <div className=\"panel-body\">\n//         {section.questions.map((question, index) => (\n//           <div key={index} className=\"question-panel\">\n//             <p><strong>{question.name}</strong></p>\n//             <div className=\"buttons\">\n//               <button onClick={() => handleResponseChange(question.name, \"Yes\")}>\n//                 Yes\n//               </button>\n//               <button onClick={() => handleResponseChange(question.name, \"No\")}>\n//                 No\n//               </button>\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n\n//       <button className=\"next-button\" onClick={handleNext}>\n//         Next\n//       </button>\n//     </div>\n//   );\n// }\n\n// export default QuestionnairePage;\nvar _c;\n$RefreshReg$(_c, \"QuestionnairePage\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useNavigate","db","collection","doc","setDoc","getDocs","jsxDEV","_jsxDEV","QuestionnairePage","_s","data","setData","currentLayerIndex","setLayerIndex","currentTopicIndex","setTopicIndex","currentSubtopicIndex","setSubtopicIndex","currentSectionIndex","setSectionIndex","currentQuestionIndex","setQuestionIndex","responses","setResponses","navigate","fetchDataFromFirestore","layersCollection","layersSnapshot","empty","console","log","layers","layerDoc","docs","layerData","topicsSnapshot","ref","topics","topicDoc","topicData","subtopicsSnapshot","subtopics","subtopicDoc","subtopicData","sectionsSnapshot","sections","sectionDoc","sectionData","questionsSnapshot","questions","map","push","error","children","fileName","_jsxFileName","lineNumber","columnNumber","layer","topic","subtopic","section","question","handleResponse","answer","prev","name","length","state","jsonData","className","info","onClick","_c","$RefreshReg$"],"sources":["/Users/balajibabasahebsankapal/Desktop/Risk/web-app/src/components/Questionnaire.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"../styles/Questionnaire.css\";\nimport { db } from \"../firebase/firebase.js\";\nimport { collection, doc, setDoc, getDocs } from \"firebase/firestore\";\n\nfunction QuestionnairePage() {\n  const [data, setData] = useState(null);\n  const [currentLayerIndex, setLayerIndex] = useState(0);\n  const [currentTopicIndex, setTopicIndex] = useState(0);\n  const [currentSubtopicIndex, setSubtopicIndex] = useState(0);\n  const [currentSectionIndex, setSectionIndex] = useState(0);\n  const [currentQuestionIndex, setQuestionIndex] = useState(0); // Track current question\n  const [responses, setResponses] = useState({});\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const fetchDataFromFirestore = async () => {\n      try {\n        const layersCollection = collection(db, \"layers\");\n        const layersSnapshot = await getDocs(layersCollection);\n\n        if (layersSnapshot.empty) {\n          console.log(\"Firestore is empty.\");\n          // Add your logic to handle empty Firestore.\n        } else {\n          console.log(\"Fetching data from Firestore...\");\n          const layers = [];\n          for (const layerDoc of layersSnapshot.docs) {\n            const layerData = layerDoc.data();\n            const topicsSnapshot = await getDocs(\n              collection(layerDoc.ref, \"topics\")\n            );\n            const topics = [];\n            for (const topicDoc of topicsSnapshot.docs) {\n              const topicData = topicDoc.data();\n              const subtopicsSnapshot = await getDocs(\n                collection(topicDoc.ref, \"subtopics\")\n              );\n              const subtopics = [];\n              for (const subtopicDoc of subtopicsSnapshot.docs) {\n                const subtopicData = subtopicDoc.data();\n                const sectionsSnapshot = await getDocs(\n                  collection(subtopicDoc.ref, \"sections\")\n                );\n                const sections = [];\n                for (const sectionDoc of sectionsSnapshot.docs) {\n                  const sectionData = sectionDoc.data();\n                  const questionsSnapshot = await getDocs(\n                    collection(sectionDoc.ref, \"questions\")\n                  );\n                  const questions = questionsSnapshot.docs.map((doc) =>\n                    doc.data()\n                  );\n                  sections.push({ ...sectionData, questions });\n                }\n                subtopics.push({ ...subtopicData, sections });\n              }\n              topics.push({ ...topicData, subtopics });\n            }\n            layers.push({ ...layerData, topics });\n          }\n          setData({ layers });\n        }\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n\n    fetchDataFromFirestore();\n  }, []);\n\n  if (!data) return <div>Loading...</div>;\n\n  const layer = data.layers[currentLayerIndex];\n  const topic = layer.topics[currentTopicIndex];\n  const subtopic = topic.subtopics[currentSubtopicIndex];\n  const section = subtopic.sections[currentSectionIndex];\n  const question = section.questions[currentQuestionIndex];\n\n  const handleResponse = (answer) => {\n    setResponses((prev) => ({ ...prev, [question.name]: answer }));\n\n    if (answer === \"Yes\" && currentQuestionIndex < section.questions.length - 1) {\n      // Move to the next question in the same section\n      setQuestionIndex(currentQuestionIndex + 1);\n    } else if (answer === \"No\" || currentQuestionIndex === section.questions.length - 1) {\n      // Move to the next section, subtopic, or topic\n      setQuestionIndex(0); // Reset question index\n      if (currentSectionIndex < subtopic.sections.length - 1) {\n        setSectionIndex(currentSectionIndex + 1);\n      } else if (currentSubtopicIndex < topic.subtopics.length - 1) {\n        setSectionIndex(0);\n        setSubtopicIndex(currentSubtopicIndex + 1);\n      } else if (currentTopicIndex < layer.topics.length - 1) {\n        setSectionIndex(0);\n        setSubtopicIndex(0);\n        setTopicIndex(currentTopicIndex + 1);\n      } else if (currentLayerIndex < data.layers.length - 1) {\n        setSectionIndex(0);\n        setSubtopicIndex(0);\n        setTopicIndex(0);\n        setLayerIndex(currentLayerIndex + 1);\n      } else {\n        console.log(\"Questionnaire completed\");\n        navigate(\"/score\", { state: { responses, jsonData: data } });\n      }\n    }\n  };\n\n  return (\n    <div className=\"questionnaire-container\">\n      <h2>Layer: {layer.name}</h2>\n      <h3>Topic: {topic.name}</h3>\n      <h4>Subtopic: {subtopic.name}</h4>\n      <h5>Section: {section.name}</h5>\n\n      <div className=\"question-box\">\n        <p><strong>{question.name}</strong></p>\n        <p>{question.info}</p>\n        <div className=\"response-buttons\">\n          <button onClick={() => handleResponse(\"Yes\")}>Yes</button>\n          <button onClick={() => handleResponse(\"No\")}>No</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default QuestionnairePage;\n\n// import React, { useState, useEffect, useCallback } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import \"../styles/Questionnaire.css\";\n// import { db } from \"../firebase/firebase.js\"; // Import Firestore instance\n// import { collection, doc, setDoc, getDocs } from \"firebase/firestore\";\n\n// function QuestionnairePage() {\n//   const [data, setData] = useState(null);\n//   const [currentLayerIndex, setLayerIndex] = useState(0);\n//   const [currentTopicIndex, setTopicIndex] = useState(0);\n//   const [currentSubtopicIndex, setSubtopicIndex] = useState(0);\n//   const [currentSectionIndex, setSectionIndex] = useState(0); // New state for section\n//   const [responses, setResponses] = useState({});\n//   const navigate = useNavigate();\n\n//   const sanitizeName = (name) => name.replace(/[^a-zA-Z0-9]/g, \"_\");\n\n//   const addDataToFirestore = useCallback(async (jsonData) => {\n//     try {\n//       const layers = jsonData.layers;\n\n//       for (const layer of layers) {\n//         const layerRef = doc(collection(db, \"layers\"), sanitizeName(layer.name));\n//         await setDoc(layerRef, { name: layer.name });\n\n//         for (const topic of layer.topics) {\n//           const topicRef = doc(\n//             collection(layerRef, \"topics\"),\n//             sanitizeName(topic.name)\n//           );\n//           await setDoc(topicRef, { name: topic.name });\n\n//           for (const subtopic of topic.subtopics) {\n//             const subtopicRef = doc(\n//               collection(topicRef, \"subtopics\"),\n//               sanitizeName(subtopic.name)\n//             );\n//             await setDoc(subtopicRef, { name: subtopic.name });\n\n//             for (const section of subtopic.sections) {\n//               const sectionRef = doc(\n//                 collection(subtopicRef, \"sections\"),\n//                 sanitizeName(section.name)\n//               );\n//               await setDoc(sectionRef, { name: section.name });\n\n//               for (const question of section.questions) {\n//                 const questionRef = doc(\n//                   collection(sectionRef, \"questions\"),\n//                   sanitizeName(question.name)\n//                 );\n//                 await setDoc(questionRef, {\n//                   name: question.name,\n//                   info: question.info,\n//                   good_point: question.good_point,\n//                   scope_for_improvement: question.scope_for_improvement,\n//                   mandatory: question.mandatory,\n//                   tags: question.tags,\n//                 });\n//               }\n//             }\n//           }\n//         }\n//       }\n\n//       console.log(\"Data successfully added to Firestore!\");\n//     } catch (error) {\n//       console.error(\"Error adding data to Firestore:\", error);\n//     }\n//   }, []);\n\n//   const getFirestoreData = async (layersSnapshot) => {\n//     const layers = [];\n//     for (const layerDoc of layersSnapshot.docs) {\n//       const topicsSnapshot = await getDocs(collection(layerDoc.ref, \"topics\"));\n//       const topics = [];\n//       for (const topicDoc of topicsSnapshot.docs) {\n//         const subtopicsSnapshot = await getDocs(\n//           collection(topicDoc.ref, \"subtopics\")\n//         );\n//         const subtopics = [];\n//         for (const subtopicDoc of subtopicsSnapshot.docs) {\n//           const sectionsSnapshot = await getDocs(\n//             collection(subtopicDoc.ref, \"sections\")\n//           );\n//           const sections = [];\n//           for (const sectionDoc of sectionsSnapshot.docs) {\n//             const questionsSnapshot = await getDocs(\n//               collection(sectionDoc.ref, \"questions\")\n//             );\n//             const questions = questionsSnapshot.docs.map((doc) => doc.data());\n//             sections.push({ name: sectionDoc.id, questions });\n//           }\n//           subtopics.push({ name: subtopicDoc.id, sections });\n//         }\n//         topics.push({ name: topicDoc.id, subtopics });\n//       }\n//       layers.push({ name: layerDoc.id, topics });\n//     }\n//     return { layers };\n//   };\n\n//   useEffect(() => {\n//     const fetchDataFromFirestore = async () => {\n//       try {\n//         const layersCollection = collection(db, \"layers\");\n//         const layersSnapshot = await getDocs(layersCollection);\n\n//         if (layersSnapshot.empty) {\n//           console.log(\"Firestore is empty. Adding data...\");\n//           fetch(\"/questionnaireData.json\")\n//             .then((response) => response.json())\n//             .then(async (jsonData) => {\n//               await addDataToFirestore(jsonData); // Add JSON to Firestore\n//               setData(jsonData); // Set state with the loaded data\n//             });\n//         } else {\n//           console.log(\"Fetching data from Firestore...\");\n//           const firestoreData = await getFirestoreData(layersSnapshot);\n//           console.log(\"Fetched data:\", firestoreData);\n//           setData(firestoreData); // Set state with Firestore data\n//         }\n//       } catch (error) {\n//         console.error(\"Error fetching data from Firestore:\", error);\n//       }\n//     };\n\n//     fetchDataFromFirestore();\n//   }, [addDataToFirestore]);\n\n//   if (!data) return <div>Loading...</div>;\n\n//   const layer = data.layers[currentLayerIndex];\n//   const topic = layer.topics[currentTopicIndex];\n//   const subtopic = topic.subtopics[currentSubtopicIndex];\n//   const section = subtopic.sections[currentSectionIndex];\n\n//   const handleResponseChange = (questionName, answer) => {\n//     setResponses((prevResponses) => ({\n//       ...prevResponses,\n//       [questionName]: answer,\n//     }));\n//   };\n\n//   const handleNext = () => {\n//     if (currentSectionIndex < subtopic.sections.length - 1) {\n//       setSectionIndex(currentSectionIndex + 1); // Move to next section\n//     } else if (currentSubtopicIndex < topic.subtopics.length - 1) {\n//       setSectionIndex(0);\n//       setSubtopicIndex(currentSubtopicIndex + 1);\n//     } else if (currentTopicIndex < layer.topics.length - 1) {\n//       setSectionIndex(0);\n//       setSubtopicIndex(0);\n//       setTopicIndex(currentTopicIndex + 1);\n//     } else if (currentLayerIndex < data.layers.length - 1) {\n//       setLayerIndex(currentLayerIndex + 1);\n//       setSectionIndex(0);\n//       setTopicIndex(0);\n//       setSubtopicIndex(0);\n//     } else {\n//       console.log(\"Questionnaire completed\");\n//       navigate(\"/score\", { state: { responses, jsonData: data } });\n//     }\n//   };\n\n//   return (\n//     <div className=\"panel\">\n//       <div className=\"panel-header\">\n//         <h2>Layer: {layer.name}</h2>\n//         <h3>Topic: {topic.name}</h3>\n//         <h4>Subtopic: {subtopic.name}</h4>\n//         <h5>Section: {section.name}</h5>\n//       </div>\n\n//       <div className=\"panel-body\">\n//         {section.questions.map((question, index) => (\n//           <div key={index} className=\"question-panel\">\n//             <p><strong>{question.name}</strong></p>\n//             <div className=\"buttons\">\n//               <button onClick={() => handleResponseChange(question.name, \"Yes\")}>\n//                 Yes\n//               </button>\n//               <button onClick={() => handleResponseChange(question.name, \"No\")}>\n//                 No\n//               </button>\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n\n//       <button className=\"next-button\" onClick={handleNext}>\n//         Next\n//       </button>\n//     </div>\n//   );\n// }\n\n// export default QuestionnairePage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}