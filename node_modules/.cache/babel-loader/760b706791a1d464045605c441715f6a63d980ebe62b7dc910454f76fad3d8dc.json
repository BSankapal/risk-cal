{"ast":null,"code":"var _jsxFileName = \"/Users/balajibabasahebsankapal/Desktop/Risk/web-app/src/components/Questionnaire.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"../styles/Questionnaire.css\";\nimport { db } from \"../firebase/firebase.js\"; // Import Firestore instance\nimport { collection, doc, setDoc, getDocs } from \"firebase/firestore\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction QuestionnairePage() {\n  _s();\n  const [data, setData] = useState(null);\n  const [currentLayerIndex, setLayerIndex] = useState(0);\n  const [currentTopicIndex, setTopicIndex] = useState(0);\n  const [currentSubtopicIndex, setSubtopicIndex] = useState(0);\n  const [currentSectionIndex, setSectionIndex] = useState(0);\n  const [responses, setResponses] = useState({});\n  const navigate = useNavigate();\n  useEffect(() => {\n    const fetchDataFromFirestore = async () => {\n      try {\n        const layersCollection = collection(db, \"layers\");\n        const layersSnapshot = await getDocs(layersCollection);\n        if (layersSnapshot.empty) {\n          console.log(\"Firestore is empty. Uploading data...\");\n          await uploadInitialData();\n        }\n        const firestoreData = await getFirestoreData(layersSnapshot);\n        setData(firestoreData); // Load data from Firestore\n      } catch (error) {\n        console.error(\"Error fetching Firestore data:\", error);\n      }\n    };\n    fetchDataFromFirestore();\n  }, []);\n\n  // Function to upload initial data to Firestore\n  const uploadInitialData = async jsonData => {\n    try {\n      const layers = jsonData.layers;\n      for (const layer of layers) {\n        const layerRef = doc(collection(db, \"layers\"), layer.name);\n        await setDoc(layerRef, {\n          name: layer.name\n        });\n        for (const topic of layer.topics) {\n          const topicRef = doc(collection(layerRef, \"topics\"), topic.tname);\n          await setDoc(topicRef, {\n            name: topic.tname\n          });\n          for (const subtopic of topic.subtopics) {\n            const sanitizedSubtopicName = subtopic.stname.replace(/[^a-zA-Z0-9]/g, '_');\n            const subtopicRef = doc(collection(topicRef, \"subtopics\"), sanitizedSubtopicName);\n            await setDoc(subtopicRef, {\n              name: subtopic.stname\n            });\n\n            // Check if sections exist\n            if (subtopic.sections && subtopic.sections.length > 0) {\n              for (const section of subtopic.sections) {\n                const sectionRef = doc(collection(subtopicRef, \"sections\"), section.sname);\n                await setDoc(sectionRef, {\n                  name: section.sname\n                });\n\n                // Check if questions exist\n                if (section.questions && section.questions.length > 0) {\n                  for (const question of section.questions) {\n                    const questionRef = doc(collection(sectionRef, \"questions\"), question.name);\n                    await setDoc(questionRef, {\n                      name: question.name,\n                      info: question.info || \"\",\n                      good_point: question.good_point || \"\",\n                      scope_for_improvement: question.scope_for_improvement || \"\",\n                      mandatory: question.mandatory || false,\n                      tags: question.tags || []\n                    });\n                  }\n                } else {\n                  console.warn(`No questions found for section: ${section.sname}`);\n                }\n              }\n            } else {\n              console.warn(`No sections found for subtopic: ${subtopic.stname}`);\n            }\n          }\n        }\n      }\n      console.log(\"Data successfully added to Firestore!\");\n    } catch (error) {\n      console.error(\"Error adding data to Firestore:\", error);\n    }\n  };\n\n  // Function to fetch data from Firestore\n  const getFirestoreData = async layersSnapshot => {\n    const layers = [];\n    for (const layerDoc of layersSnapshot.docs) {\n      const topicsSnapshot = await getDocs(collection(layerDoc.ref, \"topics\"));\n      const topics = [];\n      for (const topicDoc of topicsSnapshot.docs) {\n        const subtopicsSnapshot = await getDocs(collection(topicDoc.ref, \"subtopics\"));\n        const subtopics = [];\n        for (const subtopicDoc of subtopicsSnapshot.docs) {\n          const sectionsSnapshot = await getDocs(collection(subtopicDoc.ref, \"sections\"));\n          const sections = [];\n          for (const sectionDoc of sectionsSnapshot.docs) {\n            const questionsSnapshot = await getDocs(collection(sectionDoc.ref, \"questions\"));\n            const questions = questionsSnapshot.docs.map(doc => doc.data());\n            sections.push({\n              name: sectionDoc.id,\n              questions\n            });\n          }\n          subtopics.push({\n            name: subtopicDoc.id,\n            sections\n          });\n        }\n        topics.push({\n          name: topicDoc.id,\n          subtopics\n        });\n      }\n      layers.push({\n        name: layerDoc.id,\n        topics\n      });\n    }\n    return {\n      layers\n    };\n  };\n\n  // Navigate through layers, topics, subtopics, and sections\n  const handleNext = () => {\n    if (currentSectionIndex < data.layers[currentLayerIndex].topics[currentTopicIndex].subtopics[currentSubtopicIndex].sections.length - 1) {\n      setSectionIndex(prev => prev + 1);\n    } else if (currentSubtopicIndex < data.layers[currentLayerIndex].topics[currentTopicIndex].subtopics.length - 1) {\n      setSectionIndex(0);\n      setSubtopicIndex(prev => prev + 1);\n    } else if (currentTopicIndex < data.layers[currentLayerIndex].topics.length - 1) {\n      setSectionIndex(0);\n      setSubtopicIndex(0);\n      setTopicIndex(prev => prev + 1);\n    } else if (currentLayerIndex < data.layers.length - 1) {\n      setSectionIndex(0);\n      setSubtopicIndex(0);\n      setTopicIndex(0);\n      setLayerIndex(prev => prev + 1);\n    } else {\n      console.log(\"Questionnaire completed!\");\n      navigate(\"/score\", {\n        state: {\n          responses,\n          jsonData: data\n        }\n      });\n    }\n  };\n  if (!data) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 21\n  }, this);\n  const layer = data.layers[currentLayerIndex];\n  const topic = layer.topics[currentTopicIndex];\n  const subtopic = topic.subtopics[currentSubtopicIndex];\n  const section = subtopic.sections[currentSectionIndex];\n  const handleResponseChange = (questionName, answer) => {\n    setResponses(prevResponses => ({\n      ...prevResponses,\n      [questionName]: answer\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"panel\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"panel-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Layer: \", layer.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Topic: \", topic.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Subtopic: \", subtopic.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: [\"Section: \", section.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"panel-body\",\n      children: section.questions.map((question, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: question.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 16\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"buttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleResponseChange(question.name, \"Yes\"),\n            children: \"Yes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleResponseChange(question.name, \"No\"),\n            children: \"No\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"next-button\",\n      onClick: handleNext,\n      children: \"Next\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 5\n  }, this);\n}\n_s(QuestionnairePage, \"Adn2lE7OZhufgN4sAyTaTyXs6xY=\", false, function () {\n  return [useNavigate];\n});\n_c = QuestionnairePage;\nexport default QuestionnairePage;\n\n// import React, { useState, useEffect } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import \"../styles/Questionnaire.css\";\n\n// function QuestionnairePage() {\n//   const [data, setData] = useState(null);\n//   const [currentLayerIndex, setLayerIndex] = useState(0);\n//   const [currentTopicIndex, setTopicIndex] = useState(0);\n//   const [currentSubtopicIndex, setSubtopicIndex] = useState(0);\n//   const [currentSectionIndex, setSectionIndex] = useState(0);\n//   const [responses, setResponses] = useState({});\n//   const navigate = useNavigate();\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const response = await fetch(\"/questionnaireData.json\");\n//         const jsonData = await response.json();\n//         setData(jsonData);\n//       } catch (error) {\n//         console.error(\"Error loading JSON data:\", error);\n//       }\n//     };\n\n//     fetchData();\n//   }, []);\n\n//   // Ensure data and indices are defined before accessing\n//   if (!data || !data.layers || !data.layers[currentLayerIndex]) {\n//     console.log(\"Error: Data, layers, or current layer is missing.\");\n//     return <div>Loading...</div>;\n//   }\n\n//   const layer = data.layers[currentLayerIndex];\n//   const topic = layer.topics[currentTopicIndex];\n//   const subtopic = topic?.subtopics?.[currentSubtopicIndex];\n//   const section = subtopic?.sections?.[currentSectionIndex];\n\n//   console.log(\"Layer data:\", layer);\n//   console.log(\"Topic data:\", topic);\n//   console.log(\"Subtopic data:\", subtopic);\n//   console.log(\"Section data:\", section);\n\n//   if (!subtopic || !section) {\n//     console.log(\"Error: Subtopic or section is missing.\");\n//     return <div>Loading...</div>;\n//   }\n\n//   const handleResponseChange = (questionName, answer) => {\n//     setResponses((prevResponses) => ({\n//       ...prevResponses,\n//       [questionName]: answer,\n//     }));\n//   };\n\n//   const handleNext = () => {\n//     if (currentSectionIndex < subtopic.sections.length - 1) {\n//       // Move to the next section in the same subtopic\n//       setSectionIndex((prev) => prev + 1);\n//     } else if (currentSubtopicIndex < topic.subtopics.length - 1) {\n//       // Reset section index and move to the next subtopic\n//       setSectionIndex(0);\n//       setSubtopicIndex((prev) => prev + 1);\n//     } else if (currentTopicIndex < layer.topics.length - 1) {\n//       // Reset subtopic and section indices, and move to the next topic\n//       setSubtopicIndex(0);\n//       setSectionIndex(0);\n//       setTopicIndex((prev) => prev + 1);\n//     } else if (currentLayerIndex < data.layers.length - 1) {\n//       // Reset topic, subtopic, and section indices, and move to the next layer\n//       setTopicIndex(0);\n//       setSubtopicIndex(0);\n//       setSectionIndex(0);\n//       setLayerIndex((prev) => prev + 1);\n//     } else {\n//       // Questionnaire is completed\n//       console.log(\"Questionnaire completed\");\n//       navigate(\"/score\", { state: { responses, jsonData: data } });\n//     }\n//   };\n\n//   return (\n//     <div className=\"panel\">\n//       <div className=\"panel-header\">\n//         <h2>Layer: {layer.name}</h2>\n//         <h3>Topic: {topic.name}</h3>\n//         <h4>Subtopic: {subtopic.name}</h4>\n//         <h5>Section: {section.name}</h5>\n//       </div>\n\n//       <div className=\"panel-body\">\n//         {section.questions.map((question, index) => (\n//           <div key={index} className=\"question-panel\">\n//             <p><strong>{question.name}</strong></p>\n//             <div className=\"buttons\">\n//               <button onClick={() => handleResponseChange(question.name, \"Yes\")}>\n//                 Yes\n//               </button>\n//               <button onClick={() => handleResponseChange(question.name, \"No\")}>\n//                 No\n//               </button>\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n\n//       <button className=\"next-button\" onClick={handleNext}>\n//         Next\n//       </button>\n//     </div>\n//   );\n// }\n\n// export default QuestionnairePage;\n\n// import React, { useState, useEffect } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import \"../styles/Questionnaire.css\";\n// import { db } from \"../firebase/firebase.js\"; // Import Firestore instance\n// import { collection, doc, setDoc, getDocs } from \"firebase/firestore\";\n\n// function QuestionnairePage() {\n//   const [data, setData] = useState(null);\n//   const [currentLayerIndex, setLayerIndex] = useState(0);\n//   const [currentTopicIndex, setTopicIndex] = useState(0);\n//   const [currentSubtopicIndex, setSubtopicIndex] = useState(0);\n//   const [currentSectionIndex, setSectionIndex] = useState(0); // New state for section\n//   const [responses, setResponses] = useState({});\n//   const navigate = useNavigate();\n\n//   useEffect(() => {\n//     const fetchDataFromFirestore = async () => {\n//       try {\n//         const layersCollection = collection(db, \"layers\");\n//         const layersSnapshot = await getDocs(layersCollection);\n\n//         if (layersSnapshot.empty) {\n//           console.log(\"Firestore is empty. Adding data...\");\n//           // Load JSON and upload it if Firestore is empty\n//           fetch(\"/questionnaireData.json\")\n//             .then((response) => response.json())\n//             .then(async (jsonData) => {\n//               await addDataToFirestore(jsonData); // Add JSON to Firestore\n//               setData(jsonData); // Set state with the loaded data\n//             });\n//         } else {\n//           console.log(\"Fetching data from Firestore...\");\n//           const firestoreData = await getFirestoreData(layersSnapshot);\n//           setData(firestoreData); // Set state with Firestore data\n//         }\n//       } catch (error) {\n//         console.error(\"Error fetching data from Firestore:\", error);\n//       }\n//     };\n\n//     fetchDataFromFirestore();\n//   }, []);\n\n//   // Function to add data to Firestore\n//   const addDataToFirestore = async (jsonData) => {\n//     try {\n//       const layers = jsonData.layers;\n\n//       // Step 1: Create all layers first\n//       for (const layer of layers) {\n//         const layerRef = doc(collection(db, \"layers\"), layer.lname);\n//         await setDoc(layerRef, { name: layer.lname });\n\n//         // Step 2: Create topics under each layer\n//         for (const topic of layer.topics) {\n//           const topicRef = doc(collection(layerRef, \"topics\"), topic.tname);\n//           await setDoc(topicRef, { name: topic.tname });\n\n//           // Step 3: Create subtopics under each topic\n//           for (const subtopic of topic.subtopics) {\n//             const sanitizedSubtopicName = subtopic.stname.replace(/[^a-zA-Z0-9]/g, '_');\n//             const subtopicRef = doc(collection(topicRef, \"subtopics\"), sanitizedSubtopicName);\n//             await setDoc(subtopicRef, { name: subtopic.stname });\n\n//             // Step 4: Create sections under each subtopic\n//             for (const section of subtopic.sections) {\n//               const sectionRef = doc(collection(subtopicRef, \"sections\"), section.sname);\n//               await setDoc(sectionRef, { name: section.sname });\n\n//               // Step 5: Create questions under each section\n//               for (const question of section.questions) {\n//                 const questionRef = doc(\n//                   collection(sectionRef, \"questions\"),\n//                   question.name\n//                 );\n//                 await setDoc(questionRef, {\n//                   name: question.name,\n//                   info: question.info,\n//                   good_point: question.good_point,\n//                   scope_for_improvement: question.scope_for_improvement,\n//                   mandatory: question.mandatory,\n//                   tags: question.tags,\n//                 });\n//               }\n//             }\n//           }\n//         }\n//       }\n\n//       console.log(\"Data successfully added to Firestore!\");\n//     } catch (error) {\n//       console.error(\"Error adding data to Firestore:\", error);\n//     }\n//   };\n\n//   // Function to fetch data from Firestore and build a JSON-like structure\n//   const getFirestoreData = async (layersSnapshot) => {\n//     const layers = [];\n//     for (const layerDoc of layersSnapshot.docs) {\n//       const topicsSnapshot = await getDocs(collection(layerDoc.ref, \"topics\"));\n//       const topics = [];\n//       for (const topicDoc of topicsSnapshot.docs) {\n//         const subtopicsSnapshot = await getDocs(\n//           collection(topicDoc.ref, \"subtopics\")\n//         );\n//         const subtopics = [];\n//         for (const subtopicDoc of subtopicsSnapshot.docs) {\n//           const sectionsSnapshot = await getDocs(\n//             collection(subtopicDoc.ref, \"sections\")\n//           );\n//           const sections = [];\n//           for (const sectionDoc of sectionsSnapshot.docs) {\n//             const questionsSnapshot = await getDocs(\n//               collection(sectionDoc.ref, \"questions\")\n//             );\n//             const questions = questionsSnapshot.docs.map((doc) => doc.data());\n//             sections.push({ name: sectionDoc.id, questions });\n//           }\n//           subtopics.push({ name: subtopicDoc.id, sections });\n//         }\n//         topics.push({ name: topicDoc.id, subtopics });\n//       }\n//       layers.push({ name: layerDoc.id, topics });\n//     }\n//     return { layers };\n//   };\n\n//   if (!data) return <div>Loading...</div>;\n\n//   const layer = data.layers[currentLayerIndex];\n//   const topic = layer.topics[currentTopicIndex];\n//   const subtopic = topic.subtopics[currentSubtopicIndex];\n//   const section = subtopic.sections[currentSectionIndex];\n\n//   const handleResponseChange = (questionName, answer) => {\n//     setResponses((prevResponses) => ({\n//       ...prevResponses,\n//       [questionName]: answer,\n//     }));\n//   };\n\n//   const handleNext = () => {\n//     if (currentSectionIndex < subtopic.sections.length - 1) {\n//       setSectionIndex(currentSectionIndex + 1); // Move to next section\n//     } else if (currentSubtopicIndex < topic.subtopics.length - 1) {\n//       setSectionIndex(0);\n//       setSubtopicIndex(currentSubtopicIndex + 1);\n//     } else if (currentTopicIndex < layer.topics.length - 1) {\n//       setSubtopicIndex(0);\n//       setTopicIndex(currentTopicIndex + 1);\n//     } else if (currentLayerIndex < data.layers.length - 1) {\n//       setLayerIndex(currentLayerIndex + 1);\n//       setTopicIndex(0);\n//       setSubtopicIndex(0);\n//     } else {\n//       console.log(\"Questionnaire completed\");\n//       navigate(\"/score\", { state: { responses, jsonData: data } });\n//     }\n//   };\n\n//   return (\n//     <div className=\"panel\">\n//       <div className=\"panel-header\">\n//         <h2>Layer: {layer.lname}</h2>\n//         <h3>Topic: {topic.tname}</h3>\n//         <h4>Subtopic: {subtopic.stname}</h4>\n//         <h5>Section: {section.sname}</h5>\n//       </div>\n\n//       <div className=\"panel-body\">\n//         {section.questions.map((question, index) => (\n//           <div key={index} className=\"question-panel\">\n//             <p><strong>{question.name}</strong></p>\n//             <div className=\"buttons\">\n//               <button onClick={() => handleResponseChange(question.name, \"Yes\")}>\n//                 Yes\n//               </button>\n//               <button onClick={() => handleResponseChange(question.name, \"No\")}>\n//                 No\n//               </button>\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n\n//       <button className=\"next-button\" onClick={handleNext}>\n//         Next\n//       </button>\n//     </div>\n//   );\n// }\n\n// export default QuestionnairePage;\nvar _c;\n$RefreshReg$(_c, \"QuestionnairePage\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","db","collection","doc","setDoc","getDocs","jsxDEV","_jsxDEV","QuestionnairePage","_s","data","setData","currentLayerIndex","setLayerIndex","currentTopicIndex","setTopicIndex","currentSubtopicIndex","setSubtopicIndex","currentSectionIndex","setSectionIndex","responses","setResponses","navigate","fetchDataFromFirestore","layersCollection","layersSnapshot","empty","console","log","uploadInitialData","firestoreData","getFirestoreData","error","jsonData","layers","layer","layerRef","name","topic","topics","topicRef","tname","subtopic","subtopics","sanitizedSubtopicName","stname","replace","subtopicRef","sections","length","section","sectionRef","sname","questions","question","questionRef","info","good_point","scope_for_improvement","mandatory","tags","warn","layerDoc","docs","topicsSnapshot","ref","topicDoc","subtopicsSnapshot","subtopicDoc","sectionsSnapshot","sectionDoc","questionsSnapshot","map","push","id","handleNext","prev","state","children","fileName","_jsxFileName","lineNumber","columnNumber","handleResponseChange","questionName","answer","prevResponses","className","index","onClick","_c","$RefreshReg$"],"sources":["/Users/balajibabasahebsankapal/Desktop/Risk/web-app/src/components/Questionnaire.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"../styles/Questionnaire.css\";\nimport { db } from \"../firebase/firebase.js\"; // Import Firestore instance\nimport { collection, doc, setDoc, getDocs } from \"firebase/firestore\";\n\nfunction QuestionnairePage() {\n  const [data, setData] = useState(null);\n  const [currentLayerIndex, setLayerIndex] = useState(0);\n  const [currentTopicIndex, setTopicIndex] = useState(0);\n  const [currentSubtopicIndex, setSubtopicIndex] = useState(0);\n  const [currentSectionIndex, setSectionIndex] = useState(0);\n  const [responses, setResponses] = useState({});\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const fetchDataFromFirestore = async () => {\n      try {\n        const layersCollection = collection(db, \"layers\");\n        const layersSnapshot = await getDocs(layersCollection);\n\n        if (layersSnapshot.empty) {\n          console.log(\"Firestore is empty. Uploading data...\");\n          await uploadInitialData();\n        }\n\n        const firestoreData = await getFirestoreData(layersSnapshot);\n        setData(firestoreData); // Load data from Firestore\n      } catch (error) {\n        console.error(\"Error fetching Firestore data:\", error);\n      }\n    };\n\n    fetchDataFromFirestore();\n  }, []);\n\n  // Function to upload initial data to Firestore\n  const uploadInitialData = async (jsonData) => {\n    try {\n      const layers = jsonData.layers;\n  \n      for (const layer of layers) {\n        const layerRef = doc(collection(db, \"layers\"), layer.name);\n        await setDoc(layerRef, { name: layer.name });\n  \n        for (const topic of layer.topics) {\n          const topicRef = doc(collection(layerRef, \"topics\"), topic.tname);\n          await setDoc(topicRef, { name: topic.tname });\n  \n          for (const subtopic of topic.subtopics) {\n            const sanitizedSubtopicName = subtopic.stname.replace(/[^a-zA-Z0-9]/g, '_');\n            const subtopicRef = doc(collection(topicRef, \"subtopics\"), sanitizedSubtopicName);\n            await setDoc(subtopicRef, { name: subtopic.stname });\n  \n            // Check if sections exist\n            if (subtopic.sections && subtopic.sections.length > 0) {\n              for (const section of subtopic.sections) {\n                const sectionRef = doc(collection(subtopicRef, \"sections\"), section.sname);\n                await setDoc(sectionRef, { name: section.sname });\n  \n                // Check if questions exist\n                if (section.questions && section.questions.length > 0) {\n                  for (const question of section.questions) {\n                    const questionRef = doc(collection(sectionRef, \"questions\"), question.name);\n                    await setDoc(questionRef, {\n                      name: question.name,\n                      info: question.info || \"\",\n                      good_point: question.good_point || \"\",\n                      scope_for_improvement: question.scope_for_improvement || \"\",\n                      mandatory: question.mandatory || false,\n                      tags: question.tags || [],\n                    });\n                  }\n                } else {\n                  console.warn(`No questions found for section: ${section.sname}`);\n                }\n              }\n            } else {\n              console.warn(`No sections found for subtopic: ${subtopic.stname}`);\n            }\n          }\n        }\n      }\n  \n      console.log(\"Data successfully added to Firestore!\");\n    } catch (error) {\n      console.error(\"Error adding data to Firestore:\", error);\n    }\n  };\n  \n\n  // Function to fetch data from Firestore\n  const getFirestoreData = async (layersSnapshot) => {\n    const layers = [];\n    for (const layerDoc of layersSnapshot.docs) {\n      const topicsSnapshot = await getDocs(collection(layerDoc.ref, \"topics\"));\n      const topics = [];\n      for (const topicDoc of topicsSnapshot.docs) {\n        const subtopicsSnapshot = await getDocs(collection(topicDoc.ref, \"subtopics\"));\n        const subtopics = [];\n        for (const subtopicDoc of subtopicsSnapshot.docs) {\n          const sectionsSnapshot = await getDocs(collection(subtopicDoc.ref, \"sections\"));\n          const sections = [];\n          for (const sectionDoc of sectionsSnapshot.docs) {\n            const questionsSnapshot = await getDocs(collection(sectionDoc.ref, \"questions\"));\n            const questions = questionsSnapshot.docs.map((doc) => doc.data());\n            sections.push({ name: sectionDoc.id, questions });\n          }\n          subtopics.push({ name: subtopicDoc.id, sections });\n        }\n        topics.push({ name: topicDoc.id, subtopics });\n      }\n      layers.push({ name: layerDoc.id, topics });\n    }\n    return { layers };\n  };\n\n  // Navigate through layers, topics, subtopics, and sections\n  const handleNext = () => {\n    if (currentSectionIndex < data.layers[currentLayerIndex].topics[currentTopicIndex].subtopics[currentSubtopicIndex].sections.length - 1) {\n      setSectionIndex((prev) => prev + 1);\n    } else if (currentSubtopicIndex < data.layers[currentLayerIndex].topics[currentTopicIndex].subtopics.length - 1) {\n      setSectionIndex(0);\n      setSubtopicIndex((prev) => prev + 1);\n    } else if (currentTopicIndex < data.layers[currentLayerIndex].topics.length - 1) {\n      setSectionIndex(0);\n      setSubtopicIndex(0);\n      setTopicIndex((prev) => prev + 1);\n    } else if (currentLayerIndex < data.layers.length - 1) {\n      setSectionIndex(0);\n      setSubtopicIndex(0);\n      setTopicIndex(0);\n      setLayerIndex((prev) => prev + 1);\n    } else {\n      console.log(\"Questionnaire completed!\");\n      navigate(\"/score\", { state: { responses, jsonData: data } });\n    }\n  };\n\n  if (!data) return <div>Loading...</div>;\n\n  const layer = data.layers[currentLayerIndex];\n  const topic = layer.topics[currentTopicIndex];\n  const subtopic = topic.subtopics[currentSubtopicIndex];\n  const section = subtopic.sections[currentSectionIndex];\n\n  const handleResponseChange = (questionName, answer) => {\n    setResponses((prevResponses) => ({\n      ...prevResponses,\n      [questionName]: answer,\n    }));\n  };\n\n  return (\n    <div className=\"panel\">\n      <div className=\"panel-header\">\n        <h2>Layer: {layer.name}</h2>\n        <h3>Topic: {topic.name}</h3>\n        <h4>Subtopic: {subtopic.name}</h4>\n        <h5>Section: {section.name}</h5>\n      </div>\n      <div className=\"panel-body\">\n        {section.questions.map((question, index) => (\n          <div key={index} className=\"question-panel\">\n            <p><strong>{question.name}</strong></p>\n            <div className=\"buttons\">\n              <button onClick={() => handleResponseChange(question.name, \"Yes\")}>Yes</button>\n              <button onClick={() => handleResponseChange(question.name, \"No\")}>No</button>\n            </div>\n          </div>\n        ))}\n      </div>\n      <button className=\"next-button\" onClick={handleNext}>\n        Next\n      </button>\n    </div>\n  );\n}\n\nexport default QuestionnairePage;\n\n// import React, { useState, useEffect } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import \"../styles/Questionnaire.css\";\n\n// function QuestionnairePage() {\n//   const [data, setData] = useState(null);\n//   const [currentLayerIndex, setLayerIndex] = useState(0);\n//   const [currentTopicIndex, setTopicIndex] = useState(0);\n//   const [currentSubtopicIndex, setSubtopicIndex] = useState(0);\n//   const [currentSectionIndex, setSectionIndex] = useState(0);\n//   const [responses, setResponses] = useState({});\n//   const navigate = useNavigate();\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const response = await fetch(\"/questionnaireData.json\");\n//         const jsonData = await response.json();\n//         setData(jsonData);\n//       } catch (error) {\n//         console.error(\"Error loading JSON data:\", error);\n//       }\n//     };\n\n//     fetchData();\n//   }, []);\n\n//   // Ensure data and indices are defined before accessing\n//   if (!data || !data.layers || !data.layers[currentLayerIndex]) {\n//     console.log(\"Error: Data, layers, or current layer is missing.\");\n//     return <div>Loading...</div>;\n//   }\n\n//   const layer = data.layers[currentLayerIndex];\n//   const topic = layer.topics[currentTopicIndex];\n//   const subtopic = topic?.subtopics?.[currentSubtopicIndex];\n//   const section = subtopic?.sections?.[currentSectionIndex];\n\n//   console.log(\"Layer data:\", layer);\n//   console.log(\"Topic data:\", topic);\n//   console.log(\"Subtopic data:\", subtopic);\n//   console.log(\"Section data:\", section);\n\n//   if (!subtopic || !section) {\n//     console.log(\"Error: Subtopic or section is missing.\");\n//     return <div>Loading...</div>;\n//   }\n\n//   const handleResponseChange = (questionName, answer) => {\n//     setResponses((prevResponses) => ({\n//       ...prevResponses,\n//       [questionName]: answer,\n//     }));\n//   };\n\n//   const handleNext = () => {\n//     if (currentSectionIndex < subtopic.sections.length - 1) {\n//       // Move to the next section in the same subtopic\n//       setSectionIndex((prev) => prev + 1);\n//     } else if (currentSubtopicIndex < topic.subtopics.length - 1) {\n//       // Reset section index and move to the next subtopic\n//       setSectionIndex(0);\n//       setSubtopicIndex((prev) => prev + 1);\n//     } else if (currentTopicIndex < layer.topics.length - 1) {\n//       // Reset subtopic and section indices, and move to the next topic\n//       setSubtopicIndex(0);\n//       setSectionIndex(0);\n//       setTopicIndex((prev) => prev + 1);\n//     } else if (currentLayerIndex < data.layers.length - 1) {\n//       // Reset topic, subtopic, and section indices, and move to the next layer\n//       setTopicIndex(0);\n//       setSubtopicIndex(0);\n//       setSectionIndex(0);\n//       setLayerIndex((prev) => prev + 1);\n//     } else {\n//       // Questionnaire is completed\n//       console.log(\"Questionnaire completed\");\n//       navigate(\"/score\", { state: { responses, jsonData: data } });\n//     }\n//   };\n\n//   return (\n//     <div className=\"panel\">\n//       <div className=\"panel-header\">\n//         <h2>Layer: {layer.name}</h2>\n//         <h3>Topic: {topic.name}</h3>\n//         <h4>Subtopic: {subtopic.name}</h4>\n//         <h5>Section: {section.name}</h5>\n//       </div>\n\n//       <div className=\"panel-body\">\n//         {section.questions.map((question, index) => (\n//           <div key={index} className=\"question-panel\">\n//             <p><strong>{question.name}</strong></p>\n//             <div className=\"buttons\">\n//               <button onClick={() => handleResponseChange(question.name, \"Yes\")}>\n//                 Yes\n//               </button>\n//               <button onClick={() => handleResponseChange(question.name, \"No\")}>\n//                 No\n//               </button>\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n\n//       <button className=\"next-button\" onClick={handleNext}>\n//         Next\n//       </button>\n//     </div>\n//   );\n// }\n\n// export default QuestionnairePage;\n\n// import React, { useState, useEffect } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import \"../styles/Questionnaire.css\";\n// import { db } from \"../firebase/firebase.js\"; // Import Firestore instance\n// import { collection, doc, setDoc, getDocs } from \"firebase/firestore\";\n\n// function QuestionnairePage() {\n//   const [data, setData] = useState(null);\n//   const [currentLayerIndex, setLayerIndex] = useState(0);\n//   const [currentTopicIndex, setTopicIndex] = useState(0);\n//   const [currentSubtopicIndex, setSubtopicIndex] = useState(0);\n//   const [currentSectionIndex, setSectionIndex] = useState(0); // New state for section\n//   const [responses, setResponses] = useState({});\n//   const navigate = useNavigate();\n\n//   useEffect(() => {\n//     const fetchDataFromFirestore = async () => {\n//       try {\n//         const layersCollection = collection(db, \"layers\");\n//         const layersSnapshot = await getDocs(layersCollection);\n\n//         if (layersSnapshot.empty) {\n//           console.log(\"Firestore is empty. Adding data...\");\n//           // Load JSON and upload it if Firestore is empty\n//           fetch(\"/questionnaireData.json\")\n//             .then((response) => response.json())\n//             .then(async (jsonData) => {\n//               await addDataToFirestore(jsonData); // Add JSON to Firestore\n//               setData(jsonData); // Set state with the loaded data\n//             });\n//         } else {\n//           console.log(\"Fetching data from Firestore...\");\n//           const firestoreData = await getFirestoreData(layersSnapshot);\n//           setData(firestoreData); // Set state with Firestore data\n//         }\n//       } catch (error) {\n//         console.error(\"Error fetching data from Firestore:\", error);\n//       }\n//     };\n\n//     fetchDataFromFirestore();\n//   }, []);\n\n//   // Function to add data to Firestore\n//   const addDataToFirestore = async (jsonData) => {\n//     try {\n//       const layers = jsonData.layers;\n  \n//       // Step 1: Create all layers first\n//       for (const layer of layers) {\n//         const layerRef = doc(collection(db, \"layers\"), layer.lname);\n//         await setDoc(layerRef, { name: layer.lname });\n  \n//         // Step 2: Create topics under each layer\n//         for (const topic of layer.topics) {\n//           const topicRef = doc(collection(layerRef, \"topics\"), topic.tname);\n//           await setDoc(topicRef, { name: topic.tname });\n  \n//           // Step 3: Create subtopics under each topic\n//           for (const subtopic of topic.subtopics) {\n//             const sanitizedSubtopicName = subtopic.stname.replace(/[^a-zA-Z0-9]/g, '_');\n//             const subtopicRef = doc(collection(topicRef, \"subtopics\"), sanitizedSubtopicName);\n//             await setDoc(subtopicRef, { name: subtopic.stname });\n  \n//             // Step 4: Create sections under each subtopic\n//             for (const section of subtopic.sections) {\n//               const sectionRef = doc(collection(subtopicRef, \"sections\"), section.sname);\n//               await setDoc(sectionRef, { name: section.sname });\n  \n//               // Step 5: Create questions under each section\n//               for (const question of section.questions) {\n//                 const questionRef = doc(\n//                   collection(sectionRef, \"questions\"),\n//                   question.name\n//                 );\n//                 await setDoc(questionRef, {\n//                   name: question.name,\n//                   info: question.info,\n//                   good_point: question.good_point,\n//                   scope_for_improvement: question.scope_for_improvement,\n//                   mandatory: question.mandatory,\n//                   tags: question.tags,\n//                 });\n//               }\n//             }\n//           }\n//         }\n//       }\n  \n//       console.log(\"Data successfully added to Firestore!\");\n//     } catch (error) {\n//       console.error(\"Error adding data to Firestore:\", error);\n//     }\n//   };\n  \n\n//   // Function to fetch data from Firestore and build a JSON-like structure\n//   const getFirestoreData = async (layersSnapshot) => {\n//     const layers = [];\n//     for (const layerDoc of layersSnapshot.docs) {\n//       const topicsSnapshot = await getDocs(collection(layerDoc.ref, \"topics\"));\n//       const topics = [];\n//       for (const topicDoc of topicsSnapshot.docs) {\n//         const subtopicsSnapshot = await getDocs(\n//           collection(topicDoc.ref, \"subtopics\")\n//         );\n//         const subtopics = [];\n//         for (const subtopicDoc of subtopicsSnapshot.docs) {\n//           const sectionsSnapshot = await getDocs(\n//             collection(subtopicDoc.ref, \"sections\")\n//           );\n//           const sections = [];\n//           for (const sectionDoc of sectionsSnapshot.docs) {\n//             const questionsSnapshot = await getDocs(\n//               collection(sectionDoc.ref, \"questions\")\n//             );\n//             const questions = questionsSnapshot.docs.map((doc) => doc.data());\n//             sections.push({ name: sectionDoc.id, questions });\n//           }\n//           subtopics.push({ name: subtopicDoc.id, sections });\n//         }\n//         topics.push({ name: topicDoc.id, subtopics });\n//       }\n//       layers.push({ name: layerDoc.id, topics });\n//     }\n//     return { layers };\n//   };\n\n//   if (!data) return <div>Loading...</div>;\n\n//   const layer = data.layers[currentLayerIndex];\n//   const topic = layer.topics[currentTopicIndex];\n//   const subtopic = topic.subtopics[currentSubtopicIndex];\n//   const section = subtopic.sections[currentSectionIndex];\n\n//   const handleResponseChange = (questionName, answer) => {\n//     setResponses((prevResponses) => ({\n//       ...prevResponses,\n//       [questionName]: answer,\n//     }));\n//   };\n\n//   const handleNext = () => {\n//     if (currentSectionIndex < subtopic.sections.length - 1) {\n//       setSectionIndex(currentSectionIndex + 1); // Move to next section\n//     } else if (currentSubtopicIndex < topic.subtopics.length - 1) {\n//       setSectionIndex(0);\n//       setSubtopicIndex(currentSubtopicIndex + 1);\n//     } else if (currentTopicIndex < layer.topics.length - 1) {\n//       setSubtopicIndex(0);\n//       setTopicIndex(currentTopicIndex + 1);\n//     } else if (currentLayerIndex < data.layers.length - 1) {\n//       setLayerIndex(currentLayerIndex + 1);\n//       setTopicIndex(0);\n//       setSubtopicIndex(0);\n//     } else {\n//       console.log(\"Questionnaire completed\");\n//       navigate(\"/score\", { state: { responses, jsonData: data } });\n//     }\n//   };\n\n//   return (\n//     <div className=\"panel\">\n//       <div className=\"panel-header\">\n//         <h2>Layer: {layer.lname}</h2>\n//         <h3>Topic: {topic.tname}</h3>\n//         <h4>Subtopic: {subtopic.stname}</h4>\n//         <h5>Section: {section.sname}</h5>\n//       </div>\n\n//       <div className=\"panel-body\">\n//         {section.questions.map((question, index) => (\n//           <div key={index} className=\"question-panel\">\n//             <p><strong>{question.name}</strong></p>\n//             <div className=\"buttons\">\n//               <button onClick={() => handleResponseChange(question.name, \"Yes\")}>\n//                 Yes\n//               </button>\n//               <button onClick={() => handleResponseChange(question.name, \"No\")}>\n//                 No\n//               </button>\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n\n//       <button className=\"next-button\" onClick={handleNext}>\n//         Next\n//       </button>\n//     </div>\n//   );\n// }\n\n// export default QuestionnairePage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}