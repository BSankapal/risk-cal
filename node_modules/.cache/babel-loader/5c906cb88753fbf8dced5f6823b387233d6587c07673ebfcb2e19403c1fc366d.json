{"ast":null,"code":"var _jsxFileName = \"/Users/balajibabasahebsankapal/Desktop/Risk/web-app/src/components/Questionnaire.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import \"../styles/Questionnaire.css\";\n// import { db } from \"../firebase/firebase.js\"; // Import Firestore instance\n// import { collection, doc, setDoc, getDocs } from \"firebase/firestore\";\n\n// function QuestionnairePage() {\n//   const [data, setData] = useState(null);\n//   const [currentLayerIndex, setLayerIndex] = useState(0);\n//   const [currentTopicIndex, setTopicIndex] = useState(0);\n//   const [currentSubtopicIndex, setSubtopicIndex] = useState(0);\n//   const [currentSectionIndex, setSectionIndex] = useState(0);\n//   const [responses, setResponses] = useState({});\n//   const navigate = useNavigate();\n\n//   useEffect(() => {\n//     const fetchDataFromFirestore = async () => {\n//       try {\n//         const layersCollection = collection(db, \"layers\");\n//         const layersSnapshot = await getDocs(layersCollection);\n\n//         if (layersSnapshot.empty) {\n//           console.log(\"Firestore is empty. Uploading data...\");\n//           await uploadInitialData();\n//         }\n\n//         const firestoreData = await getFirestoreData(layersSnapshot);\n//         setData(firestoreData); // Load data from Firestore\n//       } catch (error) {\n//         console.error(\"Error fetching Firestore data:\", error);\n//       }\n//     };\n\n//     fetchDataFromFirestore();\n//   }, []);\n\n//   // Function to upload initial data to Firestore\n//   const uploadInitialData = async (jsonData) => {\n//     try {\n//       const layers = jsonData.layers;\n\n//       for (const layer of layers) {\n//         const layerRef = doc(collection(db, \"layers\"), layer.name);\n//         await setDoc(layerRef, { name: layer.name });\n\n//         for (const topic of layer.topics) {\n//           const topicRef = doc(collection(layerRef, \"topics\"), topic.name);\n//           await setDoc(topicRef, { name: topic.name });\n\n//           for (const subtopic of topic.subtopics) {\n//             const subtopicRef = doc(collection(topicRef, \"subtopics\"), subtopic.name);\n//             await setDoc(subtopicRef, { name: subtopic.name });\n\n//             // Check if sections exist\n//             if (subtopic.sections && subtopic.sections.length > 0) {\n//               for (const section of subtopic.sections) {\n//                 const sectionRef = doc(collection(subtopicRef, \"sections\"), section.name);\n//                 await setDoc(sectionRef, { name: section.name });\n\n//                 // Check if questions exist\n//                 if (section.questions && section.questions.length > 0) {\n//                   for (const question of section.questions) {\n//                     const questionRef = doc(collection(sectionRef, \"questions\"), question.name);\n//                     await setDoc(questionRef, {\n//                       name: question.name,\n//                       info: question.info || \"\",\n//                       good_point: question.good_point || \"\",\n//                       scope_for_improvement: question.scope_for_improvement || \"\",\n//                       mandatory: question.mandatory || false,\n//                       tags: question.tags || [],\n//                     });\n//                   }\n//                 } else {\n//                   console.warn(`No questions found for section: ${section.name}`);\n//                 }\n//               }\n//             } else {\n//               console.warn(`No sections found for subtopic: ${subtopic.name}`);\n//             }\n//           }\n//         }\n//       }\n\n//       console.log(\"Data successfully added to Firestore!\");\n//     } catch (error) {\n//       console.error(\"Error adding data to Firestore:\", error);\n//     }\n//   };\n\n//   // Function to fetch data from Firestore\n//   const getFirestoreData = async (layersSnapshot) => {\n//     const layers = [];\n//     for (const layerDoc of layersSnapshot.docs) {\n//       const topicsSnapshot = await getDocs(collection(layerDoc.ref, \"topics\"));\n//       const topics = [];\n//       for (const topicDoc of topicsSnapshot.docs) {\n//         const subtopicsSnapshot = await getDocs(collection(topicDoc.ref, \"subtopics\"));\n//         const subtopics = [];\n//         for (const subtopicDoc of subtopicsSnapshot.docs) {\n//           const sectionsSnapshot = await getDocs(collection(subtopicDoc.ref, \"sections\"));\n//           const sections = [];\n//           for (const sectionDoc of sectionsSnapshot.docs) {\n//             const questionsSnapshot = await getDocs(collection(sectionDoc.ref, \"questions\"));\n//             const questions = questionsSnapshot.docs.map((doc) => doc.data());\n//             sections.push({ name: sectionDoc.id, questions });\n//           }\n//           subtopics.push({ name: subtopicDoc.id, sections });\n//         }\n//         topics.push({ name: topicDoc.id, subtopics });\n//       }\n//       layers.push({ name: layerDoc.id, topics });\n//     }\n//     return { layers };\n//   };\n\n//   // Navigate through layers, topics, subtopics, and sections\n//   const handleNext = () => {\n//     if (currentSectionIndex < data.layers[currentLayerIndex].topics[currentTopicIndex].subtopics[currentSubtopicIndex].sections.length - 1) {\n//       setSectionIndex((prev) => prev + 1);\n//     } else if (currentSubtopicIndex < data.layers[currentLayerIndex].topics[currentTopicIndex].subtopics.length - 1) {\n//       setSectionIndex(0);\n//       setSubtopicIndex((prev) => prev + 1);\n//     } else if (currentTopicIndex < data.layers[currentLayerIndex].topics.length - 1) {\n//       setSectionIndex(0);\n//       setSubtopicIndex(0);\n//       setTopicIndex((prev) => prev + 1);\n//     } else if (currentLayerIndex < data.layers.length - 1) {\n//       setSectionIndex(0);\n//       setSubtopicIndex(0);\n//       setTopicIndex(0);\n//       setLayerIndex((prev) => prev + 1);\n//     } else {\n//       console.log(\"Questionnaire completed!\");\n//       navigate(\"/score\", { state: { responses, jsonData: data } });\n//     }\n//   };\n\n//   if (!data) return <div>Loading...</div>;\n\n//   const layer = data.layers[currentLayerIndex];\n//   const topic = layer.topics[currentTopicIndex];\n//   const subtopic = topic.subtopics[currentSubtopicIndex];\n//   const section = subtopic.sections[currentSectionIndex];\n\n//   const handleResponseChange = (questionName, answer) => {\n//     setResponses((prevResponses) => ({\n//       ...prevResponses,\n//       [questionName]: answer,\n//     }));\n//   };\n\n//   return (\n//     <div className=\"panel\">\n//       <div className=\"panel-header\">\n//         <h2>Layer: {layer.name}</h2>\n//         <h3>Topic: {topic.name}</h3>\n//         <h4>Subtopic: {subtopic.name}</h4>\n//         <h5>Section: {section.name}</h5>\n//       </div>\n//       <div className=\"panel-body\">\n//         {section.questions.map((question, index) => (\n//           <div key={index} className=\"question-panel\">\n//             <p><strong>{question.name}</strong></p>\n//             <div className=\"buttons\">\n//               <button onClick={() => handleResponseChange(question.name, \"Yes\")}>Yes</button>\n//               <button onClick={() => handleResponseChange(question.name, \"No\")}>No</button>\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n//       <button className=\"next-button\" onClick={handleNext}>\n//         Next\n//       </button>\n//     </div>\n//   );\n// }\n\n// export default QuestionnairePage;\n\n// import React, { useState, useEffect } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import \"../styles/Questionnaire.css\";\n\n// function QuestionnairePage() {\n//   const [data, setData] = useState(null);\n//   const [currentLayerIndex, setLayerIndex] = useState(0);\n//   const [currentTopicIndex, setTopicIndex] = useState(0);\n//   const [currentSubtopicIndex, setSubtopicIndex] = useState(0);\n//   const [currentSectionIndex, setSectionIndex] = useState(0);\n//   const [responses, setResponses] = useState({});\n//   const navigate = useNavigate();\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const response = await fetch(\"/questionnaireData.json\");\n//         const jsonData = await response.json();\n//         setData(jsonData);\n//       } catch (error) {\n//         console.error(\"Error loading JSON data:\", error);\n//       }\n//     };\n\n//     fetchData();\n//   }, []);\n\n//   // Ensure data and indices are defined before accessing\n//   if (!data || !data.layers || !data.layers[currentLayerIndex]) {\n//     console.log(\"Error: Data, layers, or current layer is missing.\");\n//     return <div>Loading...</div>;\n//   }\n\n//   const layer = data.layers[currentLayerIndex];\n//   const topic = layer.topics[currentTopicIndex];\n//   const subtopic = topic?.subtopics?.[currentSubtopicIndex];\n//   const section = subtopic?.sections?.[currentSectionIndex];\n\n//   console.log(\"Layer data:\", layer);\n//   console.log(\"Topic data:\", topic);\n//   console.log(\"Subtopic data:\", subtopic);\n//   console.log(\"Section data:\", section);\n\n//   if (!subtopic || !section) {\n//     console.log(\"Error: Subtopic or section is missing.\");\n//     return <div>Loading...</div>;\n//   }\n\n//   const handleResponseChange = (questionName, answer) => {\n//     setResponses((prevResponses) => ({\n//       ...prevResponses,\n//       [questionName]: answer,\n//     }));\n//   };\n\n//   const handleNext = () => {\n//     if (currentSectionIndex < subtopic.sections.length - 1) {\n//       // Move to the next section in the same subtopic\n//       setSectionIndex((prev) => prev + 1);\n//     } else if (currentSubtopicIndex < topic.subtopics.length - 1) {\n//       // Reset section index and move to the next subtopic\n//       setSectionIndex(0);\n//       setSubtopicIndex((prev) => prev + 1);\n//     } else if (currentTopicIndex < layer.topics.length - 1) {\n//       // Reset subtopic and section indices, and move to the next topic\n//       setSubtopicIndex(0);\n//       setSectionIndex(0);\n//       setTopicIndex((prev) => prev + 1);\n//     } else if (currentLayerIndex < data.layers.length - 1) {\n//       // Reset topic, subtopic, and section indices, and move to the next layer\n//       setTopicIndex(0);\n//       setSubtopicIndex(0);\n//       setSectionIndex(0);\n//       setLayerIndex((prev) => prev + 1);\n//     } else {\n//       // Questionnaire is completed\n//       console.log(\"Questionnaire completed\");\n//       navigate(\"/score\", { state: { responses, jsonData: data } });\n//     }\n//   };\n\n//   return (\n//     <div className=\"panel\">\n//       <div className=\"panel-header\">\n//         <h2>Layer: {layer.name}</h2>\n//         <h3>Topic: {topic.name}</h3>\n//         <h4>Subtopic: {subtopic.name}</h4>\n//         <h5>Section: {section.name}</h5>\n//       </div>\n\n//       <div className=\"panel-body\">\n//         {section.questions.map((question, index) => (\n//           <div key={index} className=\"question-panel\">\n//             <p><strong>{question.name}</strong></p>\n//             <div className=\"buttons\">\n//               <button onClick={() => handleResponseChange(question.name, \"Yes\")}>\n//                 Yes\n//               </button>\n//               <button onClick={() => handleResponseChange(question.name, \"No\")}>\n//                 No\n//               </button>\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n\n//       <button className=\"next-button\" onClick={handleNext}>\n//         Next\n//       </button>\n//     </div>\n//   );\n// }\n\n// export default QuestionnairePage;\n\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"../styles/Questionnaire.css\";\nimport { db } from \"../firebase/firebase.js\"; // Import Firestore instance\nimport { collection, doc, setDoc, getDocs } from \"firebase/firestore\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction QuestionnairePage() {\n  _s();\n  const [data, setData] = useState(null);\n  const [currentLayerIndex, setLayerIndex] = useState(0);\n  const [currentTopicIndex, setTopicIndex] = useState(0);\n  const [currentSubtopicIndex, setSubtopicIndex] = useState(0);\n  const [currentSectionIndex, setSectionIndex] = useState(0); // New state for section\n  const [responses, setResponses] = useState({});\n  const navigate = useNavigate();\n  const sanitizeName = name => name.replace(/[^a-zA-Z0-9]/g, \"_\");\n  const addDataToFirestore = useCallback(async jsonData => {\n    try {\n      const layers = jsonData.layers;\n      for (let i = 0; i < layers.length; i++) {\n        const layer = layers[i];\n        // Step 1: Create a layer\n        const layerRef = doc(collection(db, \"layers\"), layer.name); // Use original name as document ID\n        await setDoc(layerRef, {\n          name: layer.name,\n          order: i\n        }); // Store original name + order\n\n        for (let j = 0; j < layer.topics.length; j++) {\n          const topic = layer.topics[j];\n          // Step 2: Create topics under each layer\n          const topicRef = doc(collection(layerRef, \"topics\"), topic.name);\n          await setDoc(topicRef, {\n            name: topic.name,\n            order: j\n          });\n          for (let k = 0; k < topic.subtopics.length; k++) {\n            const subtopic = topic.subtopics[k];\n            // Step 3: Create subtopics under each topic\n            const subtopicRef = doc(collection(topicRef, \"subtopics\"), subtopic.name);\n            await setDoc(subtopicRef, {\n              name: subtopic.name,\n              order: k\n            });\n            for (let l = 0; l < subtopic.sections.length; l++) {\n              const section = subtopic.sections[l];\n              // Step 4: Create sections under each subtopic\n              const sectionRef = doc(collection(subtopicRef, \"sections\"), section.name);\n              await setDoc(sectionRef, {\n                name: section.name,\n                order: l\n              });\n              for (let m = 0; m < section.questions.length; m++) {\n                const question = section.questions[m];\n                // Step 5: Create questions under each section\n                const questionRef = doc(collection(sectionRef, \"questions\"), question.name);\n                await setDoc(questionRef, {\n                  name: question.name,\n                  info: question.info,\n                  good_point: question.good_point,\n                  scope_for_improvement: question.scope_for_improvement,\n                  mandatory: question.mandatory,\n                  tags: question.tags,\n                  order: m\n                });\n              }\n            }\n          }\n        }\n      }\n      console.log(\"Data successfully added to Firestore!\");\n    } catch (error) {\n      console.error(\"Error adding data to Firestore:\", error);\n    }\n  }, []);\n  const getFirestoreData = async layersSnapshot => {\n    const layers = [];\n    for (const layerDoc of layersSnapshot.docs) {\n      const layerData = layerDoc.data();\n      const topicsSnapshot = await getDocs(collection(layerDoc.ref, \"topics\"));\n      const topics = [];\n      for (const topicDoc of topicsSnapshot.docs) {\n        const topicData = topicDoc.data();\n        const subtopicsSnapshot = await getDocs(collection(topicDoc.ref, \"subtopics\"));\n        const subtopics = [];\n        for (const subtopicDoc of subtopicsSnapshot.docs) {\n          const subtopicData = subtopicDoc.data();\n          const sectionsSnapshot = await getDocs(collection(subtopicDoc.ref, \"sections\"));\n          const sections = [];\n          for (const sectionDoc of sectionsSnapshot.docs) {\n            const sectionData = sectionDoc.data();\n            const questionsSnapshot = await getDocs(collection(sectionDoc.ref, \"questions\"));\n            const questions = questionsSnapshot.docs.map(doc => doc.data()).sort((a, b) => a.order - b.order); // Sort questions by order\n            sections.push({\n              ...sectionData,\n              questions\n            });\n          }\n          sections.sort((a, b) => a.order - b.order); // Sort sections by order\n          subtopics.push({\n            ...subtopicData,\n            sections\n          });\n        }\n        subtopics.sort((a, b) => a.order - b.order); // Sort subtopics by order\n        topics.push({\n          ...topicData,\n          subtopics\n        });\n      }\n      topics.sort((a, b) => a.order - b.order); // Sort topics by order\n      layers.push({\n        ...layerData,\n        topics\n      });\n    }\n    layers.sort((a, b) => a.order - b.order); // Sort layers by order\n    return {\n      layers\n    };\n  };\n  if (!data) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 409,\n    columnNumber: 21\n  }, this);\n  const layer = data.layers[currentLayerIndex];\n  const topic = layer.topics[currentTopicIndex];\n  const subtopic = topic.subtopics[currentSubtopicIndex];\n  const section = subtopic.sections[currentSectionIndex];\n  const handleResponseChange = (questionName, answer) => {\n    setResponses(prevResponses => ({\n      ...prevResponses,\n      [questionName]: answer\n    }));\n  };\n  const handleNext = () => {\n    if (currentSectionIndex < subtopic.sections.length - 1) {\n      setSectionIndex(currentSectionIndex + 1); // Move to next section\n    } else if (currentSubtopicIndex < topic.subtopics.length - 1) {\n      setSectionIndex(0);\n      setSubtopicIndex(currentSubtopicIndex + 1);\n    } else if (currentTopicIndex < layer.topics.length - 1) {\n      setSectionIndex(0);\n      setSubtopicIndex(0);\n      setTopicIndex(currentTopicIndex + 1);\n    } else if (currentLayerIndex < data.layers.length - 1) {\n      setLayerIndex(currentLayerIndex + 1);\n      setSectionIndex(0);\n      setTopicIndex(0);\n      setSubtopicIndex(0);\n    } else {\n      console.log(\"Questionnaire completed\");\n      navigate(\"/score\", {\n        state: {\n          responses,\n          jsonData: data\n        }\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"panel\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"panel-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Layer: \", layer.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Topic: \", topic.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Subtopic: \", subtopic.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: [\"Section: \", section.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 446,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"panel-body\",\n      children: section.questions.map((question, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: question.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 456,\n            columnNumber: 16\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 456,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"buttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleResponseChange(question.name, \"Yes\"),\n            children: \"Yes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 458,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleResponseChange(question.name, \"No\"),\n            children: \"No\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 461,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 457,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 453,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"next-button\",\n      onClick: handleNext,\n      children: \"Next\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 469,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 445,\n    columnNumber: 5\n  }, this);\n}\n_s(QuestionnairePage, \"/H8YU40RC6LYY6wUeZ95rmfE/lM=\", false, function () {\n  return [useNavigate];\n});\n_c = QuestionnairePage;\nexport default QuestionnairePage;\nvar _c;\n$RefreshReg$(_c, \"QuestionnairePage\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useNavigate","db","collection","doc","setDoc","getDocs","jsxDEV","_jsxDEV","QuestionnairePage","_s","data","setData","currentLayerIndex","setLayerIndex","currentTopicIndex","setTopicIndex","currentSubtopicIndex","setSubtopicIndex","currentSectionIndex","setSectionIndex","responses","setResponses","navigate","sanitizeName","name","replace","addDataToFirestore","jsonData","layers","i","length","layer","layerRef","order","j","topics","topic","topicRef","k","subtopics","subtopic","subtopicRef","l","sections","section","sectionRef","m","questions","question","questionRef","info","good_point","scope_for_improvement","mandatory","tags","console","log","error","getFirestoreData","layersSnapshot","layerDoc","docs","layerData","topicsSnapshot","ref","topicDoc","topicData","subtopicsSnapshot","subtopicDoc","subtopicData","sectionsSnapshot","sectionDoc","sectionData","questionsSnapshot","map","sort","a","b","push","children","fileName","_jsxFileName","lineNumber","columnNumber","handleResponseChange","questionName","answer","prevResponses","handleNext","state","className","index","onClick","_c","$RefreshReg$"],"sources":["/Users/balajibabasahebsankapal/Desktop/Risk/web-app/src/components/Questionnaire.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import \"../styles/Questionnaire.css\";\n// import { db } from \"../firebase/firebase.js\"; // Import Firestore instance\n// import { collection, doc, setDoc, getDocs } from \"firebase/firestore\";\n\n// function QuestionnairePage() {\n//   const [data, setData] = useState(null);\n//   const [currentLayerIndex, setLayerIndex] = useState(0);\n//   const [currentTopicIndex, setTopicIndex] = useState(0);\n//   const [currentSubtopicIndex, setSubtopicIndex] = useState(0);\n//   const [currentSectionIndex, setSectionIndex] = useState(0);\n//   const [responses, setResponses] = useState({});\n//   const navigate = useNavigate();\n\n//   useEffect(() => {\n//     const fetchDataFromFirestore = async () => {\n//       try {\n//         const layersCollection = collection(db, \"layers\");\n//         const layersSnapshot = await getDocs(layersCollection);\n\n//         if (layersSnapshot.empty) {\n//           console.log(\"Firestore is empty. Uploading data...\");\n//           await uploadInitialData();\n//         }\n\n//         const firestoreData = await getFirestoreData(layersSnapshot);\n//         setData(firestoreData); // Load data from Firestore\n//       } catch (error) {\n//         console.error(\"Error fetching Firestore data:\", error);\n//       }\n//     };\n\n//     fetchDataFromFirestore();\n//   }, []);\n\n//   // Function to upload initial data to Firestore\n//   const uploadInitialData = async (jsonData) => {\n//     try {\n//       const layers = jsonData.layers;\n  \n//       for (const layer of layers) {\n//         const layerRef = doc(collection(db, \"layers\"), layer.name);\n//         await setDoc(layerRef, { name: layer.name });\n  \n//         for (const topic of layer.topics) {\n//           const topicRef = doc(collection(layerRef, \"topics\"), topic.name);\n//           await setDoc(topicRef, { name: topic.name });\n  \n//           for (const subtopic of topic.subtopics) {\n//             const subtopicRef = doc(collection(topicRef, \"subtopics\"), subtopic.name);\n//             await setDoc(subtopicRef, { name: subtopic.name });\n  \n//             // Check if sections exist\n//             if (subtopic.sections && subtopic.sections.length > 0) {\n//               for (const section of subtopic.sections) {\n//                 const sectionRef = doc(collection(subtopicRef, \"sections\"), section.name);\n//                 await setDoc(sectionRef, { name: section.name });\n  \n//                 // Check if questions exist\n//                 if (section.questions && section.questions.length > 0) {\n//                   for (const question of section.questions) {\n//                     const questionRef = doc(collection(sectionRef, \"questions\"), question.name);\n//                     await setDoc(questionRef, {\n//                       name: question.name,\n//                       info: question.info || \"\",\n//                       good_point: question.good_point || \"\",\n//                       scope_for_improvement: question.scope_for_improvement || \"\",\n//                       mandatory: question.mandatory || false,\n//                       tags: question.tags || [],\n//                     });\n//                   }\n//                 } else {\n//                   console.warn(`No questions found for section: ${section.name}`);\n//                 }\n//               }\n//             } else {\n//               console.warn(`No sections found for subtopic: ${subtopic.name}`);\n//             }\n//           }\n//         }\n//       }\n  \n//       console.log(\"Data successfully added to Firestore!\");\n//     } catch (error) {\n//       console.error(\"Error adding data to Firestore:\", error);\n//     }\n//   };\n  \n\n//   // Function to fetch data from Firestore\n//   const getFirestoreData = async (layersSnapshot) => {\n//     const layers = [];\n//     for (const layerDoc of layersSnapshot.docs) {\n//       const topicsSnapshot = await getDocs(collection(layerDoc.ref, \"topics\"));\n//       const topics = [];\n//       for (const topicDoc of topicsSnapshot.docs) {\n//         const subtopicsSnapshot = await getDocs(collection(topicDoc.ref, \"subtopics\"));\n//         const subtopics = [];\n//         for (const subtopicDoc of subtopicsSnapshot.docs) {\n//           const sectionsSnapshot = await getDocs(collection(subtopicDoc.ref, \"sections\"));\n//           const sections = [];\n//           for (const sectionDoc of sectionsSnapshot.docs) {\n//             const questionsSnapshot = await getDocs(collection(sectionDoc.ref, \"questions\"));\n//             const questions = questionsSnapshot.docs.map((doc) => doc.data());\n//             sections.push({ name: sectionDoc.id, questions });\n//           }\n//           subtopics.push({ name: subtopicDoc.id, sections });\n//         }\n//         topics.push({ name: topicDoc.id, subtopics });\n//       }\n//       layers.push({ name: layerDoc.id, topics });\n//     }\n//     return { layers };\n//   };\n\n//   // Navigate through layers, topics, subtopics, and sections\n//   const handleNext = () => {\n//     if (currentSectionIndex < data.layers[currentLayerIndex].topics[currentTopicIndex].subtopics[currentSubtopicIndex].sections.length - 1) {\n//       setSectionIndex((prev) => prev + 1);\n//     } else if (currentSubtopicIndex < data.layers[currentLayerIndex].topics[currentTopicIndex].subtopics.length - 1) {\n//       setSectionIndex(0);\n//       setSubtopicIndex((prev) => prev + 1);\n//     } else if (currentTopicIndex < data.layers[currentLayerIndex].topics.length - 1) {\n//       setSectionIndex(0);\n//       setSubtopicIndex(0);\n//       setTopicIndex((prev) => prev + 1);\n//     } else if (currentLayerIndex < data.layers.length - 1) {\n//       setSectionIndex(0);\n//       setSubtopicIndex(0);\n//       setTopicIndex(0);\n//       setLayerIndex((prev) => prev + 1);\n//     } else {\n//       console.log(\"Questionnaire completed!\");\n//       navigate(\"/score\", { state: { responses, jsonData: data } });\n//     }\n//   };\n\n//   if (!data) return <div>Loading...</div>;\n\n//   const layer = data.layers[currentLayerIndex];\n//   const topic = layer.topics[currentTopicIndex];\n//   const subtopic = topic.subtopics[currentSubtopicIndex];\n//   const section = subtopic.sections[currentSectionIndex];\n\n//   const handleResponseChange = (questionName, answer) => {\n//     setResponses((prevResponses) => ({\n//       ...prevResponses,\n//       [questionName]: answer,\n//     }));\n//   };\n\n//   return (\n//     <div className=\"panel\">\n//       <div className=\"panel-header\">\n//         <h2>Layer: {layer.name}</h2>\n//         <h3>Topic: {topic.name}</h3>\n//         <h4>Subtopic: {subtopic.name}</h4>\n//         <h5>Section: {section.name}</h5>\n//       </div>\n//       <div className=\"panel-body\">\n//         {section.questions.map((question, index) => (\n//           <div key={index} className=\"question-panel\">\n//             <p><strong>{question.name}</strong></p>\n//             <div className=\"buttons\">\n//               <button onClick={() => handleResponseChange(question.name, \"Yes\")}>Yes</button>\n//               <button onClick={() => handleResponseChange(question.name, \"No\")}>No</button>\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n//       <button className=\"next-button\" onClick={handleNext}>\n//         Next\n//       </button>\n//     </div>\n//   );\n// }\n\n// export default QuestionnairePage;\n\n// import React, { useState, useEffect } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import \"../styles/Questionnaire.css\";\n\n// function QuestionnairePage() {\n//   const [data, setData] = useState(null);\n//   const [currentLayerIndex, setLayerIndex] = useState(0);\n//   const [currentTopicIndex, setTopicIndex] = useState(0);\n//   const [currentSubtopicIndex, setSubtopicIndex] = useState(0);\n//   const [currentSectionIndex, setSectionIndex] = useState(0);\n//   const [responses, setResponses] = useState({});\n//   const navigate = useNavigate();\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const response = await fetch(\"/questionnaireData.json\");\n//         const jsonData = await response.json();\n//         setData(jsonData);\n//       } catch (error) {\n//         console.error(\"Error loading JSON data:\", error);\n//       }\n//     };\n\n//     fetchData();\n//   }, []);\n\n//   // Ensure data and indices are defined before accessing\n//   if (!data || !data.layers || !data.layers[currentLayerIndex]) {\n//     console.log(\"Error: Data, layers, or current layer is missing.\");\n//     return <div>Loading...</div>;\n//   }\n\n//   const layer = data.layers[currentLayerIndex];\n//   const topic = layer.topics[currentTopicIndex];\n//   const subtopic = topic?.subtopics?.[currentSubtopicIndex];\n//   const section = subtopic?.sections?.[currentSectionIndex];\n\n//   console.log(\"Layer data:\", layer);\n//   console.log(\"Topic data:\", topic);\n//   console.log(\"Subtopic data:\", subtopic);\n//   console.log(\"Section data:\", section);\n\n//   if (!subtopic || !section) {\n//     console.log(\"Error: Subtopic or section is missing.\");\n//     return <div>Loading...</div>;\n//   }\n\n//   const handleResponseChange = (questionName, answer) => {\n//     setResponses((prevResponses) => ({\n//       ...prevResponses,\n//       [questionName]: answer,\n//     }));\n//   };\n\n//   const handleNext = () => {\n//     if (currentSectionIndex < subtopic.sections.length - 1) {\n//       // Move to the next section in the same subtopic\n//       setSectionIndex((prev) => prev + 1);\n//     } else if (currentSubtopicIndex < topic.subtopics.length - 1) {\n//       // Reset section index and move to the next subtopic\n//       setSectionIndex(0);\n//       setSubtopicIndex((prev) => prev + 1);\n//     } else if (currentTopicIndex < layer.topics.length - 1) {\n//       // Reset subtopic and section indices, and move to the next topic\n//       setSubtopicIndex(0);\n//       setSectionIndex(0);\n//       setTopicIndex((prev) => prev + 1);\n//     } else if (currentLayerIndex < data.layers.length - 1) {\n//       // Reset topic, subtopic, and section indices, and move to the next layer\n//       setTopicIndex(0);\n//       setSubtopicIndex(0);\n//       setSectionIndex(0);\n//       setLayerIndex((prev) => prev + 1);\n//     } else {\n//       // Questionnaire is completed\n//       console.log(\"Questionnaire completed\");\n//       navigate(\"/score\", { state: { responses, jsonData: data } });\n//     }\n//   };\n\n//   return (\n//     <div className=\"panel\">\n//       <div className=\"panel-header\">\n//         <h2>Layer: {layer.name}</h2>\n//         <h3>Topic: {topic.name}</h3>\n//         <h4>Subtopic: {subtopic.name}</h4>\n//         <h5>Section: {section.name}</h5>\n//       </div>\n\n//       <div className=\"panel-body\">\n//         {section.questions.map((question, index) => (\n//           <div key={index} className=\"question-panel\">\n//             <p><strong>{question.name}</strong></p>\n//             <div className=\"buttons\">\n//               <button onClick={() => handleResponseChange(question.name, \"Yes\")}>\n//                 Yes\n//               </button>\n//               <button onClick={() => handleResponseChange(question.name, \"No\")}>\n//                 No\n//               </button>\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n\n//       <button className=\"next-button\" onClick={handleNext}>\n//         Next\n//       </button>\n//     </div>\n//   );\n// }\n\n// export default QuestionnairePage;\n\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"../styles/Questionnaire.css\";\nimport { db } from \"../firebase/firebase.js\"; // Import Firestore instance\nimport { collection, doc, setDoc, getDocs } from \"firebase/firestore\";\n\nfunction QuestionnairePage() {\n  const [data, setData] = useState(null);\n  const [currentLayerIndex, setLayerIndex] = useState(0);\n  const [currentTopicIndex, setTopicIndex] = useState(0);\n  const [currentSubtopicIndex, setSubtopicIndex] = useState(0);\n  const [currentSectionIndex, setSectionIndex] = useState(0); // New state for section\n  const [responses, setResponses] = useState({});\n  const navigate = useNavigate();\n\n  const sanitizeName = (name) => name.replace(/[^a-zA-Z0-9]/g, \"_\");\n\n  const addDataToFirestore = useCallback(async (jsonData) => {\n    try {\n      const layers = jsonData.layers;\n  \n      for (let i = 0; i < layers.length; i++) {\n        const layer = layers[i];\n        // Step 1: Create a layer\n        const layerRef = doc(collection(db, \"layers\"), layer.name); // Use original name as document ID\n        await setDoc(layerRef, { name: layer.name, order: i }); // Store original name + order\n  \n        for (let j = 0; j < layer.topics.length; j++) {\n          const topic = layer.topics[j];\n          // Step 2: Create topics under each layer\n          const topicRef = doc(collection(layerRef, \"topics\"), topic.name);\n          await setDoc(topicRef, { name: topic.name, order: j });\n  \n          for (let k = 0; k < topic.subtopics.length; k++) {\n            const subtopic = topic.subtopics[k];\n            // Step 3: Create subtopics under each topic\n            const subtopicRef = doc(collection(topicRef, \"subtopics\"), subtopic.name);\n            await setDoc(subtopicRef, { name: subtopic.name, order: k });\n  \n            for (let l = 0; l < subtopic.sections.length; l++) {\n              const section = subtopic.sections[l];\n              // Step 4: Create sections under each subtopic\n              const sectionRef = doc(collection(subtopicRef, \"sections\"), section.name);\n              await setDoc(sectionRef, { name: section.name, order: l });\n  \n              for (let m = 0; m < section.questions.length; m++) {\n                const question = section.questions[m];\n                // Step 5: Create questions under each section\n                const questionRef = doc(collection(sectionRef, \"questions\"), question.name);\n                await setDoc(questionRef, {\n                  name: question.name,\n                  info: question.info,\n                  good_point: question.good_point,\n                  scope_for_improvement: question.scope_for_improvement,\n                  mandatory: question.mandatory,\n                  tags: question.tags,\n                  order: m,\n                });\n              }\n            }\n          }\n        }\n      }\n  \n      console.log(\"Data successfully added to Firestore!\");\n    } catch (error) {\n      console.error(\"Error adding data to Firestore:\", error);\n    }\n  }, []);\n  \n\n  const getFirestoreData = async (layersSnapshot) => {\n    const layers = [];\n    for (const layerDoc of layersSnapshot.docs) {\n      const layerData = layerDoc.data();\n      const topicsSnapshot = await getDocs(collection(layerDoc.ref, \"topics\"));\n      const topics = [];\n      for (const topicDoc of topicsSnapshot.docs) {\n        const topicData = topicDoc.data();\n        const subtopicsSnapshot = await getDocs(\n          collection(topicDoc.ref, \"subtopics\")\n        );\n        const subtopics = [];\n        for (const subtopicDoc of subtopicsSnapshot.docs) {\n          const subtopicData = subtopicDoc.data();\n          const sectionsSnapshot = await getDocs(\n            collection(subtopicDoc.ref, \"sections\")\n          );\n          const sections = [];\n          for (const sectionDoc of sectionsSnapshot.docs) {\n            const sectionData = sectionDoc.data();\n            const questionsSnapshot = await getDocs(\n              collection(sectionDoc.ref, \"questions\")\n            );\n            const questions = questionsSnapshot.docs\n              .map((doc) => doc.data())\n              .sort((a, b) => a.order - b.order); // Sort questions by order\n            sections.push({ ...sectionData, questions });\n          }\n          sections.sort((a, b) => a.order - b.order); // Sort sections by order\n          subtopics.push({ ...subtopicData, sections });\n        }\n        subtopics.sort((a, b) => a.order - b.order); // Sort subtopics by order\n        topics.push({ ...topicData, subtopics });\n      }\n      topics.sort((a, b) => a.order - b.order); // Sort topics by order\n      layers.push({ ...layerData, topics });\n    }\n    layers.sort((a, b) => a.order - b.order); // Sort layers by order\n    return { layers };\n  };\n  \n\n  if (!data) return <div>Loading...</div>;\n\n  const layer = data.layers[currentLayerIndex];\n  const topic = layer.topics[currentTopicIndex];\n  const subtopic = topic.subtopics[currentSubtopicIndex];\n  const section = subtopic.sections[currentSectionIndex];\n\n  const handleResponseChange = (questionName, answer) => {\n    setResponses((prevResponses) => ({\n      ...prevResponses,\n      [questionName]: answer,\n    }));\n  };\n\n  const handleNext = () => {\n    if (currentSectionIndex < subtopic.sections.length - 1) {\n      setSectionIndex(currentSectionIndex + 1); // Move to next section\n    } else if (currentSubtopicIndex < topic.subtopics.length - 1) {\n      setSectionIndex(0);\n      setSubtopicIndex(currentSubtopicIndex + 1);\n    } else if (currentTopicIndex < layer.topics.length - 1) {\n      setSectionIndex(0);\n      setSubtopicIndex(0);\n      setTopicIndex(currentTopicIndex + 1);\n    } else if (currentLayerIndex < data.layers.length - 1) {\n      setLayerIndex(currentLayerIndex + 1);\n      setSectionIndex(0);\n      setTopicIndex(0);\n      setSubtopicIndex(0);\n    } else {\n      console.log(\"Questionnaire completed\");\n      navigate(\"/score\", { state: { responses, jsonData: data } });\n    }\n  };\n\n  return (\n    <div className=\"panel\">\n      <div className=\"panel-header\">\n        <h2>Layer: {layer.name}</h2>\n        <h3>Topic: {topic.name}</h3>\n        <h4>Subtopic: {subtopic.name}</h4>\n        <h5>Section: {section.name}</h5>\n      </div>\n\n      <div className=\"panel-body\">\n        {section.questions.map((question, index) => (\n          <div key={index} className=\"question-panel\">\n            <p><strong>{question.name}</strong></p>\n            <div className=\"buttons\">\n              <button onClick={() => handleResponseChange(question.name, \"Yes\")}>\n                Yes\n              </button>\n              <button onClick={() => handleResponseChange(question.name, \"No\")}>\n                No\n              </button>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      <button className=\"next-button\" onClick={handleNext}>\n        Next\n      </button>\n    </div>\n  );\n}\n\nexport default QuestionnairePage;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}