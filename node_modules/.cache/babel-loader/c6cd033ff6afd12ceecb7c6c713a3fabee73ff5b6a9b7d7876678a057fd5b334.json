{"ast":null,"code":"var _jsxFileName = \"/Users/balajibabasahebsankapal/Desktop/Risk/web-app/src/components/Questionnaire.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n// import \"../styles/Questionnaire.css\";\nimport { db } from \"../firebase/firebase.js\"; // Import Firestore instance\nimport { collection, doc, addDoc, setDoc, getDocs, updateDoc, deleteDoc, arrayUnion } from \"firebase/firestore\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction QuestionnairePage({\n  userId\n}) {\n  _s();\n  const [data, setData] = useState(null);\n  const [currentLayerIndex, setLayerIndex] = useState(0);\n  const [currentTopicIndex, setTopicIndex] = useState(0);\n  const [currentSubtopicIndex, setSubtopicIndex] = useState(0);\n  const [currentSectionIndex, setSectionIndex] = useState(0);\n  const [currentQuestionIndex, setQuestionIndex] = useState(0);\n  const [responses, setResponses] = useState([]);\n  const [resp, setResp] = useState({});\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [animationDirection, setAnimationDirection] = useState(\"slide-in\");\n  const navigate = useNavigate();\n  const clearSubcollection = async (userId, subcollectionName) => {\n    try {\n      const userRef = doc(db, \"users\", userId);\n      const responsesRef = collection(userRef, subcollectionName);\n\n      // Check if the subcollection has any documents\n      const querySnapshot = await getDocs(responsesRef);\n      if (querySnapshot.empty) {\n        console.log(\"No responses to clear.\"); // Subcollection doesn't exist or is empty\n        return;\n      }\n\n      // Loop through and delete each document in the subcollection\n      const deletePromises = querySnapshot.docs.map(doc => deleteDoc(doc.ref));\n      await Promise.all(deletePromises);\n      console.log(\"Responses subcollection cleared successfully.\");\n    } catch (error) {\n      console.error(\"Error clearing responses subcollection:\", error);\n    }\n  };\n  useEffect(() => {\n    const clearResponsesOnInit = async () => {\n      await clearSubcollection(userId, \"responses\");\n    };\n    clearResponsesOnInit();\n  }, [userId]);\n  const sanitizeName = name => name.replace(/[^a-zA-Z0-9]/g, \"_\");\n  const extractFirestoreData = doc => {\n    const rawData = doc.data();\n\n    // Extract Firestore fields and handle nested `integerValue` or `stringValue`\n    const parsedData = Object.entries(rawData).reduce((acc, [key, value]) => {\n      if (value.integerValue !== undefined) {\n        acc[key] = parseInt(value.integerValue, 10); // Convert to number\n      } else if (value.stringValue !== undefined) {\n        acc[key] = value.stringValue;\n      } else {\n        acc[key] = value; // Add as-is if no special handling required\n      }\n      return acc;\n    }, {});\n    return parsedData;\n  };\n  const addDataToFirestore = useCallback(async jsonData => {\n    try {\n      const layers = jsonData.layers;\n      for (let i = 0; i < layers.length; i++) {\n        const layer = layers[i];\n        const layerRef = doc(collection(db, \"layers\"), sanitizeName(layer.name));\n        await setDoc(layerRef, {\n          name: layer.name,\n          order: i\n        });\n        for (let j = 0; j < layer.topics.length; j++) {\n          const topic = layer.topics[j];\n          const topicRef = doc(collection(layerRef, \"topics\"), sanitizeName(topic.name));\n          await setDoc(topicRef, {\n            name: topic.name,\n            order: j\n          });\n          for (let k = 0; k < topic.subtopics.length; k++) {\n            const subtopic = topic.subtopics[k];\n            const subtopicRef = doc(collection(topicRef, \"subtopics\"), sanitizeName(subtopic.name));\n            await setDoc(subtopicRef, {\n              name: subtopic.name,\n              order: k\n            });\n            for (let l = 0; l < subtopic.sections.length; l++) {\n              const section = subtopic.sections[l];\n              const sectionRef = doc(collection(subtopicRef, \"sections\"), sanitizeName(section.name));\n              await setDoc(sectionRef, {\n                name: section.name,\n                order: l\n              });\n              for (let m = 0; m < section.questions.length; m++) {\n                const question = section.questions[m];\n                const questionRef = doc(collection(sectionRef, \"questions\"), sanitizeName(question.name));\n                await setDoc(questionRef, {\n                  name: question.name,\n                  info: question.info,\n                  good_point: question.good_point,\n                  scope_for_improvement: question.scope_for_improvement,\n                  mandatory: question.mandatory,\n                  tags: question.tags,\n                  order: m\n                });\n              }\n            }\n          }\n        }\n      }\n      console.log(\"Data successfully added to Firestore!\");\n    } catch (error) {\n      console.error(\"Error adding data to Firestore:\", error);\n    }\n  }, []);\n  const getFirestoreData = async layersSnapshot => {\n    const layers = [];\n    for (const layerDoc of layersSnapshot.docs) {\n      const layerData = extractFirestoreData(layerDoc);\n      const topicsSnapshot = await getDocs(collection(layerDoc.ref, \"topics\"));\n      const topics = [];\n      for (const topicDoc of topicsSnapshot.docs) {\n        const topicData = topicDoc.data();\n        const subtopicsSnapshot = await getDocs(collection(topicDoc.ref, \"subtopics\"));\n        const subtopics = [];\n        for (const subtopicDoc of subtopicsSnapshot.docs) {\n          const subtopicData = subtopicDoc.data();\n          const sectionsSnapshot = await getDocs(collection(subtopicDoc.ref, \"sections\"));\n          const sections = [];\n          for (const sectionDoc of sectionsSnapshot.docs) {\n            const sectionData = sectionDoc.data();\n            const questionsSnapshot = await getDocs(collection(sectionDoc.ref, \"questions\"));\n            const questions = questionsSnapshot.docs.map(doc => doc.data()).sort((a, b) => a.order - b.order);\n            sections.push({\n              ...sectionData,\n              questions\n            });\n          }\n          sections.sort((a, b) => a.order - b.order); // Sort sections by order\n          subtopics.push({\n            ...subtopicData,\n            sections\n          });\n        }\n        subtopics.sort((a, b) => a.order - b.order); // Sort subtopics by order\n        topics.push({\n          ...topicData,\n          subtopics\n        });\n      }\n      topics.sort((a, b) => a.order - b.order); // Sort topics by order\n      layers.push({\n        ...layerData,\n        topics\n      });\n    }\n    layers.sort((a, b) => a.order - b.order);\n    console.log(layers);\n    return {\n      layers\n    };\n  };\n  useEffect(() => {\n    const fetchDataFromFirestore = async () => {\n      try {\n        const layersCollection = collection(db, \"layers\");\n        const layersSnapshot = await getDocs(layersCollection);\n        if (layersSnapshot.empty) {\n          console.log(\"Firestore is empty. Adding data...\");\n          fetch(\"/questionnaireData.json\").then(resp => resp.json()).then(async jsonData => {\n            await addDataToFirestore(jsonData); // Add JSON to Firestore\n            setData(jsonData); // Set state with the loaded data\n          });\n        } else {\n          console.log(\"Fetching data from Firestore...\");\n          console.log(\"Fetched data1:\", layersSnapshot);\n          const firestoreData = await getFirestoreData(layersSnapshot);\n          console.log(\"Fetched data2:\", firestoreData);\n          setData(firestoreData); // Set state with Firestore data\n        }\n      } catch (error) {\n        console.error(\"Error fetching data from Firestore:\", error);\n      }\n    };\n    fetchDataFromFirestore();\n  }, [addDataToFirestore]);\n  if (!data) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 217,\n    columnNumber: 21\n  }, this);\n  console.log(\"data\", data);\n  const layer = data.layers[currentLayerIndex];\n  const topic = layer.topics[currentTopicIndex];\n  const subtopic = topic.subtopics[currentSubtopicIndex];\n  const section = subtopic.sections[currentSectionIndex];\n  const question = section.questions[currentQuestionIndex];\n  const handleResponseChange = (question, answer) => {\n    // Ensure you are accessing the correct layer, topic, subtopic, section, and question\n    const layer = data.layers[currentLayerIndex];\n    const topic = layer.topics[currentTopicIndex];\n    const subtopic = topic.subtopics[currentSubtopicIndex];\n    const section = subtopic.sections[currentSectionIndex];\n    const questionData = section.questions[currentQuestionIndex];\n    setResponses(prevResponses => [...prevResponses, {\n      layerIndex: layer.order,\n      // Use the 'order' attribute from the layer\n      topicIndex: topic.order,\n      // Use the 'order' attribute from the topic\n      subtopicIndex: subtopic.order,\n      // Use the 'order' attribute from the subtopic\n      sectionIndex: section.order,\n      // Use the 'order' attribute from the section\n      questionIndex: questionData.order,\n      // Use the 'order' attribute from the question\n      answer\n    }]);\n    setSelectedAnswer(answer); // Track the selected answer\n  };\n  const saveResponseToFirebase = async response => {\n    console.log(\"Saving response:\", response); // Log the response to inspect its data\n    try {\n      const userRef = doc(db, \"users\", userId);\n      const responsesRef = collection(userRef, \"responses\");\n\n      // Ensure the response data is valid before saving\n      if (response.questionIndex === undefined) {\n        console.error(\"Invalid questionIndex:\", response); // Log error if undefined\n        return;\n      }\n\n      // Save the response to Firestore\n      await addDoc(responsesRef, {\n        layerIndex: response.layerIndex,\n        topicIndex: response.topicIndex,\n        subtopicIndex: response.subtopicIndex,\n        sectionIndex: response.sectionIndex,\n        questionIndex: response.questionIndex,\n        answer: response.answer\n      });\n      console.log(\"Response saved successfully:\", response);\n    } catch (error) {\n      console.error(\"Error saving response to Firebase:\", error);\n    }\n  };\n  const handleNext = async () => {\n    if (selectedAnswer === null) {\n      // If no answer selected, set answer as \"No\"\n      setSelectedAnswer(\"No\");\n    }\n    if (responses.length === 0) return;\n    const lastResponse = responses[responses.length - 1]; // Get the last response added\n\n    // Save the current response to Firebase\n    await saveResponseToFirebase(lastResponse);\n\n    // Immediately jump to the next question without delay\n    setSelectedAnswer(null); // Reset selected answer for the next question\n\n    if (currentQuestionIndex < section.questions.length - 1) {\n      setQuestionIndex(currentQuestionIndex + 1);\n    } else if (currentSectionIndex < subtopic.sections.length - 1) {\n      setSectionIndex(currentSectionIndex + 1);\n      setQuestionIndex(0);\n    } else if (currentSubtopicIndex < topic.subtopics.length - 1) {\n      setSubtopicIndex(currentSubtopicIndex + 1);\n      setSectionIndex(0);\n      setQuestionIndex(0);\n    } else if (currentTopicIndex < layer.topics.length - 1) {\n      setTopicIndex(currentTopicIndex + 1);\n      setSubtopicIndex(0);\n      setSectionIndex(0);\n      setQuestionIndex(0);\n    } else if (currentLayerIndex < data.layers.length - 1) {\n      setLayerIndex(currentLayerIndex + 1);\n      setTopicIndex(0);\n      setSubtopicIndex(0);\n      setSectionIndex(0);\n      setQuestionIndex(0);\n    } else {\n      var _layerScores$, _layerScores$2, _layerScores$3, _layerScores$4, _layerScores$5;\n      // Calculate Scores and Save to Firebase\n      const totalQuestions = responses.length;\n      const yesCount = responses.filter(response => response.answer === \"Yes\").length;\n\n      // Calculate the total score\n      const totalScore = yesCount / totalQuestions * 100;\n\n      // Initialize layer-wise scores\n      const layerScores = Array(data.layers.length).fill(0);\n      const layerYesCounts = Array(data.layers.length).fill(0);\n      const layerQuestionCounts = Array(data.layers.length).fill(0);\n\n      // Calculate scores for each layer\n      responses.forEach(response => {\n        layerYesCounts[response.layerIndex] += response.answer === \"Yes\" ? 1 : 0;\n        layerQuestionCounts[response.layerIndex] += 1;\n      });\n\n      // Populate scores for each layer\n      layerYesCounts.forEach((yesCount, index) => {\n        layerScores[index] = yesCount / layerQuestionCounts[index] * 100 || 0; // Handle division by zero\n      });\n\n      // Assign layer scores\n      const assessmentData = {\n        dateOfTest: new Date().toLocaleDateString(),\n        timeOfTest: new Date().toLocaleTimeString(),\n        score: totalScore.toFixed(2),\n        // Total score\n        orgScore: ((_layerScores$ = layerScores[0]) === null || _layerScores$ === void 0 ? void 0 : _layerScores$.toFixed(2)) || 0,\n        // Organization level score\n        appScore: ((_layerScores$2 = layerScores[1]) === null || _layerScores$2 === void 0 ? void 0 : _layerScores$2.toFixed(2)) || 0,\n        // Application level score\n        dataScore: ((_layerScores$3 = layerScores[2]) === null || _layerScores$3 === void 0 ? void 0 : _layerScores$3.toFixed(2)) || 0,\n        // Data level score\n        awareScore: ((_layerScores$4 = layerScores[3]) === null || _layerScores$4 === void 0 ? void 0 : _layerScores$4.toFixed(2)) || 0,\n        // Awareness level score\n        polScore: ((_layerScores$5 = layerScores[4]) === null || _layerScores$5 === void 0 ? void 0 : _layerScores$5.toFixed(2)) || 0,\n        // Policies level score\n        riskLevel: totalScore > 90 ? \"Highly Secure\" : totalScore > 70 ? \"Moderately Secure\" : totalScore > 40 ? \"Less Secure\" : \"Critical Stage/Very High Risk\"\n      };\n\n      // Save to Firestore\n\n      try {\n        // Reference to the user's document\n        const userRef = doc(db, \"users\", userId);\n\n        // Update the `logs` array with the new assessment data\n        await updateDoc(userRef, {\n          logs: arrayUnion(assessmentData) // Use arrayUnion to add the new data\n        });\n        console.log(\"Assessment data saved to logs:\", assessmentData);\n      } catch (error) {\n        console.error(\"Error saving assessment data to logs:\", error);\n      }\n\n      // Navigate to the score page\n      console.log(\"Questionnaire completed\");\n      // navigate(\"/score\", { state: { responses, jsonData: data, assessmentData } });\n    }\n  };\n\n  // const handleNext = async () => {\n  //   //if (!selectedAnswer) return; // Ensure an answer is selected before proceeding\n\n  //   const question = section.questions[currentQuestionIndex];\n  //   const response = responses[question.name];\n\n  //   // Save the current response to Firebase\n  //   await saveResponseToFirebase(response);\n\n  //   setAnimationDirection(\"slide-out\");\n  //   setTimeout(() => {\n  //     setSelectedAnswer(null); // Reset selected answer for the next question\n\n  //     if (currentQuestionIndex < section.questions.length - 1) {\n  //       setQuestionIndex(currentQuestionIndex + 1);\n  //     } else if (currentSectionIndex < subtopic.sections.length - 1) {\n  //       setSectionIndex(currentSectionIndex + 1);\n  //       setQuestionIndex(0);\n  //     } else if (currentSubtopicIndex < topic.subtopics.length - 1) {\n  //       setSubtopicIndex(currentSubtopicIndex + 1);\n  //       setSectionIndex(0);\n  //       setQuestionIndex(0);\n  //     } else if (currentTopicIndex < layer.topics.length - 1) {\n  //       setTopicIndex(currentTopicIndex + 1);\n  //       setSubtopicIndex(0);\n  //       setSectionIndex(0);\n  //       setQuestionIndex(0);\n  //     } else if (currentLayerIndex < data.layers.length - 1) {\n  //       setLayerIndex(currentLayerIndex + 1);\n  //       setTopicIndex(0);\n  //       setSubtopicIndex(0);\n  //       setSectionIndex(0);\n  //       setQuestionIndex(0);\n  //     } else {\n  //       console.log(\"Questionnaire completed\");\n  //       navigate(\"/score\", { state: { responses, jsonData: data } });\n  //     }\n  //     setAnimationDirection(\"slide-in\");\n  //   }, 300);\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"panel\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"panel-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: layer.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: topic.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: subtopic.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 424,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"panel-body\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `question-panel ${animationDirection}`,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: question.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 433,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 432,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"buttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: selectedAnswer === \"Yes\" ? \"selected\" : \"\",\n            onClick: () => handleResponseChange(question.name, \"Yes\"),\n            children: \"Yes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 436,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: selectedAnswer === \"No\" ? \"selected\" : \"\",\n            onClick: () => handleResponseChange(question.name, \"No\"),\n            children: \"No\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 442,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 435,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"next-button\"\n          //disabled={!selectedAnswer} // Disable until an answer is selected\n          ,\n          onClick: handleNext,\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 449,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 430,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 423,\n    columnNumber: 5\n  }, this);\n}\n_s(QuestionnairePage, \"Zfl39BEJGV+24122Jqs1GgrfhKM=\", false, function () {\n  return [useNavigate];\n});\n_c = QuestionnairePage;\nexport default QuestionnairePage;\n\n// import React, { useState, useEffect, useCallback } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import \"../styles/Questionnaire.css\";\n// import { db } from \"../firebase/firebase.js\"; // Import Firestore instance\n// import { collection, doc, setDoc, getDocs } from \"firebase/firestore\";\n\n// function QuestionnairePage() {\n//   const [data, setData] = useState(null);\n//   const [currentLayerIndex, setLayerIndex] = useState(0);\n//   const [currentTopicIndex, setTopicIndex] = useState(0);\n//   const [currentSubtopicIndex, setSubtopicIndex] = useState(0);\n//   const [currentSectionIndex, setSectionIndex] = useState(0); // New state for section\n//   const [responses, setResponses] = useState({});\n//   const navigate = useNavigate();\n\n//   const sanitizeName = (name) => name.replace(/[^a-zA-Z0-9]/g, \"_\");\n\n//   const addDataToFirestore = useCallback(async (jsonData) => {\n//     try {\n//       const layers = jsonData.layers;\n\n//       for (const layer of layers) {\n//         const layerRef = doc(collection(db, \"layers\"), sanitizeName(layer.name));\n//         await setDoc(layerRef, { name: layer.name });\n\n//         for (const topic of layer.topics) {\n//           const topicRef = doc(\n//             collection(layerRef, \"topics\"),\n//             sanitizeName(topic.name)\n//           );\n//           await setDoc(topicRef, { name: topic.name });\n\n//           for (const subtopic of topic.subtopics) {\n//             const subtopicRef = doc(\n//               collection(topicRef, \"subtopics\"),\n//               sanitizeName(subtopic.name)\n//             );\n//             await setDoc(subtopicRef, { name: subtopic.name });\n\n//             for (const section of subtopic.sections) {\n//               const sectionRef = doc(\n//                 collection(subtopicRef, \"sections\"),\n//                 sanitizeName(section.name)\n//               );\n//               await setDoc(sectionRef, { name: section.name });\n\n//               for (const question of section.questions) {\n//                 const questionRef = doc(\n//                   collection(sectionRef, \"questions\"),\n//                   sanitizeName(question.name)\n//                 );\n//                 await setDoc(questionRef, {\n//                   name: question.name,\n//                   info: question.info,\n//                   good_point: question.good_point,\n//                   scope_for_improvement: question.scope_for_improvement,\n//                   mandatory: question.mandatory,\n//                   tags: question.tags,\n//                 });\n//               }\n//             }\n//           }\n//         }\n//       }\n\n//       console.log(\"Data successfully added to Firestore!\");\n//     } catch (error) {\n//       console.error(\"Error adding data to Firestore:\", error);\n//     }\n//   }, []);\n\n//   const getFirestoreData = async (layersSnapshot) => {\n//     const layers = [];\n//     for (const layerDoc of layersSnapshot.docs) {\n//       const topicsSnapshot = await getDocs(collection(layerDoc.ref, \"topics\"));\n//       const topics = [];\n//       for (const topicDoc of topicsSnapshot.docs) {\n//         const subtopicsSnapshot = await getDocs(\n//           collection(topicDoc.ref, \"subtopics\")\n//         );\n//         const subtopics = [];\n//         for (const subtopicDoc of subtopicsSnapshot.docs) {\n//           const sectionsSnapshot = await getDocs(\n//             collection(subtopicDoc.ref, \"sections\")\n//           );\n//           const sections = [];\n//           for (const sectionDoc of sectionsSnapshot.docs) {\n//             const questionsSnapshot = await getDocs(\n//               collection(sectionDoc.ref, \"questions\")\n//             );\n//             const questions = questionsSnapshot.docs.map((doc) => doc.data());\n//             sections.push({ name: sectionDoc.id, questions });\n//           }\n//           subtopics.push({ name: subtopicDoc.id, sections });\n//         }\n//         topics.push({ name: topicDoc.id, subtopics });\n//       }\n//       layers.push({ name: layerDoc.id, topics });\n//     }\n//     return { layers };\n//   };\n\n//   useEffect(() => {\n//     const fetchDataFromFirestore = async () => {\n//       try {\n//         const layersCollection = collection(db, \"layers\");\n//         const layersSnapshot = await getDocs(layersCollection);\n\n//         if (layersSnapshot.empty) {\n//           console.log(\"Firestore is empty. Adding data...\");\n//           fetch(\"/questionnaireData.json\")\n//             .then((response) => response.json())\n//             .then(async (jsonData) => {\n//               await addDataToFirestore(jsonData); // Add JSON to Firestore\n//               setData(jsonData); // Set state with the loaded data\n//             });\n//         } else {\n//           console.log(\"Fetching data from Firestore...\");\n//           const firestoreData = await getFirestoreData(layersSnapshot);\n//           console.log(\"Fetched data:\", firestoreData);\n//           setData(firestoreData); // Set state with Firestore data\n//         }\n//       } catch (error) {\n//         console.error(\"Error fetching data from Firestore:\", error);\n//       }\n//     };\n\n//     fetchDataFromFirestore();\n//   }, [addDataToFirestore]);\n\n//   if (!data) return <div>Loading...</div>;\n\n//   const layer = data.layers[currentLayerIndex];\n//   const topic = layer.topics[currentTopicIndex];\n//   const subtopic = topic.subtopics[currentSubtopicIndex];\n//   const section = subtopic.sections[currentSectionIndex];\n\n//   const handleResponseChange = (questionName, answer) => {\n//     setResponses((prevResponses) => ({\n//       ...prevResponses,\n//       [questionName]: answer,\n//     }));\n//   };\n\n//   const handleNext = () => {\n//     if (currentSectionIndex < subtopic.sections.length - 1) {\n//       setSectionIndex(currentSectionIndex + 1); // Move to next section\n//     } else if (currentSubtopicIndex < topic.subtopics.length - 1) {\n//       setSectionIndex(0);\n//       setSubtopicIndex(currentSubtopicIndex + 1);\n//     } else if (currentTopicIndex < layer.topics.length - 1) {\n//       setSectionIndex(0);\n//       setSubtopicIndex(0);\n//       setTopicIndex(currentTopicIndex + 1);\n//     } else if (currentLayerIndex < data.layers.length - 1) {\n//       setLayerIndex(currentLayerIndex + 1);\n//       setSectionIndex(0);\n//       setTopicIndex(0);\n//       setSubtopicIndex(0);\n//     } else {\n//       console.log(\"Questionnaire completed\");\n//       navigate(\"/score\", { state: { responses, jsonData: data } });\n//     }\n//   };\n\n//   return (\n//     <div className=\"panel\">\n//       <div className=\"panel-header\">\n//         <h2>Layer: {layer.name}</h2>\n//         <h3>Topic: {topic.name}</h3>\n//         <h4>Subtopic: {subtopic.name}</h4>\n//         <h5>Section: {section.name}</h5>\n//       </div>\n\n//       <div className=\"panel-body\">\n//         {section.questions.map((question, index) => (\n//           <div key={index} className=\"question-panel\">\n//             <p><strong>{question.name}</strong></p>\n//             <div className=\"buttons\">\n//               <button onClick={() => handleResponseChange(question.name, \"Yes\")}>\n//                 Yes\n//               </button>\n//               <button onClick={() => handleResponseChange(question.name, \"No\")}>\n//                 No\n//               </button>\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n\n//       <button className=\"next-button\" onClick={handleNext}>\n//         Next\n//       </button>\n//     </div>\n//   );\n// }\n\n// export default QuestionnairePage;\nvar _c;\n$RefreshReg$(_c, \"QuestionnairePage\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useNavigate","db","collection","doc","addDoc","setDoc","getDocs","updateDoc","deleteDoc","arrayUnion","jsxDEV","_jsxDEV","QuestionnairePage","userId","_s","data","setData","currentLayerIndex","setLayerIndex","currentTopicIndex","setTopicIndex","currentSubtopicIndex","setSubtopicIndex","currentSectionIndex","setSectionIndex","currentQuestionIndex","setQuestionIndex","responses","setResponses","resp","setResp","selectedAnswer","setSelectedAnswer","animationDirection","setAnimationDirection","navigate","clearSubcollection","subcollectionName","userRef","responsesRef","querySnapshot","empty","console","log","deletePromises","docs","map","ref","Promise","all","error","clearResponsesOnInit","sanitizeName","name","replace","extractFirestoreData","rawData","parsedData","Object","entries","reduce","acc","key","value","integerValue","undefined","parseInt","stringValue","addDataToFirestore","jsonData","layers","i","length","layer","layerRef","order","j","topics","topic","topicRef","k","subtopics","subtopic","subtopicRef","l","sections","section","sectionRef","m","questions","question","questionRef","info","good_point","scope_for_improvement","mandatory","tags","getFirestoreData","layersSnapshot","layerDoc","layerData","topicsSnapshot","topicDoc","topicData","subtopicsSnapshot","subtopicDoc","subtopicData","sectionsSnapshot","sectionDoc","sectionData","questionsSnapshot","sort","a","b","push","fetchDataFromFirestore","layersCollection","fetch","then","json","firestoreData","children","fileName","_jsxFileName","lineNumber","columnNumber","handleResponseChange","answer","questionData","prevResponses","layerIndex","topicIndex","subtopicIndex","sectionIndex","questionIndex","saveResponseToFirebase","response","handleNext","lastResponse","_layerScores$","_layerScores$2","_layerScores$3","_layerScores$4","_layerScores$5","totalQuestions","yesCount","filter","totalScore","layerScores","Array","fill","layerYesCounts","layerQuestionCounts","forEach","index","assessmentData","dateOfTest","Date","toLocaleDateString","timeOfTest","toLocaleTimeString","score","toFixed","orgScore","appScore","dataScore","awareScore","polScore","riskLevel","logs","className","onClick","_c","$RefreshReg$"],"sources":["/Users/balajibabasahebsankapal/Desktop/Risk/web-app/src/components/Questionnaire.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n// import \"../styles/Questionnaire.css\";\nimport { db } from \"../firebase/firebase.js\"; // Import Firestore instance\nimport { collection, doc,addDoc,setDoc,\n  getDocs,\n  updateDoc,\n  deleteDoc,\n  arrayUnion\n} from \"firebase/firestore\";\n\nfunction QuestionnairePage({ userId }) {\n  const [data, setData] = useState(null);\n  const [currentLayerIndex, setLayerIndex] = useState(0);\n  const [currentTopicIndex, setTopicIndex] = useState(0);\n  const [currentSubtopicIndex, setSubtopicIndex] = useState(0);\n  const [currentSectionIndex, setSectionIndex] = useState(0);\n  const [currentQuestionIndex, setQuestionIndex] = useState(0);\n  const [responses, setResponses] = useState([]);\n  const [resp, setResp] = useState({});\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [animationDirection, setAnimationDirection] = useState(\"slide-in\");\n  const navigate = useNavigate();\n\n  const clearSubcollection = async (userId, subcollectionName) => {\n    try {\n      const userRef = doc(db, \"users\", userId);\n      const responsesRef = collection(userRef, subcollectionName);\n\n      // Check if the subcollection has any documents\n      const querySnapshot = await getDocs(responsesRef);\n\n      if (querySnapshot.empty) {\n        console.log(\"No responses to clear.\"); // Subcollection doesn't exist or is empty\n        return;\n      }\n\n      // Loop through and delete each document in the subcollection\n      const deletePromises = querySnapshot.docs.map((doc) =>\n        deleteDoc(doc.ref)\n      );\n      await Promise.all(deletePromises);\n\n      console.log(\"Responses subcollection cleared successfully.\");\n    } catch (error) {\n      console.error(\"Error clearing responses subcollection:\", error);\n    }\n  };\n\n  useEffect(() => {\n    const clearResponsesOnInit = async () => {\n      await clearSubcollection(userId, \"responses\");\n    };\n\n    clearResponsesOnInit();\n  }, [userId]);\n\n  const sanitizeName = (name) => name.replace(/[^a-zA-Z0-9]/g, \"_\");\n\n  const extractFirestoreData = (doc) => {\n    const rawData = doc.data();\n\n    // Extract Firestore fields and handle nested `integerValue` or `stringValue`\n    const parsedData = Object.entries(rawData).reduce((acc, [key, value]) => {\n      if (value.integerValue !== undefined) {\n        acc[key] = parseInt(value.integerValue, 10); // Convert to number\n      } else if (value.stringValue !== undefined) {\n        acc[key] = value.stringValue;\n      } else {\n        acc[key] = value; // Add as-is if no special handling required\n      }\n      return acc;\n    }, {});\n\n    return parsedData;\n  };\n\n  const addDataToFirestore = useCallback(async (jsonData) => {\n    try {\n      const layers = jsonData.layers;\n\n      for (let i = 0; i < layers.length; i++) {\n        const layer = layers[i];\n        const layerRef = doc(\n          collection(db, \"layers\"),\n          sanitizeName(layer.name)\n        );\n        await setDoc(layerRef, { name: layer.name, order: i });\n\n        for (let j = 0; j < layer.topics.length; j++) {\n          const topic = layer.topics[j];\n          const topicRef = doc(\n            collection(layerRef, \"topics\"),\n            sanitizeName(topic.name)\n          );\n          await setDoc(topicRef, { name: topic.name, order: j });\n\n          for (let k = 0; k < topic.subtopics.length; k++) {\n            const subtopic = topic.subtopics[k];\n            const subtopicRef = doc(\n              collection(topicRef, \"subtopics\"),\n              sanitizeName(subtopic.name)\n            );\n            await setDoc(subtopicRef, { name: subtopic.name, order: k });\n\n            for (let l = 0; l < subtopic.sections.length; l++) {\n              const section = subtopic.sections[l];\n              const sectionRef = doc(\n                collection(subtopicRef, \"sections\"),\n                sanitizeName(section.name)\n              );\n              await setDoc(sectionRef, { name: section.name, order: l });\n\n              for (let m = 0; m < section.questions.length; m++) {\n                const question = section.questions[m];\n                const questionRef = doc(\n                  collection(sectionRef, \"questions\"),\n                  sanitizeName(question.name)\n                );\n                await setDoc(questionRef, {\n                  name: question.name,\n                  info: question.info,\n                  good_point: question.good_point,\n                  scope_for_improvement: question.scope_for_improvement,\n                  mandatory: question.mandatory,\n                  tags: question.tags,\n                  order: m,\n                });\n              }\n            }\n          }\n        }\n      }\n\n      console.log(\"Data successfully added to Firestore!\");\n    } catch (error) {\n      console.error(\"Error adding data to Firestore:\", error);\n    }\n  }, []);\n\n  const getFirestoreData = async (layersSnapshot) => {\n    const layers = [];\n    for (const layerDoc of layersSnapshot.docs) {\n      const layerData = extractFirestoreData(layerDoc);\n      const topicsSnapshot = await getDocs(collection(layerDoc.ref, \"topics\"));\n      const topics = [];\n\n      for (const topicDoc of topicsSnapshot.docs) {\n        const topicData = topicDoc.data();\n        const subtopicsSnapshot = await getDocs(\n          collection(topicDoc.ref, \"subtopics\")\n        );\n        const subtopics = [];\n        for (const subtopicDoc of subtopicsSnapshot.docs) {\n          const subtopicData = subtopicDoc.data();\n          const sectionsSnapshot = await getDocs(\n            collection(subtopicDoc.ref, \"sections\")\n          );\n          const sections = [];\n          for (const sectionDoc of sectionsSnapshot.docs) {\n            const sectionData = sectionDoc.data();\n            const questionsSnapshot = await getDocs(\n              collection(sectionDoc.ref, \"questions\")\n            );\n            const questions = questionsSnapshot.docs\n              .map((doc) => doc.data())\n              .sort((a, b) => a.order - b.order);\n            sections.push({ ...sectionData, questions });\n          }\n\n          sections.sort((a, b) => a.order - b.order); // Sort sections by order\n          subtopics.push({ ...subtopicData, sections });\n        }\n\n        subtopics.sort((a, b) => a.order - b.order); // Sort subtopics by order\n        topics.push({ ...topicData, subtopics });\n      }\n\n      topics.sort((a, b) => a.order - b.order); // Sort topics by order\n      layers.push({ ...layerData, topics });\n    }\n\n    layers.sort((a, b) => a.order - b.order);\n    console.log(layers);\n    return { layers };\n  };\n\n  useEffect(() => {\n    const fetchDataFromFirestore = async () => {\n      try {\n        const layersCollection = collection(db, \"layers\");\n        const layersSnapshot = await getDocs(layersCollection);\n\n        if (layersSnapshot.empty) {\n          console.log(\"Firestore is empty. Adding data...\");\n          fetch(\"/questionnaireData.json\")\n            .then((resp) => resp.json())\n            .then(async (jsonData) => {\n              await addDataToFirestore(jsonData); // Add JSON to Firestore\n              setData(jsonData); // Set state with the loaded data\n            });\n        } else {\n          console.log(\"Fetching data from Firestore...\");\n          console.log(\"Fetched data1:\", layersSnapshot);\n          const firestoreData = await getFirestoreData(layersSnapshot);\n          console.log(\"Fetched data2:\", firestoreData);\n          setData(firestoreData); // Set state with Firestore data\n        }\n      } catch (error) {\n        console.error(\"Error fetching data from Firestore:\", error);\n      }\n    };\n\n    fetchDataFromFirestore();\n  }, [addDataToFirestore]);\n\n  if (!data) return <div>Loading...</div>;\n  console.log(\"data\", data);\n\n  const layer = data.layers[currentLayerIndex];\n  const topic = layer.topics[currentTopicIndex];\n  const subtopic = topic.subtopics[currentSubtopicIndex];\n  const section = subtopic.sections[currentSectionIndex];\n  const question = section.questions[currentQuestionIndex];\n\n  const handleResponseChange = (question, answer) => {\n    // Ensure you are accessing the correct layer, topic, subtopic, section, and question\n    const layer = data.layers[currentLayerIndex];\n    const topic = layer.topics[currentTopicIndex];\n    const subtopic = topic.subtopics[currentSubtopicIndex];\n    const section = subtopic.sections[currentSectionIndex];\n    const questionData = section.questions[currentQuestionIndex];\n\n    setResponses((prevResponses) => [\n      ...prevResponses,\n      {\n        layerIndex: layer.order, // Use the 'order' attribute from the layer\n        topicIndex: topic.order, // Use the 'order' attribute from the topic\n        subtopicIndex: subtopic.order, // Use the 'order' attribute from the subtopic\n        sectionIndex: section.order, // Use the 'order' attribute from the section\n        questionIndex: questionData.order, // Use the 'order' attribute from the question\n        answer,\n      },\n    ]);\n    setSelectedAnswer(answer); // Track the selected answer\n  };\n\n  const saveResponseToFirebase = async (response) => {\n    console.log(\"Saving response:\", response); // Log the response to inspect its data\n    try {\n      const userRef = doc(db, \"users\", userId);\n      const responsesRef = collection(userRef, \"responses\");\n\n      // Ensure the response data is valid before saving\n      if (response.questionIndex === undefined) {\n        console.error(\"Invalid questionIndex:\", response); // Log error if undefined\n        return;\n      }\n\n      // Save the response to Firestore\n      await addDoc(responsesRef, {\n        layerIndex: response.layerIndex,\n        topicIndex: response.topicIndex,\n        subtopicIndex: response.subtopicIndex,\n        sectionIndex: response.sectionIndex,\n        questionIndex: response.questionIndex,\n        answer: response.answer,\n      });\n\n      console.log(\"Response saved successfully:\", response);\n    } catch (error) {\n      console.error(\"Error saving response to Firebase:\", error);\n    }\n  };\n\n  const handleNext = async () => {\n    if (selectedAnswer === null) {\n      // If no answer selected, set answer as \"No\"\n      setSelectedAnswer(\"No\");\n    }\n\n    if (responses.length === 0) return;\n\n    const lastResponse = responses[responses.length - 1]; // Get the last response added\n\n    // Save the current response to Firebase\n    await saveResponseToFirebase(lastResponse);\n\n    // Immediately jump to the next question without delay\n    setSelectedAnswer(null); // Reset selected answer for the next question\n\n    if (currentQuestionIndex < section.questions.length - 1) {\n      setQuestionIndex(currentQuestionIndex + 1);\n    } else if (currentSectionIndex < subtopic.sections.length - 1) {\n      setSectionIndex(currentSectionIndex + 1);\n      setQuestionIndex(0);\n    } else if (currentSubtopicIndex < topic.subtopics.length - 1) {\n      setSubtopicIndex(currentSubtopicIndex + 1);\n      setSectionIndex(0);\n      setQuestionIndex(0);\n    } else if (currentTopicIndex < layer.topics.length - 1) {\n      setTopicIndex(currentTopicIndex + 1);\n      setSubtopicIndex(0);\n      setSectionIndex(0);\n      setQuestionIndex(0);\n    } else if (currentLayerIndex < data.layers.length - 1) {\n      setLayerIndex(currentLayerIndex + 1);\n      setTopicIndex(0);\n      setSubtopicIndex(0);\n      setSectionIndex(0);\n      setQuestionIndex(0);\n    } else {\n      // Calculate Scores and Save to Firebase\n      const totalQuestions = responses.length;\n      const yesCount = responses.filter(\n        (response) => response.answer === \"Yes\"\n      ).length;\n\n      // Calculate the total score\n      const totalScore = (yesCount / totalQuestions) * 100;\n\n      // Initialize layer-wise scores\n      const layerScores = Array(data.layers.length).fill(0);\n      const layerYesCounts = Array(data.layers.length).fill(0);\n      const layerQuestionCounts = Array(data.layers.length).fill(0);\n\n      // Calculate scores for each layer\n      responses.forEach((response) => {\n        layerYesCounts[response.layerIndex] +=\n          response.answer === \"Yes\" ? 1 : 0;\n        layerQuestionCounts[response.layerIndex] += 1;\n      });\n\n      // Populate scores for each layer\n      layerYesCounts.forEach((yesCount, index) => {\n        layerScores[index] = (yesCount / layerQuestionCounts[index]) * 100 || 0; // Handle division by zero\n      });\n\n      // Assign layer scores\n      const assessmentData = {\n        dateOfTest: new Date().toLocaleDateString(),\n        timeOfTest: new Date().toLocaleTimeString(),\n        score: totalScore.toFixed(2), // Total score\n        orgScore: layerScores[0]?.toFixed(2) || 0, // Organization level score\n        appScore: layerScores[1]?.toFixed(2) || 0, // Application level score\n        dataScore: layerScores[2]?.toFixed(2) || 0, // Data level score\n        awareScore: layerScores[3]?.toFixed(2) || 0, // Awareness level score\n        polScore: layerScores[4]?.toFixed(2) || 0, // Policies level score\n        riskLevel:\n          totalScore > 90\n            ? \"Highly Secure\"\n            : totalScore > 70\n            ? \"Moderately Secure\"\n            : totalScore > 40\n            ? \"Less Secure\"\n            : \"Critical Stage/Very High Risk\",\n      };\n\n      // Save to Firestore\n\n      try {\n        // Reference to the user's document\n        const userRef = doc(db, \"users\", userId);\n\n        // Update the `logs` array with the new assessment data\n        await updateDoc(userRef, {\n          logs: arrayUnion(assessmentData), // Use arrayUnion to add the new data\n        });\n\n        console.log(\"Assessment data saved to logs:\", assessmentData);\n      } catch (error) {\n        console.error(\"Error saving assessment data to logs:\", error);\n      }\n\n      // Navigate to the score page\n      console.log(\"Questionnaire completed\");\n      // navigate(\"/score\", { state: { responses, jsonData: data, assessmentData } });\n    }\n  };\n\n  // const handleNext = async () => {\n  //   //if (!selectedAnswer) return; // Ensure an answer is selected before proceeding\n\n  //   const question = section.questions[currentQuestionIndex];\n  //   const response = responses[question.name];\n\n  //   // Save the current response to Firebase\n  //   await saveResponseToFirebase(response);\n\n  //   setAnimationDirection(\"slide-out\");\n  //   setTimeout(() => {\n  //     setSelectedAnswer(null); // Reset selected answer for the next question\n\n  //     if (currentQuestionIndex < section.questions.length - 1) {\n  //       setQuestionIndex(currentQuestionIndex + 1);\n  //     } else if (currentSectionIndex < subtopic.sections.length - 1) {\n  //       setSectionIndex(currentSectionIndex + 1);\n  //       setQuestionIndex(0);\n  //     } else if (currentSubtopicIndex < topic.subtopics.length - 1) {\n  //       setSubtopicIndex(currentSubtopicIndex + 1);\n  //       setSectionIndex(0);\n  //       setQuestionIndex(0);\n  //     } else if (currentTopicIndex < layer.topics.length - 1) {\n  //       setTopicIndex(currentTopicIndex + 1);\n  //       setSubtopicIndex(0);\n  //       setSectionIndex(0);\n  //       setQuestionIndex(0);\n  //     } else if (currentLayerIndex < data.layers.length - 1) {\n  //       setLayerIndex(currentLayerIndex + 1);\n  //       setTopicIndex(0);\n  //       setSubtopicIndex(0);\n  //       setSectionIndex(0);\n  //       setQuestionIndex(0);\n  //     } else {\n  //       console.log(\"Questionnaire completed\");\n  //       navigate(\"/score\", { state: { responses, jsonData: data } });\n  //     }\n  //     setAnimationDirection(\"slide-in\");\n  //   }, 300);\n  // };\n\n  return (\n    <div className=\"panel\">\n      <div className=\"panel-header\">\n        <h1>{layer.name}</h1>\n        <h2>{topic.name}</h2>\n        <h3>{subtopic.name}</h3>\n      </div>\n\n      <div className=\"panel-body\">\n        <div className={`question-panel ${animationDirection}`}>\n          <p>\n            <strong>{question.name}</strong>\n          </p>\n          <div className=\"buttons\">\n            <button\n              className={selectedAnswer === \"Yes\" ? \"selected\" : \"\"}\n              onClick={() => handleResponseChange(question.name, \"Yes\")}\n            >\n              Yes\n            </button>\n            <button\n              className={selectedAnswer === \"No\" ? \"selected\" : \"\"}\n              onClick={() => handleResponseChange(question.name, \"No\")}\n            >\n              No\n            </button>\n          </div>\n          <button\n            className=\"next-button\"\n            //disabled={!selectedAnswer} // Disable until an answer is selected\n            onClick={handleNext}\n          >\n            Next\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default QuestionnairePage;\n\n// import React, { useState, useEffect, useCallback } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import \"../styles/Questionnaire.css\";\n// import { db } from \"../firebase/firebase.js\"; // Import Firestore instance\n// import { collection, doc, setDoc, getDocs } from \"firebase/firestore\";\n\n// function QuestionnairePage() {\n//   const [data, setData] = useState(null);\n//   const [currentLayerIndex, setLayerIndex] = useState(0);\n//   const [currentTopicIndex, setTopicIndex] = useState(0);\n//   const [currentSubtopicIndex, setSubtopicIndex] = useState(0);\n//   const [currentSectionIndex, setSectionIndex] = useState(0); // New state for section\n//   const [responses, setResponses] = useState({});\n//   const navigate = useNavigate();\n\n//   const sanitizeName = (name) => name.replace(/[^a-zA-Z0-9]/g, \"_\");\n\n//   const addDataToFirestore = useCallback(async (jsonData) => {\n//     try {\n//       const layers = jsonData.layers;\n\n//       for (const layer of layers) {\n//         const layerRef = doc(collection(db, \"layers\"), sanitizeName(layer.name));\n//         await setDoc(layerRef, { name: layer.name });\n\n//         for (const topic of layer.topics) {\n//           const topicRef = doc(\n//             collection(layerRef, \"topics\"),\n//             sanitizeName(topic.name)\n//           );\n//           await setDoc(topicRef, { name: topic.name });\n\n//           for (const subtopic of topic.subtopics) {\n//             const subtopicRef = doc(\n//               collection(topicRef, \"subtopics\"),\n//               sanitizeName(subtopic.name)\n//             );\n//             await setDoc(subtopicRef, { name: subtopic.name });\n\n//             for (const section of subtopic.sections) {\n//               const sectionRef = doc(\n//                 collection(subtopicRef, \"sections\"),\n//                 sanitizeName(section.name)\n//               );\n//               await setDoc(sectionRef, { name: section.name });\n\n//               for (const question of section.questions) {\n//                 const questionRef = doc(\n//                   collection(sectionRef, \"questions\"),\n//                   sanitizeName(question.name)\n//                 );\n//                 await setDoc(questionRef, {\n//                   name: question.name,\n//                   info: question.info,\n//                   good_point: question.good_point,\n//                   scope_for_improvement: question.scope_for_improvement,\n//                   mandatory: question.mandatory,\n//                   tags: question.tags,\n//                 });\n//               }\n//             }\n//           }\n//         }\n//       }\n\n//       console.log(\"Data successfully added to Firestore!\");\n//     } catch (error) {\n//       console.error(\"Error adding data to Firestore:\", error);\n//     }\n//   }, []);\n\n//   const getFirestoreData = async (layersSnapshot) => {\n//     const layers = [];\n//     for (const layerDoc of layersSnapshot.docs) {\n//       const topicsSnapshot = await getDocs(collection(layerDoc.ref, \"topics\"));\n//       const topics = [];\n//       for (const topicDoc of topicsSnapshot.docs) {\n//         const subtopicsSnapshot = await getDocs(\n//           collection(topicDoc.ref, \"subtopics\")\n//         );\n//         const subtopics = [];\n//         for (const subtopicDoc of subtopicsSnapshot.docs) {\n//           const sectionsSnapshot = await getDocs(\n//             collection(subtopicDoc.ref, \"sections\")\n//           );\n//           const sections = [];\n//           for (const sectionDoc of sectionsSnapshot.docs) {\n//             const questionsSnapshot = await getDocs(\n//               collection(sectionDoc.ref, \"questions\")\n//             );\n//             const questions = questionsSnapshot.docs.map((doc) => doc.data());\n//             sections.push({ name: sectionDoc.id, questions });\n//           }\n//           subtopics.push({ name: subtopicDoc.id, sections });\n//         }\n//         topics.push({ name: topicDoc.id, subtopics });\n//       }\n//       layers.push({ name: layerDoc.id, topics });\n//     }\n//     return { layers };\n//   };\n\n//   useEffect(() => {\n//     const fetchDataFromFirestore = async () => {\n//       try {\n//         const layersCollection = collection(db, \"layers\");\n//         const layersSnapshot = await getDocs(layersCollection);\n\n//         if (layersSnapshot.empty) {\n//           console.log(\"Firestore is empty. Adding data...\");\n//           fetch(\"/questionnaireData.json\")\n//             .then((response) => response.json())\n//             .then(async (jsonData) => {\n//               await addDataToFirestore(jsonData); // Add JSON to Firestore\n//               setData(jsonData); // Set state with the loaded data\n//             });\n//         } else {\n//           console.log(\"Fetching data from Firestore...\");\n//           const firestoreData = await getFirestoreData(layersSnapshot);\n//           console.log(\"Fetched data:\", firestoreData);\n//           setData(firestoreData); // Set state with Firestore data\n//         }\n//       } catch (error) {\n//         console.error(\"Error fetching data from Firestore:\", error);\n//       }\n//     };\n\n//     fetchDataFromFirestore();\n//   }, [addDataToFirestore]);\n\n//   if (!data) return <div>Loading...</div>;\n\n//   const layer = data.layers[currentLayerIndex];\n//   const topic = layer.topics[currentTopicIndex];\n//   const subtopic = topic.subtopics[currentSubtopicIndex];\n//   const section = subtopic.sections[currentSectionIndex];\n\n//   const handleResponseChange = (questionName, answer) => {\n//     setResponses((prevResponses) => ({\n//       ...prevResponses,\n//       [questionName]: answer,\n//     }));\n//   };\n\n//   const handleNext = () => {\n//     if (currentSectionIndex < subtopic.sections.length - 1) {\n//       setSectionIndex(currentSectionIndex + 1); // Move to next section\n//     } else if (currentSubtopicIndex < topic.subtopics.length - 1) {\n//       setSectionIndex(0);\n//       setSubtopicIndex(currentSubtopicIndex + 1);\n//     } else if (currentTopicIndex < layer.topics.length - 1) {\n//       setSectionIndex(0);\n//       setSubtopicIndex(0);\n//       setTopicIndex(currentTopicIndex + 1);\n//     } else if (currentLayerIndex < data.layers.length - 1) {\n//       setLayerIndex(currentLayerIndex + 1);\n//       setSectionIndex(0);\n//       setTopicIndex(0);\n//       setSubtopicIndex(0);\n//     } else {\n//       console.log(\"Questionnaire completed\");\n//       navigate(\"/score\", { state: { responses, jsonData: data } });\n//     }\n//   };\n\n//   return (\n//     <div className=\"panel\">\n//       <div className=\"panel-header\">\n//         <h2>Layer: {layer.name}</h2>\n//         <h3>Topic: {topic.name}</h3>\n//         <h4>Subtopic: {subtopic.name}</h4>\n//         <h5>Section: {section.name}</h5>\n//       </div>\n\n//       <div className=\"panel-body\">\n//         {section.questions.map((question, index) => (\n//           <div key={index} className=\"question-panel\">\n//             <p><strong>{question.name}</strong></p>\n//             <div className=\"buttons\">\n//               <button onClick={() => handleResponseChange(question.name, \"Yes\")}>\n//                 Yes\n//               </button>\n//               <button onClick={() => handleResponseChange(question.name, \"No\")}>\n//                 No\n//               </button>\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n\n//       <button className=\"next-button\" onClick={handleNext}>\n//         Next\n//       </button>\n//     </div>\n//   );\n// }\n\n// export default QuestionnairePage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}