{"ast":null,"code":"var _jsxFileName = \"/Users/balajibabasahebsankapal/Desktop/Risk/web-app/src/components/Questionnaire.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"../styles/Questionnaire.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction QuestionnairePage() {\n  _s();\n  var _topic$subtopics, _subtopics$;\n  const [data, setData] = useState(null);\n  const [currentLayerIndex, setLayerIndex] = useState(0);\n  const [currentTopicIndex, setTopicIndex] = useState(0);\n  const [currentSubtopicIndex, setSubtopicIndex] = useState(0);\n  const [currentSectionIndex, setSectionIndex] = useState(0);\n  const [responses, setResponses] = useState({});\n  const navigate = useNavigate();\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(\"/questionnaireData.json\");\n        const jsonData = await response.json();\n        setData(jsonData); // Set the fetched JSON data into state\n      } catch (error) {\n        console.error(\"Error loading JSON data:\", error);\n      }\n    };\n    fetchData();\n  }, []);\n\n  // Check if data and layer are defined before accessing properties\n  if (!data || !data.layers || !data.layers[currentLayerIndex]) {\n    console.log(\"Error: Data, layers, or current layer is missing.\");\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 12\n    }, this); // Show loading state until data is available\n  }\n  const layer = data.layers[currentLayerIndex];\n  const topic = layer.topics[currentTopicIndex];\n  const subtopic = topic === null || topic === void 0 ? void 0 : (_topic$subtopics = topic.subtopics) === null || _topic$subtopics === void 0 ? void 0 : _topic$subtopics[currentSubtopicIndex]; // Optional chaining for safety\n  // const section = subtopic?.sections?.[currentSectionIndex]; // Optional chaining for safety\n  const sections = ((_subtopics$ = subtopics[0]) === null || _subtopics$ === void 0 ? void 0 : _subtopics$.sections) || [];\n\n  // Log the specific data you're accessing\n  console.log(\"Layer data: \", layer); // Check if layer exists\n  console.log(\"Topic data: \", topic); // Check if topic exists\n  console.log(\"Subtopic data: \", subtopic); // Check if subtopic exists\n  console.log(\"Section data: \", section); // Check if section exists\n\n  if (!subtopic || !section) {\n    console.log(\"Error: Subtopic or section is missing.\");\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 12\n    }, this); // Prevent errors if subtopic or section is not found\n  }\n  const handleResponseChange = (questionName, answer) => {\n    setResponses(prevResponses => ({\n      ...prevResponses,\n      [questionName]: answer\n    }));\n  };\n  const handleNext = () => {\n    if (currentSectionIndex < subtopic.sections.length - 1) {\n      setSectionIndex(currentSectionIndex + 1); // Move to the next section\n    } else if (currentSubtopicIndex < topic.subtopics.length - 1) {\n      setSectionIndex(0);\n      setSubtopicIndex(currentSubtopicIndex + 1);\n    } else if (currentTopicIndex < layer.topics.length - 1) {\n      setSubtopicIndex(0);\n      setTopicIndex(currentTopicIndex + 1);\n    } else if (currentLayerIndex < data.layers.length - 1) {\n      setLayerIndex(currentLayerIndex + 1);\n      setTopicIndex(0);\n      setSubtopicIndex(0);\n    } else {\n      console.log(\"Questionnaire completed\");\n      navigate(\"/score\", {\n        state: {\n          responses,\n          jsonData: data\n        }\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"panel\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"panel-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Layer: \", layer.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Topic: \", topic.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Subtopic: \", subtopic.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: [\"Section: \", section.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"panel-body\",\n      children: section.questions.map((question, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: question.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 16\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"buttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleResponseChange(question.name, \"Yes\"),\n            children: \"Yes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleResponseChange(question.name, \"No\"),\n            children: \"No\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"next-button\",\n      onClick: handleNext,\n      children: \"Next\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n_s(QuestionnairePage, \"Adn2lE7OZhufgN4sAyTaTyXs6xY=\", false, function () {\n  return [useNavigate];\n});\n_c = QuestionnairePage;\nexport default QuestionnairePage;\n\n// import React, { useState, useEffect } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import \"../styles/Questionnaire.css\";\n// import { db } from \"../firebase/firebase.js\"; // Import Firestore instance\n// import { collection, doc, setDoc, getDocs } from \"firebase/firestore\";\n\n// function QuestionnairePage() {\n//   const [data, setData] = useState(null);\n//   const [currentLayerIndex, setLayerIndex] = useState(0);\n//   const [currentTopicIndex, setTopicIndex] = useState(0);\n//   const [currentSubtopicIndex, setSubtopicIndex] = useState(0);\n//   const [currentSectionIndex, setSectionIndex] = useState(0); // New state for section\n//   const [responses, setResponses] = useState({});\n//   const navigate = useNavigate();\n\n//   useEffect(() => {\n//     const fetchDataFromFirestore = async () => {\n//       try {\n//         const layersCollection = collection(db, \"layers\");\n//         const layersSnapshot = await getDocs(layersCollection);\n\n//         if (layersSnapshot.empty) {\n//           console.log(\"Firestore is empty. Adding data...\");\n//           // Load JSON and upload it if Firestore is empty\n//           fetch(\"/questionnaireData.json\")\n//             .then((response) => response.json())\n//             .then(async (jsonData) => {\n//               await addDataToFirestore(jsonData); // Add JSON to Firestore\n//               setData(jsonData); // Set state with the loaded data\n//             });\n//         } else {\n//           console.log(\"Fetching data from Firestore...\");\n//           const firestoreData = await getFirestoreData(layersSnapshot);\n//           setData(firestoreData); // Set state with Firestore data\n//         }\n//       } catch (error) {\n//         console.error(\"Error fetching data from Firestore:\", error);\n//       }\n//     };\n\n//     fetchDataFromFirestore();\n//   }, []);\n\n//   // Function to add data to Firestore\n//   const addDataToFirestore = async (jsonData) => {\n//     try {\n//       const layers = jsonData.layers;\n\n//       // Step 1: Create all layers first\n//       for (const layer of layers) {\n//         const layerRef = doc(collection(db, \"layers\"), layer.lname);\n//         await setDoc(layerRef, { name: layer.lname });\n\n//         // Step 2: Create topics under each layer\n//         for (const topic of layer.topics) {\n//           const topicRef = doc(collection(layerRef, \"topics\"), topic.tname);\n//           await setDoc(topicRef, { name: topic.tname });\n\n//           // Step 3: Create subtopics under each topic\n//           for (const subtopic of topic.subtopics) {\n//             const sanitizedSubtopicName = subtopic.stname.replace(/[^a-zA-Z0-9]/g, '_');\n//             const subtopicRef = doc(collection(topicRef, \"subtopics\"), sanitizedSubtopicName);\n//             await setDoc(subtopicRef, { name: subtopic.stname });\n\n//             // Step 4: Create sections under each subtopic\n//             for (const section of subtopic.sections) {\n//               const sectionRef = doc(collection(subtopicRef, \"sections\"), section.sname);\n//               await setDoc(sectionRef, { name: section.sname });\n\n//               // Step 5: Create questions under each section\n//               for (const question of section.questions) {\n//                 const questionRef = doc(\n//                   collection(sectionRef, \"questions\"),\n//                   question.name\n//                 );\n//                 await setDoc(questionRef, {\n//                   name: question.name,\n//                   info: question.info,\n//                   good_point: question.good_point,\n//                   scope_for_improvement: question.scope_for_improvement,\n//                   mandatory: question.mandatory,\n//                   tags: question.tags,\n//                 });\n//               }\n//             }\n//           }\n//         }\n//       }\n\n//       console.log(\"Data successfully added to Firestore!\");\n//     } catch (error) {\n//       console.error(\"Error adding data to Firestore:\", error);\n//     }\n//   };\n\n//   // Function to fetch data from Firestore and build a JSON-like structure\n//   const getFirestoreData = async (layersSnapshot) => {\n//     const layers = [];\n//     for (const layerDoc of layersSnapshot.docs) {\n//       const topicsSnapshot = await getDocs(collection(layerDoc.ref, \"topics\"));\n//       const topics = [];\n//       for (const topicDoc of topicsSnapshot.docs) {\n//         const subtopicsSnapshot = await getDocs(\n//           collection(topicDoc.ref, \"subtopics\")\n//         );\n//         const subtopics = [];\n//         for (const subtopicDoc of subtopicsSnapshot.docs) {\n//           const sectionsSnapshot = await getDocs(\n//             collection(subtopicDoc.ref, \"sections\")\n//           );\n//           const sections = [];\n//           for (const sectionDoc of sectionsSnapshot.docs) {\n//             const questionsSnapshot = await getDocs(\n//               collection(sectionDoc.ref, \"questions\")\n//             );\n//             const questions = questionsSnapshot.docs.map((doc) => doc.data());\n//             sections.push({ name: sectionDoc.id, questions });\n//           }\n//           subtopics.push({ name: subtopicDoc.id, sections });\n//         }\n//         topics.push({ name: topicDoc.id, subtopics });\n//       }\n//       layers.push({ name: layerDoc.id, topics });\n//     }\n//     return { layers };\n//   };\n\n//   if (!data) return <div>Loading...</div>;\n\n//   const layer = data.layers[currentLayerIndex];\n//   const topic = layer.topics[currentTopicIndex];\n//   const subtopic = topic.subtopics[currentSubtopicIndex];\n//   const section = subtopic.sections[currentSectionIndex];\n\n//   const handleResponseChange = (questionName, answer) => {\n//     setResponses((prevResponses) => ({\n//       ...prevResponses,\n//       [questionName]: answer,\n//     }));\n//   };\n\n//   const handleNext = () => {\n//     if (currentSectionIndex < subtopic.sections.length - 1) {\n//       setSectionIndex(currentSectionIndex + 1); // Move to next section\n//     } else if (currentSubtopicIndex < topic.subtopics.length - 1) {\n//       setSectionIndex(0);\n//       setSubtopicIndex(currentSubtopicIndex + 1);\n//     } else if (currentTopicIndex < layer.topics.length - 1) {\n//       setSubtopicIndex(0);\n//       setTopicIndex(currentTopicIndex + 1);\n//     } else if (currentLayerIndex < data.layers.length - 1) {\n//       setLayerIndex(currentLayerIndex + 1);\n//       setTopicIndex(0);\n//       setSubtopicIndex(0);\n//     } else {\n//       console.log(\"Questionnaire completed\");\n//       navigate(\"/score\", { state: { responses, jsonData: data } });\n//     }\n//   };\n\n//   return (\n//     <div className=\"panel\">\n//       <div className=\"panel-header\">\n//         <h2>Layer: {layer.lname}</h2>\n//         <h3>Topic: {topic.tname}</h3>\n//         <h4>Subtopic: {subtopic.stname}</h4>\n//         <h5>Section: {section.sname}</h5>\n//       </div>\n\n//       <div className=\"panel-body\">\n//         {section.questions.map((question, index) => (\n//           <div key={index} className=\"question-panel\">\n//             <p><strong>{question.name}</strong></p>\n//             <div className=\"buttons\">\n//               <button onClick={() => handleResponseChange(question.name, \"Yes\")}>\n//                 Yes\n//               </button>\n//               <button onClick={() => handleResponseChange(question.name, \"No\")}>\n//                 No\n//               </button>\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n\n//       <button className=\"next-button\" onClick={handleNext}>\n//         Next\n//       </button>\n//     </div>\n//   );\n// }\n\n// export default QuestionnairePage;\nvar _c;\n$RefreshReg$(_c, \"QuestionnairePage\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","jsxDEV","_jsxDEV","QuestionnairePage","_s","_topic$subtopics","_subtopics$","data","setData","currentLayerIndex","setLayerIndex","currentTopicIndex","setTopicIndex","currentSubtopicIndex","setSubtopicIndex","currentSectionIndex","setSectionIndex","responses","setResponses","navigate","fetchData","response","fetch","jsonData","json","error","console","layers","log","children","fileName","_jsxFileName","lineNumber","columnNumber","layer","topic","topics","subtopic","subtopics","sections","section","handleResponseChange","questionName","answer","prevResponses","handleNext","length","state","className","name","questions","map","question","index","onClick","_c","$RefreshReg$"],"sources":["/Users/balajibabasahebsankapal/Desktop/Risk/web-app/src/components/Questionnaire.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"../styles/Questionnaire.css\";\n\nfunction QuestionnairePage() {\n  const [data, setData] = useState(null);\n  const [currentLayerIndex, setLayerIndex] = useState(0);\n  const [currentTopicIndex, setTopicIndex] = useState(0);\n  const [currentSubtopicIndex, setSubtopicIndex] = useState(0);\n  const [currentSectionIndex, setSectionIndex] = useState(0);\n  const [responses, setResponses] = useState({});\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(\"/questionnaireData.json\");\n        const jsonData = await response.json();\n        setData(jsonData); // Set the fetched JSON data into state\n      } catch (error) {\n        console.error(\"Error loading JSON data:\", error);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  // Check if data and layer are defined before accessing properties\n  if (!data || !data.layers || !data.layers[currentLayerIndex]) {\n    console.log(\"Error: Data, layers, or current layer is missing.\");\n    return <div>Loading...</div>; // Show loading state until data is available\n  }\n\n  const layer = data.layers[currentLayerIndex];\n  const topic = layer.topics[currentTopicIndex];\n  const subtopic = topic?.subtopics?.[currentSubtopicIndex]; // Optional chaining for safety\n  // const section = subtopic?.sections?.[currentSectionIndex]; // Optional chaining for safety\n  const sections = subtopics[0]?.sections || []; \n\n  // Log the specific data you're accessing\n  console.log(\"Layer data: \", layer); // Check if layer exists\n  console.log(\"Topic data: \", topic); // Check if topic exists\n  console.log(\"Subtopic data: \", subtopic); // Check if subtopic exists\n  console.log(\"Section data: \", section); // Check if section exists\n\n  if (!subtopic || !section) {\n    console.log(\"Error: Subtopic or section is missing.\");\n    return <div>Loading...</div>; // Prevent errors if subtopic or section is not found\n  }\n\n  const handleResponseChange = (questionName, answer) => {\n    setResponses((prevResponses) => ({\n      ...prevResponses,\n      [questionName]: answer,\n    }));\n  };\n\n  const handleNext = () => {\n    if (currentSectionIndex < subtopic.sections.length - 1) {\n      setSectionIndex(currentSectionIndex + 1); // Move to the next section\n    } else if (currentSubtopicIndex < topic.subtopics.length - 1) {\n      setSectionIndex(0);\n      setSubtopicIndex(currentSubtopicIndex + 1);\n    } else if (currentTopicIndex < layer.topics.length - 1) {\n      setSubtopicIndex(0);\n      setTopicIndex(currentTopicIndex + 1);\n    } else if (currentLayerIndex < data.layers.length - 1) {\n      setLayerIndex(currentLayerIndex + 1);\n      setTopicIndex(0);\n      setSubtopicIndex(0);\n    } else {\n      console.log(\"Questionnaire completed\");\n      navigate(\"/score\", { state: { responses, jsonData: data } });\n    }\n  };\n\n  return (\n    <div className=\"panel\">\n      <div className=\"panel-header\">\n        <h2>Layer: {layer.name}</h2>\n        <h3>Topic: {topic.name}</h3>\n        <h4>Subtopic: {subtopic.name}</h4>\n        <h5>Section: {section.name}</h5>\n      </div>\n\n      <div className=\"panel-body\">\n        {section.questions.map((question, index) => (\n          <div key={index} className=\"question-panel\">\n            <p><strong>{question.name}</strong></p>\n            <div className=\"buttons\">\n              <button onClick={() => handleResponseChange(question.name, \"Yes\")}>\n                Yes\n              </button>\n              <button onClick={() => handleResponseChange(question.name, \"No\")}>\n                No\n              </button>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      <button className=\"next-button\" onClick={handleNext}>\n        Next\n      </button>\n    </div>\n  );\n}\n\nexport default QuestionnairePage;\n\n// import React, { useState, useEffect } from \"react\";\n// import { useNavigate } from \"react-router-dom\";\n// import \"../styles/Questionnaire.css\";\n// import { db } from \"../firebase/firebase.js\"; // Import Firestore instance\n// import { collection, doc, setDoc, getDocs } from \"firebase/firestore\";\n\n// function QuestionnairePage() {\n//   const [data, setData] = useState(null);\n//   const [currentLayerIndex, setLayerIndex] = useState(0);\n//   const [currentTopicIndex, setTopicIndex] = useState(0);\n//   const [currentSubtopicIndex, setSubtopicIndex] = useState(0);\n//   const [currentSectionIndex, setSectionIndex] = useState(0); // New state for section\n//   const [responses, setResponses] = useState({});\n//   const navigate = useNavigate();\n\n//   useEffect(() => {\n//     const fetchDataFromFirestore = async () => {\n//       try {\n//         const layersCollection = collection(db, \"layers\");\n//         const layersSnapshot = await getDocs(layersCollection);\n\n//         if (layersSnapshot.empty) {\n//           console.log(\"Firestore is empty. Adding data...\");\n//           // Load JSON and upload it if Firestore is empty\n//           fetch(\"/questionnaireData.json\")\n//             .then((response) => response.json())\n//             .then(async (jsonData) => {\n//               await addDataToFirestore(jsonData); // Add JSON to Firestore\n//               setData(jsonData); // Set state with the loaded data\n//             });\n//         } else {\n//           console.log(\"Fetching data from Firestore...\");\n//           const firestoreData = await getFirestoreData(layersSnapshot);\n//           setData(firestoreData); // Set state with Firestore data\n//         }\n//       } catch (error) {\n//         console.error(\"Error fetching data from Firestore:\", error);\n//       }\n//     };\n\n//     fetchDataFromFirestore();\n//   }, []);\n\n//   // Function to add data to Firestore\n//   const addDataToFirestore = async (jsonData) => {\n//     try {\n//       const layers = jsonData.layers;\n  \n//       // Step 1: Create all layers first\n//       for (const layer of layers) {\n//         const layerRef = doc(collection(db, \"layers\"), layer.lname);\n//         await setDoc(layerRef, { name: layer.lname });\n  \n//         // Step 2: Create topics under each layer\n//         for (const topic of layer.topics) {\n//           const topicRef = doc(collection(layerRef, \"topics\"), topic.tname);\n//           await setDoc(topicRef, { name: topic.tname });\n  \n//           // Step 3: Create subtopics under each topic\n//           for (const subtopic of topic.subtopics) {\n//             const sanitizedSubtopicName = subtopic.stname.replace(/[^a-zA-Z0-9]/g, '_');\n//             const subtopicRef = doc(collection(topicRef, \"subtopics\"), sanitizedSubtopicName);\n//             await setDoc(subtopicRef, { name: subtopic.stname });\n  \n//             // Step 4: Create sections under each subtopic\n//             for (const section of subtopic.sections) {\n//               const sectionRef = doc(collection(subtopicRef, \"sections\"), section.sname);\n//               await setDoc(sectionRef, { name: section.sname });\n  \n//               // Step 5: Create questions under each section\n//               for (const question of section.questions) {\n//                 const questionRef = doc(\n//                   collection(sectionRef, \"questions\"),\n//                   question.name\n//                 );\n//                 await setDoc(questionRef, {\n//                   name: question.name,\n//                   info: question.info,\n//                   good_point: question.good_point,\n//                   scope_for_improvement: question.scope_for_improvement,\n//                   mandatory: question.mandatory,\n//                   tags: question.tags,\n//                 });\n//               }\n//             }\n//           }\n//         }\n//       }\n  \n//       console.log(\"Data successfully added to Firestore!\");\n//     } catch (error) {\n//       console.error(\"Error adding data to Firestore:\", error);\n//     }\n//   };\n  \n\n//   // Function to fetch data from Firestore and build a JSON-like structure\n//   const getFirestoreData = async (layersSnapshot) => {\n//     const layers = [];\n//     for (const layerDoc of layersSnapshot.docs) {\n//       const topicsSnapshot = await getDocs(collection(layerDoc.ref, \"topics\"));\n//       const topics = [];\n//       for (const topicDoc of topicsSnapshot.docs) {\n//         const subtopicsSnapshot = await getDocs(\n//           collection(topicDoc.ref, \"subtopics\")\n//         );\n//         const subtopics = [];\n//         for (const subtopicDoc of subtopicsSnapshot.docs) {\n//           const sectionsSnapshot = await getDocs(\n//             collection(subtopicDoc.ref, \"sections\")\n//           );\n//           const sections = [];\n//           for (const sectionDoc of sectionsSnapshot.docs) {\n//             const questionsSnapshot = await getDocs(\n//               collection(sectionDoc.ref, \"questions\")\n//             );\n//             const questions = questionsSnapshot.docs.map((doc) => doc.data());\n//             sections.push({ name: sectionDoc.id, questions });\n//           }\n//           subtopics.push({ name: subtopicDoc.id, sections });\n//         }\n//         topics.push({ name: topicDoc.id, subtopics });\n//       }\n//       layers.push({ name: layerDoc.id, topics });\n//     }\n//     return { layers };\n//   };\n\n//   if (!data) return <div>Loading...</div>;\n\n//   const layer = data.layers[currentLayerIndex];\n//   const topic = layer.topics[currentTopicIndex];\n//   const subtopic = topic.subtopics[currentSubtopicIndex];\n//   const section = subtopic.sections[currentSectionIndex];\n\n//   const handleResponseChange = (questionName, answer) => {\n//     setResponses((prevResponses) => ({\n//       ...prevResponses,\n//       [questionName]: answer,\n//     }));\n//   };\n\n//   const handleNext = () => {\n//     if (currentSectionIndex < subtopic.sections.length - 1) {\n//       setSectionIndex(currentSectionIndex + 1); // Move to next section\n//     } else if (currentSubtopicIndex < topic.subtopics.length - 1) {\n//       setSectionIndex(0);\n//       setSubtopicIndex(currentSubtopicIndex + 1);\n//     } else if (currentTopicIndex < layer.topics.length - 1) {\n//       setSubtopicIndex(0);\n//       setTopicIndex(currentTopicIndex + 1);\n//     } else if (currentLayerIndex < data.layers.length - 1) {\n//       setLayerIndex(currentLayerIndex + 1);\n//       setTopicIndex(0);\n//       setSubtopicIndex(0);\n//     } else {\n//       console.log(\"Questionnaire completed\");\n//       navigate(\"/score\", { state: { responses, jsonData: data } });\n//     }\n//   };\n\n//   return (\n//     <div className=\"panel\">\n//       <div className=\"panel-header\">\n//         <h2>Layer: {layer.lname}</h2>\n//         <h3>Topic: {topic.tname}</h3>\n//         <h4>Subtopic: {subtopic.stname}</h4>\n//         <h5>Section: {section.sname}</h5>\n//       </div>\n\n//       <div className=\"panel-body\">\n//         {section.questions.map((question, index) => (\n//           <div key={index} className=\"question-panel\">\n//             <p><strong>{question.name}</strong></p>\n//             <div className=\"buttons\">\n//               <button onClick={() => handleResponseChange(question.name, \"Yes\")}>\n//                 Yes\n//               </button>\n//               <button onClick={() => handleResponseChange(question.name, \"No\")}>\n//                 No\n//               </button>\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n\n//       <button className=\"next-button\" onClick={handleNext}>\n//         Next\n//       </button>\n//     </div>\n//   );\n// }\n\n// export default QuestionnairePage;\n"],"mappings":"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AC;AAEV;AAAC7B,EAAA,CAtGQD,iBAAiB;EAAA,QAOPH,WAAW;AAAA;AAAAuD,EAAA,GAPrBpD,iBAAiB;AAwG1B,eAAeA,iBAAiB;;AAEhC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAoD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}